
jchav027_lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000050e  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800110  00800110  000005b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000417  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000228  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045d  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000299  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	7d c1       	rjmp	.+762    	; 0x330 <__vector_13>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	82 00       	.word	0x0082	; ????
  8e:	9a 00       	.word	0x009a	; ????
  90:	9d 00       	.word	0x009d	; ????
  92:	a3 00       	.word	0x00a3	; ????
  94:	a6 00       	.word	0x00a6	; ????
  96:	ac 00       	.word	0x00ac	; ????
  98:	af 00       	.word	0x00af	; ????
  9a:	b5 00       	.word	0x00b5	; ????
  9c:	b8 00       	.word	0x00b8	; ????
  9e:	01 01       	movw	r0, r2
  a0:	19 01       	movw	r2, r18
  a2:	1c 01       	movw	r2, r24
  a4:	22 01       	movw	r4, r4
  a6:	25 01       	movw	r4, r10
  a8:	2b 01       	movw	r4, r22
  aa:	2e 01       	movw	r4, r28
  ac:	34 01       	movw	r6, r8
  ae:	37 01       	movw	r6, r14

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d0 e4       	ldi	r29, 0x40	; 64
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	11 e0       	ldi	r17, 0x01	; 1
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	ee e0       	ldi	r30, 0x0E	; 14
  c4:	f5 e0       	ldi	r31, 0x05	; 5
  c6:	00 e0       	ldi	r16, 0x00	; 0
  c8:	0b bf       	out	0x3b, r16	; 59
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x14>
  cc:	07 90       	elpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0x10>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 32       	cpi	r26, 0x2B	; 43
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	ba d1       	rcall	.+884    	; 0x45c <main>
  e8:	10 c2       	rjmp	.+1056   	; 0x50a <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <s1_Tick>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  ec:	e0 91 03 01 	lds	r30, 0x0103
  f0:	8e 2f       	mov	r24, r30
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	89 30       	cpi	r24, 0x09	; 9
  f6:	91 05       	cpc	r25, r1
  f8:	08 f0       	brcs	.+2      	; 0xfc <s1_Tick+0x10>
  fa:	40 c0       	rjmp	.+128    	; 0x17c <s1_Tick+0x90>
  fc:	fc 01       	movw	r30, r24
  fe:	ea 5b       	subi	r30, 0xBA	; 186
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	fa c1       	rjmp	.+1012   	; 0x4f8 <__tablejump2__>
 104:	00 99       	sbic	0x00, 0	; 0
 106:	03 c0       	rjmp	.+6      	; 0x10e <s1_Tick+0x22>
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 03 01 	sts	0x0103, r24
 10e:	01 99       	sbic	0x00, 1	; 0
 110:	03 c0       	rjmp	.+6      	; 0x118 <s1_Tick+0x2c>
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	80 93 03 01 	sts	0x0103, r24
 118:	02 99       	sbic	0x00, 2	; 0
 11a:	06 c0       	rjmp	.+12     	; 0x128 <s1_Tick+0x3c>
 11c:	86 e0       	ldi	r24, 0x06	; 6
 11e:	80 93 03 01 	sts	0x0103, r24
 122:	03 9b       	sbis	0x00, 3	; 0
 124:	03 c0       	rjmp	.+6      	; 0x12c <s1_Tick+0x40>
 126:	59 c0       	rjmp	.+178    	; 0x1da <s1_Tick+0xee>
 128:	03 99       	sbic	0x00, 3	; 0
 12a:	2b c0       	rjmp	.+86     	; 0x182 <s1_Tick+0x96>
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	80 93 03 01 	sts	0x0103, r24
 132:	53 c0       	rjmp	.+166    	; 0x1da <s1_Tick+0xee>
 134:	10 92 03 01 	sts	0x0103, r1
 138:	50 c0       	rjmp	.+160    	; 0x1da <s1_Tick+0xee>
 13a:	00 9b       	sbis	0x00, 0	; 0
 13c:	4e c0       	rjmp	.+156    	; 0x1da <s1_Tick+0xee>
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 03 01 	sts	0x0103, r24
 144:	2b c0       	rjmp	.+86     	; 0x19c <s1_Tick+0xb0>
 146:	10 92 03 01 	sts	0x0103, r1
 14a:	47 c0       	rjmp	.+142    	; 0x1da <s1_Tick+0xee>
 14c:	01 9b       	sbis	0x00, 1	; 0
 14e:	45 c0       	rjmp	.+138    	; 0x1da <s1_Tick+0xee>
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	80 93 03 01 	sts	0x0103, r24
 156:	2a c0       	rjmp	.+84     	; 0x1ac <s1_Tick+0xc0>
 158:	10 92 03 01 	sts	0x0103, r1
 15c:	3e c0       	rjmp	.+124    	; 0x1da <s1_Tick+0xee>
 15e:	02 9b       	sbis	0x00, 2	; 0
 160:	3c c0       	rjmp	.+120    	; 0x1da <s1_Tick+0xee>
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	80 93 03 01 	sts	0x0103, r24
 168:	29 c0       	rjmp	.+82     	; 0x1bc <s1_Tick+0xd0>
 16a:	10 92 03 01 	sts	0x0103, r1
 16e:	35 c0       	rjmp	.+106    	; 0x1da <s1_Tick+0xee>
 170:	03 9b       	sbis	0x00, 3	; 0
 172:	33 c0       	rjmp	.+102    	; 0x1da <s1_Tick+0xee>
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	80 93 03 01 	sts	0x0103, r24
 17a:	28 c0       	rjmp	.+80     	; 0x1cc <s1_Tick+0xe0>
 17c:	10 92 03 01 	sts	0x0103, r1
 180:	2c c0       	rjmp	.+88     	; 0x1da <s1_Tick+0xee>
 182:	80 91 03 01 	lds	r24, 0x0103
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	89 f0       	breq	.+34     	; 0x1ac <s1_Tick+0xc0>
 18a:	18 f4       	brcc	.+6      	; 0x192 <s1_Tick+0xa6>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	31 f0       	breq	.+12     	; 0x19c <s1_Tick+0xb0>
 190:	24 c0       	rjmp	.+72     	; 0x1da <s1_Tick+0xee>
 192:	85 30       	cpi	r24, 0x05	; 5
 194:	99 f0       	breq	.+38     	; 0x1bc <s1_Tick+0xd0>
 196:	87 30       	cpi	r24, 0x07	; 7
 198:	c9 f0       	breq	.+50     	; 0x1cc <s1_Tick+0xe0>
 19a:	1f c0       	rjmp	.+62     	; 0x1da <s1_Tick+0xee>
 19c:	80 91 05 01 	lds	r24, 0x0105
 1a0:	8a 30       	cpi	r24, 0x0A	; 10
 1a2:	d8 f0       	brcs	.+54     	; 0x1da <s1_Tick+0xee>
 1a4:	86 95       	lsr	r24
 1a6:	80 93 05 01 	sts	0x0105, r24
 1aa:	17 c0       	rjmp	.+46     	; 0x1da <s1_Tick+0xee>
 1ac:	80 91 05 01 	lds	r24, 0x0105
 1b0:	80 39       	cpi	r24, 0x90	; 144
 1b2:	98 f4       	brcc	.+38     	; 0x1da <s1_Tick+0xee>
 1b4:	88 0f       	add	r24, r24
 1b6:	80 93 05 01 	sts	0x0105, r24
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <s1_Tick+0xee>
 1bc:	80 91 04 01 	lds	r24, 0x0104
 1c0:	8c 31       	cpi	r24, 0x1C	; 28
 1c2:	58 f4       	brcc	.+22     	; 0x1da <s1_Tick+0xee>
 1c4:	88 0f       	add	r24, r24
 1c6:	80 93 04 01 	sts	0x0104, r24
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <s1_Tick+0xee>
 1cc:	80 91 04 01 	lds	r24, 0x0104
 1d0:	88 30       	cpi	r24, 0x08	; 8
 1d2:	18 f0       	brcs	.+6      	; 0x1da <s1_Tick+0xee>
 1d4:	86 95       	lsr	r24
 1d6:	80 93 04 01 	sts	0x0104, r24
 1da:	80 91 05 01 	lds	r24, 0x0105
 1de:	88 b9       	out	0x08, r24	; 8
 1e0:	80 91 04 01 	lds	r24, 0x0104
 1e4:	80 95       	com	r24
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	08 95       	ret

000001ea <s2_Tick>:
 1ea:	e0 91 00 01 	lds	r30, 0x0100
 1ee:	8e 2f       	mov	r24, r30
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	89 30       	cpi	r24, 0x09	; 9
 1f4:	91 05       	cpc	r25, r1
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <s2_Tick+0x10>
 1f8:	40 c0       	rjmp	.+128    	; 0x27a <s2_Tick+0x90>
 1fa:	fc 01       	movw	r30, r24
 1fc:	e1 5b       	subi	r30, 0xB1	; 177
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	7b c1       	rjmp	.+758    	; 0x4f8 <__tablejump2__>
 202:	00 99       	sbic	0x00, 0	; 0
 204:	03 c0       	rjmp	.+6      	; 0x20c <s2_Tick+0x22>
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 00 01 	sts	0x0100, r24
 20c:	01 99       	sbic	0x00, 1	; 0
 20e:	03 c0       	rjmp	.+6      	; 0x216 <s2_Tick+0x2c>
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	80 93 00 01 	sts	0x0100, r24
 216:	02 99       	sbic	0x00, 2	; 0
 218:	06 c0       	rjmp	.+12     	; 0x226 <s2_Tick+0x3c>
 21a:	86 e0       	ldi	r24, 0x06	; 6
 21c:	80 93 00 01 	sts	0x0100, r24
 220:	03 9b       	sbis	0x00, 3	; 0
 222:	03 c0       	rjmp	.+6      	; 0x22a <s2_Tick+0x40>
 224:	59 c0       	rjmp	.+178    	; 0x2d8 <s2_Tick+0xee>
 226:	03 99       	sbic	0x00, 3	; 0
 228:	2b c0       	rjmp	.+86     	; 0x280 <s2_Tick+0x96>
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	80 93 00 01 	sts	0x0100, r24
 230:	53 c0       	rjmp	.+166    	; 0x2d8 <s2_Tick+0xee>
 232:	10 92 00 01 	sts	0x0100, r1
 236:	50 c0       	rjmp	.+160    	; 0x2d8 <s2_Tick+0xee>
 238:	00 9b       	sbis	0x00, 0	; 0
 23a:	4e c0       	rjmp	.+156    	; 0x2d8 <s2_Tick+0xee>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 00 01 	sts	0x0100, r24
 242:	2b c0       	rjmp	.+86     	; 0x29a <s2_Tick+0xb0>
 244:	10 92 00 01 	sts	0x0100, r1
 248:	47 c0       	rjmp	.+142    	; 0x2d8 <s2_Tick+0xee>
 24a:	01 9b       	sbis	0x00, 1	; 0
 24c:	45 c0       	rjmp	.+138    	; 0x2d8 <s2_Tick+0xee>
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	80 93 00 01 	sts	0x0100, r24
 254:	2a c0       	rjmp	.+84     	; 0x2aa <s2_Tick+0xc0>
 256:	10 92 00 01 	sts	0x0100, r1
 25a:	3e c0       	rjmp	.+124    	; 0x2d8 <s2_Tick+0xee>
 25c:	02 9b       	sbis	0x00, 2	; 0
 25e:	3c c0       	rjmp	.+120    	; 0x2d8 <s2_Tick+0xee>
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	80 93 00 01 	sts	0x0100, r24
 266:	29 c0       	rjmp	.+82     	; 0x2ba <s2_Tick+0xd0>
 268:	10 92 00 01 	sts	0x0100, r1
 26c:	35 c0       	rjmp	.+106    	; 0x2d8 <s2_Tick+0xee>
 26e:	03 9b       	sbis	0x00, 3	; 0
 270:	33 c0       	rjmp	.+102    	; 0x2d8 <s2_Tick+0xee>
 272:	87 e0       	ldi	r24, 0x07	; 7
 274:	80 93 00 01 	sts	0x0100, r24
 278:	28 c0       	rjmp	.+80     	; 0x2ca <s2_Tick+0xe0>
 27a:	10 92 00 01 	sts	0x0100, r1
 27e:	2c c0       	rjmp	.+88     	; 0x2d8 <s2_Tick+0xee>
 280:	80 91 00 01 	lds	r24, 0x0100
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	89 f0       	breq	.+34     	; 0x2aa <s2_Tick+0xc0>
 288:	18 f4       	brcc	.+6      	; 0x290 <s2_Tick+0xa6>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	31 f0       	breq	.+12     	; 0x29a <s2_Tick+0xb0>
 28e:	24 c0       	rjmp	.+72     	; 0x2d8 <s2_Tick+0xee>
 290:	85 30       	cpi	r24, 0x05	; 5
 292:	99 f0       	breq	.+38     	; 0x2ba <s2_Tick+0xd0>
 294:	87 30       	cpi	r24, 0x07	; 7
 296:	c9 f0       	breq	.+50     	; 0x2ca <s2_Tick+0xe0>
 298:	1f c0       	rjmp	.+62     	; 0x2d8 <s2_Tick+0xee>
 29a:	80 91 02 01 	lds	r24, 0x0102
 29e:	87 30       	cpi	r24, 0x07	; 7
 2a0:	d8 f0       	brcs	.+54     	; 0x2d8 <s2_Tick+0xee>
 2a2:	86 95       	lsr	r24
 2a4:	80 93 02 01 	sts	0x0102, r24
 2a8:	17 c0       	rjmp	.+46     	; 0x2d8 <s2_Tick+0xee>
 2aa:	80 91 02 01 	lds	r24, 0x0102
 2ae:	80 36       	cpi	r24, 0x60	; 96
 2b0:	98 f4       	brcc	.+38     	; 0x2d8 <s2_Tick+0xee>
 2b2:	88 0f       	add	r24, r24
 2b4:	80 93 02 01 	sts	0x0102, r24
 2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <s2_Tick+0xee>
 2ba:	80 91 01 01 	lds	r24, 0x0101
 2be:	84 31       	cpi	r24, 0x14	; 20
 2c0:	58 f4       	brcc	.+22     	; 0x2d8 <s2_Tick+0xee>
 2c2:	88 0f       	add	r24, r24
 2c4:	80 93 01 01 	sts	0x0101, r24
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <s2_Tick+0xee>
 2ca:	80 91 01 01 	lds	r24, 0x0101
 2ce:	86 30       	cpi	r24, 0x06	; 6
 2d0:	18 f0       	brcs	.+6      	; 0x2d8 <s2_Tick+0xee>
 2d2:	86 95       	lsr	r24
 2d4:	80 93 01 01 	sts	0x0101, r24
 2d8:	80 91 02 01 	lds	r24, 0x0102
 2dc:	88 b9       	out	0x08, r24	; 8
 2de:	80 91 01 01 	lds	r24, 0x0101
 2e2:	80 95       	com	r24
 2e4:	8b b9       	out	0x0b, r24	; 11
 2e6:	08 95       	ret

000002e8 <TimerOn>:
 2e8:	8b e0       	ldi	r24, 0x0B	; 11
 2ea:	80 93 81 00 	sts	0x0081, r24
 2ee:	8d e7       	ldi	r24, 0x7D	; 125
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	90 93 89 00 	sts	0x0089, r25
 2f6:	80 93 88 00 	sts	0x0088, r24
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	80 93 6f 00 	sts	0x006F, r24
 300:	10 92 85 00 	sts	0x0085, r1
 304:	10 92 84 00 	sts	0x0084, r1
 308:	80 91 0b 01 	lds	r24, 0x010B
 30c:	90 91 0c 01 	lds	r25, 0x010C
 310:	a0 91 0d 01 	lds	r26, 0x010D
 314:	b0 91 0e 01 	lds	r27, 0x010E
 318:	80 93 10 01 	sts	0x0110, r24
 31c:	90 93 11 01 	sts	0x0111, r25
 320:	a0 93 12 01 	sts	0x0112, r26
 324:	b0 93 13 01 	sts	0x0113, r27
 328:	8f b7       	in	r24, 0x3f	; 63
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	8f bf       	out	0x3f, r24	; 63
 32e:	08 95       	ret

00000330 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 342:	80 91 10 01 	lds	r24, 0x0110
 346:	90 91 11 01 	lds	r25, 0x0111
 34a:	a0 91 12 01 	lds	r26, 0x0112
 34e:	b0 91 13 01 	lds	r27, 0x0113
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	a1 09       	sbc	r26, r1
 356:	b1 09       	sbc	r27, r1
 358:	80 93 10 01 	sts	0x0110, r24
 35c:	90 93 11 01 	sts	0x0111, r25
 360:	a0 93 12 01 	sts	0x0112, r26
 364:	b0 93 13 01 	sts	0x0113, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 368:	89 2b       	or	r24, r25
 36a:	8a 2b       	or	r24, r26
 36c:	8b 2b       	or	r24, r27
 36e:	99 f4       	brne	.+38     	; 0x396 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	80 93 14 01 	sts	0x0114, r24
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 376:	80 91 0b 01 	lds	r24, 0x010B
 37a:	90 91 0c 01 	lds	r25, 0x010C
 37e:	a0 91 0d 01 	lds	r26, 0x010D
 382:	b0 91 0e 01 	lds	r27, 0x010E
 386:	80 93 10 01 	sts	0x0110, r24
 38a:	90 93 11 01 	sts	0x0111, r25
 38e:	a0 93 12 01 	sts	0x0112, r26
 392:	b0 93 13 01 	sts	0x0113, r27
	}
}
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <taskManage>:
unsigned char numTasks = 2;

task task1, task2;
task *taskList[] = {&task1, &task2};

void taskManage() {
 3a8:	ef 92       	push	r14
 3aa:	ff 92       	push	r15
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	unsigned char i = 0;
	for(i = 0; i < numTasks; i++)
 3b2:	80 91 0a 01 	lds	r24, 0x010A
 3b6:	88 23       	and	r24, r24
 3b8:	09 f4       	brne	.+2      	; 0x3bc <taskManage+0x14>
 3ba:	4a c0       	rjmp	.+148    	; 0x450 <taskManage+0xa8>
 3bc:	10 e0       	ldi	r17, 0x00	; 0
	{
		// Task is ready to tick
		if ( taskList[i]->elapsedTime == taskList[i]->period ) {
 3be:	c1 2f       	mov	r28, r17
 3c0:	d0 e0       	ldi	r29, 0x00	; 0
 3c2:	fe 01       	movw	r30, r28
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	ea 5f       	subi	r30, 0xFA	; 250
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	e0 80       	ld	r14, Z
 3ce:	f1 80       	ldd	r15, Z+1	; 0x01
 3d0:	d7 01       	movw	r26, r14
 3d2:	15 96       	adiw	r26, 0x05	; 5
 3d4:	4d 91       	ld	r20, X+
 3d6:	5d 91       	ld	r21, X+
 3d8:	6d 91       	ld	r22, X+
 3da:	7c 91       	ld	r23, X
 3dc:	18 97       	sbiw	r26, 0x08	; 8
 3de:	11 96       	adiw	r26, 0x01	; 1
 3e0:	8d 91       	ld	r24, X+
 3e2:	9d 91       	ld	r25, X+
 3e4:	0d 90       	ld	r0, X+
 3e6:	bc 91       	ld	r27, X
 3e8:	a0 2d       	mov	r26, r0
 3ea:	48 17       	cp	r20, r24
 3ec:	59 07       	cpc	r21, r25
 3ee:	6a 07       	cpc	r22, r26
 3f0:	7b 07       	cpc	r23, r27
 3f2:	b9 f4       	brne	.+46     	; 0x422 <taskManage+0x7a>
			// Setting next state for task
			taskList[i]->state = taskList[i]->TickFct(taskList[i]->state);
 3f4:	f7 01       	movw	r30, r14
 3f6:	80 81       	ld	r24, Z
 3f8:	01 84       	ldd	r0, Z+9	; 0x09
 3fa:	f2 85       	ldd	r31, Z+10	; 0x0a
 3fc:	e0 2d       	mov	r30, r0
 3fe:	08 2e       	mov	r0, r24
 400:	00 0c       	add	r0, r0
 402:	99 0b       	sbc	r25, r25
 404:	09 95       	icall
 406:	d7 01       	movw	r26, r14
 408:	8c 93       	st	X, r24
			// Reset the elapsed time for next tick.
			taskList[i]->elapsedTime = 0;
 40a:	fe 01       	movw	r30, r28
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	ea 5f       	subi	r30, 0xFA	; 250
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	01 90       	ld	r0, Z+
 416:	f0 81       	ld	r31, Z
 418:	e0 2d       	mov	r30, r0
 41a:	15 82       	std	Z+5, r1	; 0x05
 41c:	16 82       	std	Z+6, r1	; 0x06
 41e:	17 82       	std	Z+7, r1	; 0x07
 420:	10 86       	std	Z+8, r1	; 0x08
		}
		//leftdate the value of how long will have passed until next check
		taskList[i]->elapsedTime += GCD_Period;
 422:	cc 0f       	add	r28, r28
 424:	dd 1f       	adc	r29, r29
 426:	ca 5f       	subi	r28, 0xFA	; 250
 428:	de 4f       	sbci	r29, 0xFE	; 254
 42a:	e8 81       	ld	r30, Y
 42c:	f9 81       	ldd	r31, Y+1	; 0x01
 42e:	85 81       	ldd	r24, Z+5	; 0x05
 430:	96 81       	ldd	r25, Z+6	; 0x06
 432:	a7 81       	ldd	r26, Z+7	; 0x07
 434:	b0 85       	ldd	r27, Z+8	; 0x08
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	a1 1d       	adc	r26, r1
 43a:	b1 1d       	adc	r27, r1
 43c:	85 83       	std	Z+5, r24	; 0x05
 43e:	96 83       	std	Z+6, r25	; 0x06
 440:	a7 83       	std	Z+7, r26	; 0x07
 442:	b0 87       	std	Z+8, r27	; 0x08
task task1, task2;
task *taskList[] = {&task1, &task2};

void taskManage() {
	unsigned char i = 0;
	for(i = 0; i < numTasks; i++)
 444:	1f 5f       	subi	r17, 0xFF	; 255
 446:	80 91 0a 01 	lds	r24, 0x010A
 44a:	18 17       	cp	r17, r24
 44c:	08 f4       	brcc	.+2      	; 0x450 <taskManage+0xa8>
 44e:	b7 cf       	rjmp	.-146    	; 0x3be <taskManage+0x16>
			taskList[i]->elapsedTime = 0;
		}
		//leftdate the value of how long will have passed until next check
		taskList[i]->elapsedTime += GCD_Period;
	}
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	ff 90       	pop	r15
 458:	ef 90       	pop	r14
 45a:	08 95       	ret

0000045c <main>:
	PORTD = ~D2;
	//return state2;
}

int main(void) {
	DDRA = 0x00; PORTA = 0xFF; //Set port A's 8 pins as inputs
 45c:	11 b8       	out	0x01, r1	; 1
 45e:	cf ef       	ldi	r28, 0xFF	; 255
 460:	c2 b9       	out	0x02, r28	; 2
	DDRC = 0xFF; PORTC = 0x00; //Set port C's 8 pins as ops
 462:	c7 b9       	out	0x07, r28	; 7
 464:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //Set port D's 8 pins as ops
 466:	ca b9       	out	0x0a, r28	; 10
 468:	1b b8       	out	0x0b, r1	; 11
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 46a:	c1 2c       	mov	r12, r1
 46c:	d1 2c       	mov	r13, r1
 46e:	76 01       	movw	r14, r12
 470:	c3 94       	inc	r12
 472:	c0 92 0b 01 	sts	0x010B, r12
 476:	d0 92 0c 01 	sts	0x010C, r13
 47a:	e0 92 0d 01 	sts	0x010D, r14
 47e:	f0 92 0e 01 	sts	0x010E, r15
	_avr_timer_cntcurr = _avr_timer_M;
 482:	c0 92 10 01 	sts	0x0110, r12
 486:	d0 92 11 01 	sts	0x0111, r13
 48a:	e0 92 12 01 	sts	0x0112, r14
 48e:	f0 92 13 01 	sts	0x0113, r15
	
	TimerSet(GCD_Period);
	TimerOn();
 492:	2a df       	rcall	.-428    	; 0x2e8 <TimerOn>
 
 	task1.elapsedTime = task1.period;
 494:	e5 e1       	ldi	r30, 0x15	; 21
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	81 81       	ldd	r24, Z+1	; 0x01
 49a:	92 81       	ldd	r25, Z+2	; 0x02
 49c:	a3 81       	ldd	r26, Z+3	; 0x03
 49e:	b4 81       	ldd	r27, Z+4	; 0x04
 4a0:	85 83       	std	Z+5, r24	; 0x05
 4a2:	96 83       	std	Z+6, r25	; 0x06
 4a4:	a7 83       	std	Z+7, r26	; 0x07
 4a6:	b0 87       	std	Z+8, r27	; 0x08
 	task1.period = 1;
 4a8:	c1 82       	std	Z+1, r12	; 0x01
 4aa:	d2 82       	std	Z+2, r13	; 0x02
 4ac:	e3 82       	std	Z+3, r14	; 0x03
 4ae:	f4 82       	std	Z+4, r15	; 0x04
 	task1.state = -1;
 4b0:	c0 83       	st	Z, r28
 	task1.TickFct = &s1_Tick;
 4b2:	86 e7       	ldi	r24, 0x76	; 118
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	92 87       	std	Z+10, r25	; 0x0a
 4b8:	81 87       	std	Z+9, r24	; 0x09

 	task2.elapsedTime = task2.period;
 4ba:	e0 e2       	ldi	r30, 0x20	; 32
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	81 81       	ldd	r24, Z+1	; 0x01
 4c0:	92 81       	ldd	r25, Z+2	; 0x02
 4c2:	a3 81       	ldd	r26, Z+3	; 0x03
 4c4:	b4 81       	ldd	r27, Z+4	; 0x04
 4c6:	85 83       	std	Z+5, r24	; 0x05
 4c8:	96 83       	std	Z+6, r25	; 0x06
 4ca:	a7 83       	std	Z+7, r26	; 0x07
 4cc:	b0 87       	std	Z+8, r27	; 0x08
 	task2.period = 2;
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	a0 e0       	ldi	r26, 0x00	; 0
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	81 83       	std	Z+1, r24	; 0x01
 4d8:	92 83       	std	Z+2, r25	; 0x02
 4da:	a3 83       	std	Z+3, r26	; 0x03
 4dc:	b4 83       	std	Z+4, r27	; 0x04
 	task2.state = -1;
 4de:	c0 83       	st	Z, r28
 	task2.TickFct = &s2_Tick;	 
 4e0:	85 ef       	ldi	r24, 0xF5	; 245
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	92 87       	std	Z+10, r25	; 0x0a
 4e6:	81 87       	std	Z+9, r24	; 0x09
	//op = 0xFF;
	
    while(1) {
		taskManage();
 4e8:	5f df       	rcall	.-322    	; 0x3a8 <taskManage>
		
		while(!TimerFlag);
 4ea:	80 91 14 01 	lds	r24, 0x0114
 4ee:	88 23       	and	r24, r24
 4f0:	e1 f3       	breq	.-8      	; 0x4ea <main+0x8e>
		TimerFlag = 0;
 4f2:	10 92 14 01 	sts	0x0114, r1
    }
 4f6:	f8 cf       	rjmp	.-16     	; 0x4e8 <main+0x8c>

000004f8 <__tablejump2__>:
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	00 24       	eor	r0, r0
 4fe:	00 1c       	adc	r0, r0
 500:	0b be       	out	0x3b, r0	; 59
 502:	07 90       	elpm	r0, Z+
 504:	f6 91       	elpm	r31, Z
 506:	e0 2d       	mov	r30, r0
 508:	09 94       	ijmp

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
