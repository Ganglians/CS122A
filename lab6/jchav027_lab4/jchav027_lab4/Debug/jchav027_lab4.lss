
jchav027_lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000498  0000052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080010e  0080010e  0000053a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000463  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000279  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000427  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028f  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000299  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c1       	rjmp	.+580    	; 0x27a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 32       	cpi	r26, 0x2E	; 46
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	88 d1       	rcall	.+784    	; 0x3d4 <main>
  c4:	e7 c1       	rjmp	.+974    	; 0x494 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <part1_Tick>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	80 91 01 01 	lds	r24, 0x0101
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	f1 f0       	breq	.+60     	; 0x10c <part1_Tick+0x44>
  d0:	28 f4       	brcc	.+10     	; 0xdc <part1_Tick+0x14>
  d2:	88 23       	and	r24, r24
  d4:	41 f0       	breq	.+16     	; 0xe6 <part1_Tick+0x1e>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	b1 f0       	breq	.+44     	; 0x106 <part1_Tick+0x3e>
  da:	34 c0       	rjmp	.+104    	; 0x144 <part1_Tick+0x7c>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	29 f1       	breq	.+74     	; 0x12a <part1_Tick+0x62>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	31 f1       	breq	.+76     	; 0x130 <part1_Tick+0x68>
  e4:	2f c0       	rjmp	.+94     	; 0x144 <part1_Tick+0x7c>
  e6:	80 91 11 01 	lds	r24, 0x0111
  ea:	90 91 12 01 	lds	r25, 0x0112
  ee:	8c 39       	cpi	r24, 0x9C	; 156
  f0:	91 05       	cpc	r25, r1
  f2:	d8 f1       	brcs	.+118    	; 0x16a <part1_Tick+0xa2>
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	20 93 01 01 	sts	0x0101, r18
  fa:	c2 97       	sbiw	r24, 0x32	; 50
  fc:	50 f5       	brcc	.+84     	; 0x152 <part1_Tick+0x8a>
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	80 93 01 01 	sts	0x0101, r24
 104:	35 c0       	rjmp	.+106    	; 0x170 <part1_Tick+0xa8>
 106:	10 92 01 01 	sts	0x0101, r1
 10a:	36 c0       	rjmp	.+108    	; 0x178 <part1_Tick+0xb0>
 10c:	80 91 11 01 	lds	r24, 0x0111
 110:	90 91 12 01 	lds	r25, 0x0112
 114:	8b 39       	cpi	r24, 0x9B	; 155
 116:	91 05       	cpc	r25, r1
 118:	e0 f4       	brcc	.+56     	; 0x152 <part1_Tick+0x8a>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 01 01 	sts	0x0101, r24
 120:	80 91 03 01 	lds	r24, 0x0103
 124:	88 23       	and	r24, r24
 126:	89 f0       	breq	.+34     	; 0x14a <part1_Tick+0x82>
 128:	27 c0       	rjmp	.+78     	; 0x178 <part1_Tick+0xb0>
 12a:	10 92 01 01 	sts	0x0101, r1
 12e:	24 c0       	rjmp	.+72     	; 0x178 <part1_Tick+0xb0>
 130:	80 91 11 01 	lds	r24, 0x0111
 134:	90 91 12 01 	lds	r25, 0x0112
 138:	c3 97       	sbiw	r24, 0x33	; 51
 13a:	d0 f0       	brcs	.+52     	; 0x170 <part1_Tick+0xa8>
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 01 01 	sts	0x0101, r24
 142:	1a c0       	rjmp	.+52     	; 0x178 <part1_Tick+0xb0>
 144:	10 92 01 01 	sts	0x0101, r1
 148:	17 c0       	rjmp	.+46     	; 0x178 <part1_Tick+0xb0>
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	80 93 03 01 	sts	0x0103, r24
 150:	13 c0       	rjmp	.+38     	; 0x178 <part1_Tick+0xb0>
 152:	80 91 03 01 	lds	r24, 0x0103
 156:	88 23       	and	r24, r24
 158:	7c f0       	brlt	.+30     	; 0x178 <part1_Tick+0xb0>
 15a:	88 0f       	add	r24, r24
 15c:	80 93 03 01 	sts	0x0103, r24
 160:	0b c0       	rjmp	.+22     	; 0x178 <part1_Tick+0xb0>
 162:	86 95       	lsr	r24
 164:	80 93 03 01 	sts	0x0103, r24
 168:	07 c0       	rjmp	.+14     	; 0x178 <part1_Tick+0xb0>
 16a:	c2 97       	sbiw	r24, 0x32	; 50
 16c:	40 f2       	brcs	.-112    	; 0xfe <part1_Tick+0x36>
 16e:	04 c0       	rjmp	.+8      	; 0x178 <part1_Tick+0xb0>
 170:	80 91 03 01 	lds	r24, 0x0103
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	a8 f7       	brcc	.-22     	; 0x162 <part1_Tick+0x9a>
 178:	80 91 03 01 	lds	r24, 0x0103
 17c:	88 b9       	out	0x08, r24	; 8
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	08 95       	ret

00000184 <part4_Tick>:
 184:	80 91 00 01 	lds	r24, 0x0100
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	f1 f0       	breq	.+60     	; 0x1c8 <part4_Tick+0x44>
 18c:	28 f4       	brcc	.+10     	; 0x198 <part4_Tick+0x14>
 18e:	88 23       	and	r24, r24
 190:	41 f0       	breq	.+16     	; 0x1a2 <part4_Tick+0x1e>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	b1 f0       	breq	.+44     	; 0x1c2 <part4_Tick+0x3e>
 196:	30 c0       	rjmp	.+96     	; 0x1f8 <part4_Tick+0x74>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	09 f1       	breq	.+66     	; 0x1de <part4_Tick+0x5a>
 19c:	84 30       	cpi	r24, 0x04	; 4
 19e:	11 f1       	breq	.+68     	; 0x1e4 <part4_Tick+0x60>
 1a0:	2b c0       	rjmp	.+86     	; 0x1f8 <part4_Tick+0x74>
 1a2:	80 91 0f 01 	lds	r24, 0x010F
 1a6:	90 91 10 01 	lds	r25, 0x0110
 1aa:	8b 35       	cpi	r24, 0x5B	; 91
 1ac:	91 05       	cpc	r25, r1
 1ae:	98 f1       	brcs	.+102    	; 0x216 <part4_Tick+0x92>
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	20 93 00 01 	sts	0x0100, r18
 1b6:	cc 97       	sbiw	r24, 0x3c	; 60
 1b8:	10 f5       	brcc	.+68     	; 0x1fe <part4_Tick+0x7a>
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	80 93 00 01 	sts	0x0100, r24
 1c0:	2d c0       	rjmp	.+90     	; 0x21c <part4_Tick+0x98>
 1c2:	10 92 00 01 	sts	0x0100, r1
 1c6:	2e c0       	rjmp	.+92     	; 0x224 <part4_Tick+0xa0>
 1c8:	80 91 0f 01 	lds	r24, 0x010F
 1cc:	90 91 10 01 	lds	r25, 0x0110
 1d0:	8a 35       	cpi	r24, 0x5A	; 90
 1d2:	91 05       	cpc	r25, r1
 1d4:	a0 f4       	brcc	.+40     	; 0x1fe <part4_Tick+0x7a>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 00 01 	sts	0x0100, r24
 1dc:	23 c0       	rjmp	.+70     	; 0x224 <part4_Tick+0xa0>
 1de:	10 92 00 01 	sts	0x0100, r1
 1e2:	20 c0       	rjmp	.+64     	; 0x224 <part4_Tick+0xa0>
 1e4:	80 91 0f 01 	lds	r24, 0x010F
 1e8:	90 91 10 01 	lds	r25, 0x0110
 1ec:	cd 97       	sbiw	r24, 0x3d	; 61
 1ee:	b0 f0       	brcs	.+44     	; 0x21c <part4_Tick+0x98>
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	80 93 00 01 	sts	0x0100, r24
 1f6:	16 c0       	rjmp	.+44     	; 0x224 <part4_Tick+0xa0>
 1f8:	10 92 00 01 	sts	0x0100, r1
 1fc:	13 c0       	rjmp	.+38     	; 0x224 <part4_Tick+0xa0>
 1fe:	80 91 02 01 	lds	r24, 0x0102
 202:	80 31       	cpi	r24, 0x10	; 16
 204:	78 f4       	brcc	.+30     	; 0x224 <part4_Tick+0xa0>
 206:	88 0f       	add	r24, r24
 208:	80 93 02 01 	sts	0x0102, r24
 20c:	0b c0       	rjmp	.+22     	; 0x224 <part4_Tick+0xa0>
 20e:	86 95       	lsr	r24
 210:	80 93 02 01 	sts	0x0102, r24
 214:	07 c0       	rjmp	.+14     	; 0x224 <part4_Tick+0xa0>
 216:	cc 97       	sbiw	r24, 0x3c	; 60
 218:	80 f2       	brcs	.-96     	; 0x1ba <part4_Tick+0x36>
 21a:	04 c0       	rjmp	.+8      	; 0x224 <part4_Tick+0xa0>
 21c:	80 91 02 01 	lds	r24, 0x0102
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	a8 f7       	brcc	.-22     	; 0x20e <part4_Tick+0x8a>
 224:	80 91 02 01 	lds	r24, 0x0102
 228:	80 95       	com	r24
 22a:	8b b9       	out	0x0b, r24	; 11
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	08 95       	ret

00000232 <TimerOn>:
 232:	8b e0       	ldi	r24, 0x0B	; 11
 234:	80 93 81 00 	sts	0x0081, r24
 238:	8d e7       	ldi	r24, 0x7D	; 125
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 89 00 	sts	0x0089, r25
 240:	80 93 88 00 	sts	0x0088, r24
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	80 93 6f 00 	sts	0x006F, r24
 24a:	10 92 85 00 	sts	0x0085, r1
 24e:	10 92 84 00 	sts	0x0084, r1
 252:	80 91 09 01 	lds	r24, 0x0109
 256:	90 91 0a 01 	lds	r25, 0x010A
 25a:	a0 91 0b 01 	lds	r26, 0x010B
 25e:	b0 91 0c 01 	lds	r27, 0x010C
 262:	80 93 13 01 	sts	0x0113, r24
 266:	90 93 14 01 	sts	0x0114, r25
 26a:	a0 93 15 01 	sts	0x0115, r26
 26e:	b0 93 16 01 	sts	0x0116, r27
 272:	8f b7       	in	r24, 0x3f	; 63
 274:	80 68       	ori	r24, 0x80	; 128
 276:	8f bf       	out	0x3f, r24	; 63
 278:	08 95       	ret

0000027a <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 28c:	80 91 13 01 	lds	r24, 0x0113
 290:	90 91 14 01 	lds	r25, 0x0114
 294:	a0 91 15 01 	lds	r26, 0x0115
 298:	b0 91 16 01 	lds	r27, 0x0116
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	a1 09       	sbc	r26, r1
 2a0:	b1 09       	sbc	r27, r1
 2a2:	80 93 13 01 	sts	0x0113, r24
 2a6:	90 93 14 01 	sts	0x0114, r25
 2aa:	a0 93 15 01 	sts	0x0115, r26
 2ae:	b0 93 16 01 	sts	0x0116, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 2b2:	89 2b       	or	r24, r25
 2b4:	8a 2b       	or	r24, r26
 2b6:	8b 2b       	or	r24, r27
 2b8:	99 f4       	brne	.+38     	; 0x2e0 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 17 01 	sts	0x0117, r24
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 2c0:	80 91 09 01 	lds	r24, 0x0109
 2c4:	90 91 0a 01 	lds	r25, 0x010A
 2c8:	a0 91 0b 01 	lds	r26, 0x010B
 2cc:	b0 91 0c 01 	lds	r27, 0x010C
 2d0:	80 93 13 01 	sts	0x0113, r24
 2d4:	90 93 14 01 	sts	0x0114, r25
 2d8:	a0 93 15 01 	sts	0x0115, r26
 2dc:	b0 93 16 01 	sts	0x0116, r27
	}
}
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <A2D_init>:
//Button detection
//#define BTN1 (~PINA & 0x01)
//#define BTN2 (~PINA & 0x02)

void A2D_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 2f2:	ea e7       	ldi	r30, 0x7A	; 122
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 6e       	ori	r24, 0xE0	; 224
 2fa:	80 83       	st	Z, r24
 2fc:	08 95       	ret

000002fe <Set_A2D_Pin>:
	// The value of pinNum determines the pin on PORTA
	//    used for A2D conversion
	// Valid values range between 0 and 7, where the value
	//    represents the desired pin for A2D conversion
	void Set_A2D_Pin(unsigned char pinNum) {
		ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	60 f0       	brcs	.+24     	; 0x31a <Set_A2D_Pin+0x1c>
 302:	ec e7       	ldi	r30, 0x7C	; 124
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	80 83       	st	Z, r24
	//    The default channel is 0 (PA0)
	// The value of pinNum determines the pin on PORTA
	//    used for A2D conversion
	// Valid values range between 0 and 7, where the value
	//    represents the desired pin for A2D conversion
	void Set_A2D_Pin(unsigned char pinNum) {
 30a:	8f e0       	ldi	r24, 0x0F	; 15
		ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
		// Allow channel to stabilize
		static unsigned char i = 0;
		for ( i=0; i<15; i++ ) { asm("nop"); }
 30c:	00 00       	nop
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	e9 f7       	brne	.-6      	; 0x30c <Set_A2D_Pin+0xe>
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	80 93 0e 01 	sts	0x010E, r24
 318:	08 95       	ret
	// The value of pinNum determines the pin on PORTA
	//    used for A2D conversion
	// Valid values range between 0 and 7, where the value
	//    represents the desired pin for A2D conversion
	void Set_A2D_Pin(unsigned char pinNum) {
		ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 31a:	80 93 7c 00 	sts	0x007C, r24
 31e:	f5 cf       	rjmp	.-22     	; 0x30a <Set_A2D_Pin+0xc>

00000320 <taskManage>:
unsigned char numTasks = 2;

task part1, part4;
task *taskList[] = {&part1, &part4};

void taskManage() {
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
	unsigned char i = 0;
	for(i = 0; i < numTasks; i++)
 32a:	80 91 08 01 	lds	r24, 0x0108
 32e:	88 23       	and	r24, r24
 330:	09 f4       	brne	.+2      	; 0x334 <taskManage+0x14>
 332:	4a c0       	rjmp	.+148    	; 0x3c8 <taskManage+0xa8>
 334:	10 e0       	ldi	r17, 0x00	; 0
	{
		// Task is ready to tick
		if ( taskList[i]->elapsedTime == taskList[i]->period ) {
 336:	c1 2f       	mov	r28, r17
 338:	d0 e0       	ldi	r29, 0x00	; 0
 33a:	fe 01       	movw	r30, r28
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	ec 5f       	subi	r30, 0xFC	; 252
 342:	fe 4f       	sbci	r31, 0xFE	; 254
 344:	e0 80       	ld	r14, Z
 346:	f1 80       	ldd	r15, Z+1	; 0x01
 348:	d7 01       	movw	r26, r14
 34a:	15 96       	adiw	r26, 0x05	; 5
 34c:	4d 91       	ld	r20, X+
 34e:	5d 91       	ld	r21, X+
 350:	6d 91       	ld	r22, X+
 352:	7c 91       	ld	r23, X
 354:	18 97       	sbiw	r26, 0x08	; 8
 356:	11 96       	adiw	r26, 0x01	; 1
 358:	8d 91       	ld	r24, X+
 35a:	9d 91       	ld	r25, X+
 35c:	0d 90       	ld	r0, X+
 35e:	bc 91       	ld	r27, X
 360:	a0 2d       	mov	r26, r0
 362:	48 17       	cp	r20, r24
 364:	59 07       	cpc	r21, r25
 366:	6a 07       	cpc	r22, r26
 368:	7b 07       	cpc	r23, r27
 36a:	b9 f4       	brne	.+46     	; 0x39a <taskManage+0x7a>
			// Setting next state for task
			taskList[i]->state = taskList[i]->TickFct(taskList[i]->state);
 36c:	f7 01       	movw	r30, r14
 36e:	80 81       	ld	r24, Z
 370:	01 84       	ldd	r0, Z+9	; 0x09
 372:	f2 85       	ldd	r31, Z+10	; 0x0a
 374:	e0 2d       	mov	r30, r0
 376:	08 2e       	mov	r0, r24
 378:	00 0c       	add	r0, r0
 37a:	99 0b       	sbc	r25, r25
 37c:	09 95       	icall
 37e:	d7 01       	movw	r26, r14
 380:	8c 93       	st	X, r24
			// Reset the elapsed time for next tick.
			taskList[i]->elapsedTime = 0;
 382:	fe 01       	movw	r30, r28
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	ec 5f       	subi	r30, 0xFC	; 252
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	01 90       	ld	r0, Z+
 38e:	f0 81       	ld	r31, Z
 390:	e0 2d       	mov	r30, r0
 392:	15 82       	std	Z+5, r1	; 0x05
 394:	16 82       	std	Z+6, r1	; 0x06
 396:	17 82       	std	Z+7, r1	; 0x07
 398:	10 86       	std	Z+8, r1	; 0x08
		}
		//leftdate the value of how long will have passed until next check
		taskList[i]->elapsedTime += GCD_Period;
 39a:	cc 0f       	add	r28, r28
 39c:	dd 1f       	adc	r29, r29
 39e:	cc 5f       	subi	r28, 0xFC	; 252
 3a0:	de 4f       	sbci	r29, 0xFE	; 254
 3a2:	e8 81       	ld	r30, Y
 3a4:	f9 81       	ldd	r31, Y+1	; 0x01
 3a6:	85 81       	ldd	r24, Z+5	; 0x05
 3a8:	96 81       	ldd	r25, Z+6	; 0x06
 3aa:	a7 81       	ldd	r26, Z+7	; 0x07
 3ac:	b0 85       	ldd	r27, Z+8	; 0x08
 3ae:	0a 96       	adiw	r24, 0x0a	; 10
 3b0:	a1 1d       	adc	r26, r1
 3b2:	b1 1d       	adc	r27, r1
 3b4:	85 83       	std	Z+5, r24	; 0x05
 3b6:	96 83       	std	Z+6, r25	; 0x06
 3b8:	a7 83       	std	Z+7, r26	; 0x07
 3ba:	b0 87       	std	Z+8, r27	; 0x08
task part1, part4;
task *taskList[] = {&part1, &part4};

void taskManage() {
	unsigned char i = 0;
	for(i = 0; i < numTasks; i++)
 3bc:	1f 5f       	subi	r17, 0xFF	; 255
 3be:	80 91 08 01 	lds	r24, 0x0108
 3c2:	18 17       	cp	r17, r24
 3c4:	08 f4       	brcc	.+2      	; 0x3c8 <taskManage+0xa8>
 3c6:	b7 cf       	rjmp	.-146    	; 0x336 <taskManage+0x16>
			taskList[i]->elapsedTime = 0;
		}
		//leftdate the value of how long will have passed until next check
		taskList[i]->elapsedTime += GCD_Period;
	}
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	1f 91       	pop	r17
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	08 95       	ret

000003d4 <main>:
	PORTD = ~D;
	//return state4;
}

int main(void) {
	DDRA = 0x00; PORTA = 0xFF; // Set port A's 8 pins as inputs
 3d4:	11 b8       	out	0x01, r1	; 1
 3d6:	cf ef       	ldi	r28, 0xFF	; 255
 3d8:	c2 b9       	out	0x02, r28	; 2
	DDRC = 0xFF; PORTC = 0x00; // Set port C's 8 pins as ops
 3da:	c7 b9       	out	0x07, r28	; 7
 3dc:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // Set port D's 8 pins as ops
 3de:	ca b9       	out	0x0a, r28	; 10
 3e0:	1b b8       	out	0x0b, r1	; 11
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 3e2:	0f 2e       	mov	r0, r31
 3e4:	fa e0       	ldi	r31, 0x0A	; 10
 3e6:	cf 2e       	mov	r12, r31
 3e8:	d1 2c       	mov	r13, r1
 3ea:	e1 2c       	mov	r14, r1
 3ec:	f1 2c       	mov	r15, r1
 3ee:	f0 2d       	mov	r31, r0
 3f0:	c0 92 09 01 	sts	0x0109, r12
 3f4:	d0 92 0a 01 	sts	0x010A, r13
 3f8:	e0 92 0b 01 	sts	0x010B, r14
 3fc:	f0 92 0c 01 	sts	0x010C, r15
	_avr_timer_cntcurr = _avr_timer_M;
 400:	c0 92 13 01 	sts	0x0113, r12
 404:	d0 92 14 01 	sts	0x0114, r13
 408:	e0 92 15 01 	sts	0x0115, r14
 40c:	f0 92 16 01 	sts	0x0116, r15
	
	TimerSet(GCD_Period);
	TimerOn();
 410:	10 df       	rcall	.-480    	; 0x232 <TimerOn>
 
 	part1.elapsedTime = part1.period;
 412:	e8 e1       	ldi	r30, 0x18	; 24
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	81 81       	ldd	r24, Z+1	; 0x01
 418:	92 81       	ldd	r25, Z+2	; 0x02
 41a:	a3 81       	ldd	r26, Z+3	; 0x03
 41c:	b4 81       	ldd	r27, Z+4	; 0x04
 41e:	85 83       	std	Z+5, r24	; 0x05
 420:	96 83       	std	Z+6, r25	; 0x06
 422:	a7 83       	std	Z+7, r26	; 0x07
 424:	b0 87       	std	Z+8, r27	; 0x08
 	part1.period = GCD_Period;
 426:	c1 82       	std	Z+1, r12	; 0x01
 428:	d2 82       	std	Z+2, r13	; 0x02
 42a:	e3 82       	std	Z+3, r14	; 0x03
 42c:	f4 82       	std	Z+4, r15	; 0x04
 	part1.state = -1;
 42e:	c0 83       	st	Z, r28
 	part1.TickFct = &part1_Tick;
 430:	84 e6       	ldi	r24, 0x64	; 100
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	92 87       	std	Z+10, r25	; 0x0a
 436:	81 87       	std	Z+9, r24	; 0x09

 	part4.elapsedTime = part4.period;
 438:	e3 e2       	ldi	r30, 0x23	; 35
 43a:	f1 e0       	ldi	r31, 0x01	; 1
 43c:	81 81       	ldd	r24, Z+1	; 0x01
 43e:	92 81       	ldd	r25, Z+2	; 0x02
 440:	a3 81       	ldd	r26, Z+3	; 0x03
 442:	b4 81       	ldd	r27, Z+4	; 0x04
 444:	85 83       	std	Z+5, r24	; 0x05
 446:	96 83       	std	Z+6, r25	; 0x06
 448:	a7 83       	std	Z+7, r26	; 0x07
 44a:	b0 87       	std	Z+8, r27	; 0x08
 	part4.period = GCD_Period;
 44c:	c1 82       	std	Z+1, r12	; 0x01
 44e:	d2 82       	std	Z+2, r13	; 0x02
 450:	e3 82       	std	Z+3, r14	; 0x03
 452:	f4 82       	std	Z+4, r15	; 0x04
 	part4.state = -1;
 454:	c0 83       	st	Z, r28
 	part4.TickFct = &part4_Tick;
 456:	82 ec       	ldi	r24, 0xC2	; 194
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	92 87       	std	Z+10, r25	; 0x0a
 45c:	81 87       	std	Z+9, r24	; 0x09
	
	A2D_init();	
 45e:	49 df       	rcall	.-366    	; 0x2f2 <A2D_init>

    while(1) {
    	Set_A2D_Pin(0);
    	joyc = ADC;  // Get L/R joystick data
 460:	c8 e7       	ldi	r28, 0x78	; 120
 462:	d0 e0       	ldi	r29, 0x00	; 0
 	part4.TickFct = &part4_Tick;
	
	A2D_init();	

    while(1) {
    	Set_A2D_Pin(0);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	4b df       	rcall	.-362    	; 0x2fe <Set_A2D_Pin>
    	joyc = ADC;  // Get L/R joystick data
 468:	88 81       	ld	r24, Y
 46a:	99 81       	ldd	r25, Y+1	; 0x01
 46c:	90 93 12 01 	sts	0x0112, r25
 470:	80 93 11 01 	sts	0x0111, r24
    	Set_A2D_Pin(1);
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	43 df       	rcall	.-378    	; 0x2fe <Set_A2D_Pin>
    	joyc4 = ADC; // Get U/D joystick data
 478:	88 81       	ld	r24, Y
 47a:	99 81       	ldd	r25, Y+1	; 0x01
 47c:	90 93 10 01 	sts	0x0110, r25
 480:	80 93 0f 01 	sts	0x010F, r24
		taskManage();
 484:	4d df       	rcall	.-358    	; 0x320 <taskManage>
		
		while(!TimerFlag);
 486:	80 91 17 01 	lds	r24, 0x0117
 48a:	88 23       	and	r24, r24
 48c:	e1 f3       	breq	.-8      	; 0x486 <main+0xb2>
		TimerFlag = 0;
 48e:	10 92 17 01 	sts	0x0117, r1
    }
 492:	e8 cf       	rjmp	.-48     	; 0x464 <main+0x90>

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
