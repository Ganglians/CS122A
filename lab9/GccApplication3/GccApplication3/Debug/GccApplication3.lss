
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000130a  0000139e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000130a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000064c  0080012c  0080012c  000013ca  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002130  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092f  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ad  00000000  00000000  000040f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  000058a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b73  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b3  00000000  00000000  00006953  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00007e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c4       	rjmp	.+2198   	; 0x8cc <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e0       	ldi	r30, 0x0A	; 10
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 32       	cpi	r26, 0x2C	; 44
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	ac e2       	ldi	r26, 0x2C	; 44
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 37       	cpi	r26, 0x78	; 120
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	02 d2       	rcall	.+1028   	; 0x4c8 <main>
      c4:	0c 94 83 09 	jmp	0x1306	; 0x1306 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	50 d5       	rcall	.+2720   	; 0xb72 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d2:	20 91 2c 01 	lds	r18, 0x012C
      d6:	30 91 2d 01 	lds	r19, 0x012D
      da:	ce 01       	movw	r24, r28
      dc:	82 0f       	add	r24, r18
      de:	93 1f       	adc	r25, r19
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ee:	e9 01       	movw	r28, r18
      f0:	c2 5d       	subi	r28, 0xD2	; 210
      f2:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f4:	90 93 2d 01 	sts	0x012D, r25
      f8:	80 93 2c 01 	sts	0x012C, r24
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     108:	fb d5       	rcall	.+3062   	; 0xd00 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10a:	ce 01       	movw	r24, r28
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     112:	08 95       	ret

00000114 <GetKeypadKey>:
}

enum motorState {INIT2, IDLE2, COUNTERCLOCKWISE, CLOCKWISE} motor_state;

void MOTOR_Init() {
	motor_state = INIT2;
     114:	8f ee       	ldi	r24, 0xEF	; 239
     116:	8b b9       	out	0x0b, r24	; 11
     118:	00 00       	nop
     11a:	48 9b       	sbis	0x09, 0	; 9
     11c:	29 c0       	rjmp	.+82     	; 0x170 <GetKeypadKey+0x5c>
     11e:	49 9b       	sbis	0x09, 1	; 9
     120:	29 c0       	rjmp	.+82     	; 0x174 <GetKeypadKey+0x60>
     122:	4a 9b       	sbis	0x09, 2	; 9
     124:	29 c0       	rjmp	.+82     	; 0x178 <GetKeypadKey+0x64>
     126:	4b 9b       	sbis	0x09, 3	; 9
     128:	29 c0       	rjmp	.+82     	; 0x17c <GetKeypadKey+0x68>
     12a:	8f ed       	ldi	r24, 0xDF	; 223
     12c:	8b b9       	out	0x0b, r24	; 11
     12e:	00 00       	nop
     130:	48 9b       	sbis	0x09, 0	; 9
     132:	26 c0       	rjmp	.+76     	; 0x180 <GetKeypadKey+0x6c>
     134:	49 9b       	sbis	0x09, 1	; 9
     136:	26 c0       	rjmp	.+76     	; 0x184 <GetKeypadKey+0x70>
     138:	4a 9b       	sbis	0x09, 2	; 9
     13a:	26 c0       	rjmp	.+76     	; 0x188 <GetKeypadKey+0x74>
     13c:	4b 9b       	sbis	0x09, 3	; 9
     13e:	26 c0       	rjmp	.+76     	; 0x18c <GetKeypadKey+0x78>
     140:	8f eb       	ldi	r24, 0xBF	; 191
     142:	8b b9       	out	0x0b, r24	; 11
     144:	00 00       	nop
     146:	48 9b       	sbis	0x09, 0	; 9
     148:	23 c0       	rjmp	.+70     	; 0x190 <GetKeypadKey+0x7c>
     14a:	49 9b       	sbis	0x09, 1	; 9
     14c:	23 c0       	rjmp	.+70     	; 0x194 <GetKeypadKey+0x80>
     14e:	4a 9b       	sbis	0x09, 2	; 9
     150:	23 c0       	rjmp	.+70     	; 0x198 <GetKeypadKey+0x84>
     152:	4b 9b       	sbis	0x09, 3	; 9
     154:	23 c0       	rjmp	.+70     	; 0x19c <GetKeypadKey+0x88>
     156:	8f e7       	ldi	r24, 0x7F	; 127
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	00 00       	nop
     15c:	48 9b       	sbis	0x09, 0	; 9
     15e:	20 c0       	rjmp	.+64     	; 0x1a0 <GetKeypadKey+0x8c>
     160:	49 9b       	sbis	0x09, 1	; 9
     162:	20 c0       	rjmp	.+64     	; 0x1a4 <GetKeypadKey+0x90>
     164:	4a 9b       	sbis	0x09, 2	; 9
     166:	20 c0       	rjmp	.+64     	; 0x1a8 <GetKeypadKey+0x94>
     168:	4b 9b       	sbis	0x09, 3	; 9
     16a:	20 c0       	rjmp	.+64     	; 0x1ac <GetKeypadKey+0x98>
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	08 95       	ret
     170:	81 e3       	ldi	r24, 0x31	; 49
     172:	08 95       	ret
     174:	84 e3       	ldi	r24, 0x34	; 52
     176:	08 95       	ret
     178:	87 e3       	ldi	r24, 0x37	; 55
     17a:	08 95       	ret
     17c:	8a e2       	ldi	r24, 0x2A	; 42
     17e:	08 95       	ret
     180:	82 e3       	ldi	r24, 0x32	; 50
     182:	08 95       	ret
     184:	85 e3       	ldi	r24, 0x35	; 53
     186:	08 95       	ret
     188:	88 e3       	ldi	r24, 0x38	; 56
     18a:	08 95       	ret
     18c:	80 e3       	ldi	r24, 0x30	; 48
     18e:	08 95       	ret
     190:	83 e3       	ldi	r24, 0x33	; 51
     192:	08 95       	ret
     194:	86 e3       	ldi	r24, 0x36	; 54
     196:	08 95       	ret
     198:	89 e3       	ldi	r24, 0x39	; 57
     19a:	08 95       	ret
     19c:	83 e2       	ldi	r24, 0x23	; 35
     19e:	08 95       	ret
     1a0:	81 e4       	ldi	r24, 0x41	; 65
     1a2:	08 95       	ret
     1a4:	82 e4       	ldi	r24, 0x42	; 66
     1a6:	08 95       	ret
     1a8:	83 e4       	ldi	r24, 0x43	; 67
     1aa:	08 95       	ret
     1ac:	84 e4       	ldi	r24, 0x44	; 68
     1ae:	08 95       	ret

000001b0 <degConv>:
     1b0:	bc 01       	movw	r22, r24
     1b2:	99 0f       	add	r25, r25
     1b4:	88 0b       	sbc	r24, r24
     1b6:	99 0b       	sbc	r25, r25
     1b8:	7c d7       	rcall	.+3832   	; 0x10b2 <__floatsisf>
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	44 eb       	ldi	r20, 0xB4	; 180
     1c0:	50 e4       	ldi	r21, 0x40	; 64
     1c2:	dc d6       	rcall	.+3512   	; 0xf7c <__divsf3>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e8       	ldi	r20, 0x80	; 128
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	fe d7       	rcall	.+4092   	; 0x11ca <__mulsf3>
     1ce:	3e d7       	rcall	.+3708   	; 0x104c <__fixsfsi>
     1d0:	cb 01       	movw	r24, r22
     1d2:	08 95       	ret

000001d4 <KEYPAD_Tick>:
     1d4:	80 91 77 07 	lds	r24, 0x0777
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	71 f0       	breq	.+28     	; 0x1f8 <KEYPAD_Tick+0x24>
     1dc:	28 f0       	brcs	.+10     	; 0x1e8 <KEYPAD_Tick+0x14>
     1de:	82 30       	cpi	r24, 0x02	; 2
     1e0:	a9 f0       	breq	.+42     	; 0x20c <KEYPAD_Tick+0x38>
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	f1 f0       	breq	.+60     	; 0x222 <KEYPAD_Tick+0x4e>
     1e6:	21 c0       	rjmp	.+66     	; 0x22a <KEYPAD_Tick+0x56>
     1e8:	10 92 6c 07 	sts	0x076C, r1
     1ec:	10 92 6b 07 	sts	0x076B, r1
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 77 07 	sts	0x0777, r24
     1f6:	08 95       	ret
     1f8:	8d df       	rcall	.-230    	; 0x114 <GetKeypadKey>
     1fa:	80 93 70 07 	sts	0x0770, r24
     1fe:	88 23       	and	r24, r24
     200:	09 f4       	brne	.+2      	; 0x204 <KEYPAD_Tick+0x30>
     202:	57 c0       	rjmp	.+174    	; 0x2b2 <KEYPAD_Tick+0xde>
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 77 07 	sts	0x0777, r24
     20a:	08 95       	ret
     20c:	83 df       	rcall	.-250    	; 0x114 <GetKeypadKey>
     20e:	80 93 76 07 	sts	0x0776, r24
     212:	90 91 70 07 	lds	r25, 0x0770
     216:	89 17       	cp	r24, r25
     218:	59 f0       	breq	.+22     	; 0x230 <KEYPAD_Tick+0x5c>
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	80 93 77 07 	sts	0x0777, r24
     220:	0c c0       	rjmp	.+24     	; 0x23a <KEYPAD_Tick+0x66>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	80 93 77 07 	sts	0x0777, r24
     228:	08 95       	ret
     22a:	10 92 77 07 	sts	0x0777, r1
     22e:	08 95       	ret
     230:	80 91 77 07 	lds	r24, 0x0777
     234:	83 30       	cpi	r24, 0x03	; 3
     236:	09 f0       	breq	.+2      	; 0x23a <KEYPAD_Tick+0x66>
     238:	61 c0       	rjmp	.+194    	; 0x2fc <KEYPAD_Tick+0x128>
     23a:	80 91 70 07 	lds	r24, 0x0770
     23e:	28 2f       	mov	r18, r24
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	29 50       	subi	r18, 0x09	; 9
     244:	31 40       	sbci	r19, 0x01	; 1
     246:	41 f4       	brne	.+16     	; 0x258 <KEYPAD_Tick+0x84>
     248:	10 92 6c 07 	sts	0x076C, r1
     24c:	10 92 6b 07 	sts	0x076B, r1
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 77 07 	sts	0x0777, r24
     256:	08 95       	ret
     258:	90 ed       	ldi	r25, 0xD0	; 208
     25a:	98 0f       	add	r25, r24
     25c:	9a 30       	cpi	r25, 0x0A	; 10
     25e:	90 f4       	brcc	.+36     	; 0x284 <KEYPAD_Tick+0xb0>
     260:	20 91 6b 07 	lds	r18, 0x076B
     264:	30 91 6c 07 	lds	r19, 0x076C
     268:	24 30       	cpi	r18, 0x04	; 4
     26a:	31 05       	cpc	r19, r1
     26c:	5c f4       	brge	.+22     	; 0x284 <KEYPAD_Tick+0xb0>
     26e:	f9 01       	movw	r30, r18
     270:	ef 58       	subi	r30, 0x8F	; 143
     272:	f8 4f       	sbci	r31, 0xF8	; 248
     274:	80 83       	st	Z, r24
     276:	2f 5f       	subi	r18, 0xFF	; 255
     278:	3f 4f       	sbci	r19, 0xFF	; 255
     27a:	30 93 6c 07 	sts	0x076C, r19
     27e:	20 93 6b 07 	sts	0x076B, r18
     282:	08 95       	ret
     284:	81 34       	cpi	r24, 0x41	; 65
     286:	51 f1       	breq	.+84     	; 0x2dc <KEYPAD_Tick+0x108>
     288:	82 34       	cpi	r24, 0x42	; 66
     28a:	79 f4       	brne	.+30     	; 0x2aa <KEYPAD_Tick+0xd6>
     28c:	80 91 6b 07 	lds	r24, 0x076B
     290:	90 91 6c 07 	lds	r25, 0x076C
     294:	89 2b       	or	r24, r25
     296:	91 f4       	brne	.+36     	; 0x2bc <KEYPAD_Tick+0xe8>
     298:	08 c0       	rjmp	.+16     	; 0x2aa <KEYPAD_Tick+0xd6>
     29a:	10 92 6c 07 	sts	0x076C, r1
     29e:	10 92 6b 07 	sts	0x076B, r1
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 77 07 	sts	0x0777, r24
     2a8:	08 95       	ret
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 77 07 	sts	0x0777, r24
     2b0:	08 95       	ret
     2b2:	80 91 77 07 	lds	r24, 0x0777
     2b6:	83 30       	cpi	r24, 0x03	; 3
     2b8:	c1 f3       	breq	.-16     	; 0x2aa <KEYPAD_Tick+0xd6>
     2ba:	08 95       	ret
     2bc:	81 e7       	ldi	r24, 0x71	; 113
     2be:	97 e0       	ldi	r25, 0x07	; 7
     2c0:	e7 d7       	rcall	.+4046   	; 0x1290 <atoi>
     2c2:	90 93 0d 07 	sts	0x070D, r25
     2c6:	80 93 0c 07 	sts	0x070C, r24
     2ca:	72 df       	rcall	.-284    	; 0x1b0 <degConv>
     2cc:	90 93 0b 07 	sts	0x070B, r25
     2d0:	80 93 0a 07 	sts	0x070A, r24
     2d4:	82 e4       	ldi	r24, 0x42	; 66
     2d6:	80 93 0e 07 	sts	0x070E, r24
     2da:	df cf       	rjmp	.-66     	; 0x29a <KEYPAD_Tick+0xc6>
     2dc:	81 e7       	ldi	r24, 0x71	; 113
     2de:	97 e0       	ldi	r25, 0x07	; 7
     2e0:	d7 d7       	rcall	.+4014   	; 0x1290 <atoi>
     2e2:	90 93 0d 07 	sts	0x070D, r25
     2e6:	80 93 0c 07 	sts	0x070C, r24
     2ea:	62 df       	rcall	.-316    	; 0x1b0 <degConv>
     2ec:	90 93 0b 07 	sts	0x070B, r25
     2f0:	80 93 0a 07 	sts	0x070A, r24
     2f4:	81 e4       	ldi	r24, 0x41	; 65
     2f6:	80 93 0e 07 	sts	0x070E, r24
     2fa:	cf cf       	rjmp	.-98     	; 0x29a <KEYPAD_Tick+0xc6>
     2fc:	08 95       	ret

000002fe <KeypadSecTask>:
     2fe:	10 92 77 07 	sts	0x0777, r1
     302:	68 df       	rcall	.-304    	; 0x1d4 <KEYPAD_Tick>
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	7c d5       	rcall	.+2808   	; 0xe02 <vTaskDelay>
     30a:	fb cf       	rjmp	.-10     	; 0x302 <KeypadSecTask+0x4>

0000030c <MOTOR_Tick>:
}

void MOTOR_Tick() { // Transitions
	key = GetKeypadKey();
     30c:	03 df       	rcall	.-506    	; 0x114 <GetKeypadKey>
     30e:	80 93 70 07 	sts	0x0770, r24
	switch(motor_state) { 
     312:	80 91 6d 07 	lds	r24, 0x076D
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	51 f0       	breq	.+20     	; 0x32e <MOTOR_Tick+0x22>
     31a:	28 f0       	brcs	.+10     	; 0x326 <MOTOR_Tick+0x1a>
     31c:	82 30       	cpi	r24, 0x02	; 2
     31e:	a1 f0       	breq	.+40     	; 0x348 <MOTOR_Tick+0x3c>
     320:	83 30       	cpi	r24, 0x03	; 3
     322:	59 f1       	breq	.+86     	; 0x37a <MOTOR_Tick+0x6e>
     324:	44 c0       	rjmp	.+136    	; 0x3ae <MOTOR_Tick+0xa2>
		case INIT2:
			motor_state = IDLE2;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 6d 07 	sts	0x076D, r24
		break;
     32c:	08 95       	ret

		case IDLE2:
			if(motorStart == 'A') {
     32e:	80 91 0e 07 	lds	r24, 0x070E
     332:	81 34       	cpi	r24, 0x41	; 65
     334:	09 f0       	breq	.+2      	; 0x338 <MOTOR_Tick+0x2c>
     336:	8c c0       	rjmp	.+280    	; 0x450 <MOTOR_Tick+0x144>
				motor_state = COUNTERCLOCKWISE;
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	80 93 6d 07 	sts	0x076D, r24
     33e:	42 c0       	rjmp	.+132    	; 0x3c4 <MOTOR_Tick+0xb8>
			}
			if(motorStart == 'B') {
				motor_state = CLOCKWISE;
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	80 93 6d 07 	sts	0x076D, r24
     346:	87 c0       	rjmp	.+270    	; 0x456 <MOTOR_Tick+0x14a>
			}
		break;

		case COUNTERCLOCKWISE:
			if(j >= numPhases) {
     348:	20 91 69 07 	lds	r18, 0x0769
     34c:	30 91 6a 07 	lds	r19, 0x076A
     350:	80 91 0a 07 	lds	r24, 0x070A
     354:	90 91 0b 07 	lds	r25, 0x070B
     358:	28 17       	cp	r18, r24
     35a:	39 07       	cpc	r19, r25
     35c:	9c f1       	brlt	.+102    	; 0x3c4 <MOTOR_Tick+0xb8>
				i = 0;
     35e:	10 92 6f 07 	sts	0x076F, r1
     362:	10 92 6e 07 	sts	0x076E, r1
				j = 0;
     366:	10 92 6a 07 	sts	0x076A, r1
     36a:	10 92 69 07 	sts	0x0769, r1
				motorStart = 0;
     36e:	10 92 0e 07 	sts	0x070E, r1
				motor_state = IDLE2;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	80 93 6d 07 	sts	0x076D, r24
     378:	08 95       	ret
			}
		break;

		case CLOCKWISE:
			if(j >= numPhases) {
     37a:	20 91 69 07 	lds	r18, 0x0769
     37e:	30 91 6a 07 	lds	r19, 0x076A
     382:	80 91 0a 07 	lds	r24, 0x070A
     386:	90 91 0b 07 	lds	r25, 0x070B
     38a:	28 17       	cp	r18, r24
     38c:	39 07       	cpc	r19, r25
     38e:	0c f4       	brge	.+2      	; 0x392 <MOTOR_Tick+0x86>
     390:	62 c0       	rjmp	.+196    	; 0x456 <MOTOR_Tick+0x14a>
				i = 0;
     392:	10 92 6f 07 	sts	0x076F, r1
     396:	10 92 6e 07 	sts	0x076E, r1
			    j = 0;
     39a:	10 92 6a 07 	sts	0x076A, r1
     39e:	10 92 69 07 	sts	0x0769, r1
			    motorStart = 0;
     3a2:	10 92 0e 07 	sts	0x070E, r1
			    motor_state = IDLE2;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 6d 07 	sts	0x076D, r24
     3ac:	08 95       	ret
			}
		break;

		default:
			motor_state = INIT2;
     3ae:	10 92 6d 07 	sts	0x076D, r1
		break;
	}

	switch(motor_state) { // Actions
		case INIT2:
			i = 0;
     3b2:	10 92 6f 07 	sts	0x076F, r1
     3b6:	10 92 6e 07 	sts	0x076E, r1
			j = 0;
     3ba:	10 92 6a 07 	sts	0x076A, r1
     3be:	10 92 69 07 	sts	0x0769, r1
		break;
     3c2:	08 95       	ret
			// Do nothing
		
		break;

		case COUNTERCLOCKWISE:
			if(i < 0) {
     3c4:	80 91 6e 07 	lds	r24, 0x076E
     3c8:	90 91 6f 07 	lds	r25, 0x076F
     3cc:	99 23       	and	r25, r25
     3ce:	34 f4       	brge	.+12     	; 0x3dc <MOTOR_Tick+0xd0>
				i = 6;
     3d0:	86 e0       	ldi	r24, 0x06	; 6
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	90 93 6f 07 	sts	0x076F, r25
     3d8:	80 93 6e 07 	sts	0x076E, r24
			}
			PORTA = motorPhase[i];
     3dc:	e0 91 6e 07 	lds	r30, 0x076E
     3e0:	f0 91 6f 07 	lds	r31, 0x076F
     3e4:	e0 50       	subi	r30, 0x00	; 0
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	80 81       	ld	r24, Z
     3ea:	82 b9       	out	0x02, r24	; 2
			-- i;
     3ec:	80 91 6e 07 	lds	r24, 0x076E
     3f0:	90 91 6f 07 	lds	r25, 0x076F
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	90 93 6f 07 	sts	0x076F, r25
     3fa:	80 93 6e 07 	sts	0x076E, r24
			++ j;
     3fe:	80 91 69 07 	lds	r24, 0x0769
     402:	90 91 6a 07 	lds	r25, 0x076A
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	90 93 6a 07 	sts	0x076A, r25
     40c:	80 93 69 07 	sts	0x0769, r24
		break;
     410:	08 95       	ret

		case CLOCKWISE:
			if(i > 6) {
				i = 0;
     412:	10 92 6f 07 	sts	0x076F, r1
     416:	10 92 6e 07 	sts	0x076E, r1
			}
			PORTA = motorPhase[i];
     41a:	e0 91 6e 07 	lds	r30, 0x076E
     41e:	f0 91 6f 07 	lds	r31, 0x076F
     422:	e0 50       	subi	r30, 0x00	; 0
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	80 81       	ld	r24, Z
     428:	82 b9       	out	0x02, r24	; 2
			++ i;	
     42a:	80 91 6e 07 	lds	r24, 0x076E
     42e:	90 91 6f 07 	lds	r25, 0x076F
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	90 93 6f 07 	sts	0x076F, r25
     438:	80 93 6e 07 	sts	0x076E, r24
			++ j;
     43c:	80 91 69 07 	lds	r24, 0x0769
     440:	90 91 6a 07 	lds	r25, 0x076A
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	90 93 6a 07 	sts	0x076A, r25
     44a:	80 93 69 07 	sts	0x0769, r24
		break;
     44e:	08 95       	ret

		case IDLE2:
			if(motorStart == 'A') {
				motor_state = COUNTERCLOCKWISE;
			}
			if(motorStart == 'B') {
     450:	82 34       	cpi	r24, 0x42	; 66
     452:	41 f4       	brne	.+16     	; 0x464 <MOTOR_Tick+0x158>
     454:	75 cf       	rjmp	.-278    	; 0x340 <MOTOR_Tick+0x34>
			-- i;
			++ j;
		break;

		case CLOCKWISE:
			if(i > 6) {
     456:	80 91 6e 07 	lds	r24, 0x076E
     45a:	90 91 6f 07 	lds	r25, 0x076F
     45e:	07 97       	sbiw	r24, 0x07	; 7
     460:	c4 f6       	brge	.-80     	; 0x412 <MOTOR_Tick+0x106>
     462:	db cf       	rjmp	.-74     	; 0x41a <MOTOR_Tick+0x10e>
     464:	08 95       	ret

00000466 <MotorSecTask>:
}

enum motorState {INIT2, IDLE2, COUNTERCLOCKWISE, CLOCKWISE} motor_state;

void MOTOR_Init() {
	motor_state = INIT2;
     466:	10 92 6d 07 	sts	0x076D, r1

void MotorSecTask() {
	MOTOR_Init();

   	for(;;) { 	
		MOTOR_Tick();
     46a:	50 df       	rcall	.-352    	; 0x30c <MOTOR_Tick>
		vTaskDelay(1); 
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	c8 d4       	rcall	.+2448   	; 0xe02 <vTaskDelay>
   	} 
     472:	fb cf       	rjmp	.-10     	; 0x46a <MotorSecTask+0x4>

00000474 <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	cf 93       	push	r28
	xTaskCreate(KeypadSecTask, (signed portCHAR *)"KeypadSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     484:	a1 2c       	mov	r10, r1
     486:	b1 2c       	mov	r11, r1
     488:	c1 2c       	mov	r12, r1
     48a:	d1 2c       	mov	r13, r1
     48c:	e1 2c       	mov	r14, r1
     48e:	f1 2c       	mov	r15, r1
     490:	08 2f       	mov	r16, r24
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	45 e5       	ldi	r20, 0x55	; 85
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	6b e0       	ldi	r22, 0x0B	; 11
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	8f e7       	ldi	r24, 0x7F	; 127
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	4b d2       	rcall	.+1174   	; 0x93a <xTaskGenericCreate>
	xTaskCreate(MotorSecTask, (signed portCHAR *)"MotorSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	45 e5       	ldi	r20, 0x55	; 85
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	69 e1       	ldi	r22, 0x19	; 25
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	83 e3       	ldi	r24, 0x33	; 51
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	42 d2       	rcall	.+1156   	; 0x93a <xTaskGenericCreate>
}	
     4b6:	cf 91       	pop	r28
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	af 90       	pop	r10
     4c6:	08 95       	ret

000004c8 <main>:
 
int main(void) { 
	DDRA = 0xFF; PORTA = 0x00; // Set PORTD as output
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	81 b9       	out	0x01, r24	; 1
     4cc:	12 b8       	out	0x02, r1	; 2
   	DDRB = 0x00; PORTB = 0xFF; // Set PORTB as input
     4ce:	14 b8       	out	0x04, r1	; 4
     4d0:	85 b9       	out	0x05, r24	; 5
   	DDRC = 0xFF; PORTC = 0x00; // Set PORTC as output
     4d2:	87 b9       	out	0x07, r24	; 7
     4d4:	18 b8       	out	0x08, r1	; 8
   	DDRD = 0xF0; PORTD = 0x0F; // Set PORTD for keypad
     4d6:	80 ef       	ldi	r24, 0xF0	; 240
     4d8:	8a b9       	out	0x0a, r24	; 10
     4da:	8f e0       	ldi	r24, 0x0F	; 15
     4dc:	8b b9       	out	0x0b, r24	; 11

   	// Start Tasks  
   	StartSecPulse(1);
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	c9 df       	rcall	.-110    	; 0x474 <StartSecPulse>
    // RunSchedular 
   	vTaskStartScheduler(); 
     4e2:	1e d3       	rcall	.+1596   	; 0xb20 <vTaskStartScheduler>
 
   	return 0; 
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	08 95       	ret

000004ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     4ea:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     4ec:	03 96       	adiw	r24, 0x03	; 3
     4ee:	92 83       	std	Z+2, r25	; 0x02
     4f0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     4f2:	2f ef       	ldi	r18, 0xFF	; 255
     4f4:	3f ef       	ldi	r19, 0xFF	; 255
     4f6:	34 83       	std	Z+4, r19	; 0x04
     4f8:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     4fa:	96 83       	std	Z+6, r25	; 0x06
     4fc:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     4fe:	90 87       	std	Z+8, r25	; 0x08
     500:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     502:	10 82       	st	Z, r1
     504:	08 95       	ret

00000506 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     506:	fc 01       	movw	r30, r24
     508:	11 86       	std	Z+9, r1	; 0x09
     50a:	10 86       	std	Z+8, r1	; 0x08
     50c:	08 95       	ret

0000050e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	fc 01       	movw	r30, r24
     514:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     516:	21 81       	ldd	r18, Z+1	; 0x01
     518:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     51a:	e9 01       	movw	r28, r18
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	9b 81       	ldd	r25, Y+3	; 0x03
     520:	13 96       	adiw	r26, 0x03	; 3
     522:	9c 93       	st	X, r25
     524:	8e 93       	st	-X, r24
     526:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     528:	81 81       	ldd	r24, Z+1	; 0x01
     52a:	92 81       	ldd	r25, Z+2	; 0x02
     52c:	15 96       	adiw	r26, 0x05	; 5
     52e:	9c 93       	st	X, r25
     530:	8e 93       	st	-X, r24
     532:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     534:	8a 81       	ldd	r24, Y+2	; 0x02
     536:	9b 81       	ldd	r25, Y+3	; 0x03
     538:	ec 01       	movw	r28, r24
     53a:	7d 83       	std	Y+5, r23	; 0x05
     53c:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     53e:	e9 01       	movw	r28, r18
     540:	7b 83       	std	Y+3, r23	; 0x03
     542:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     544:	72 83       	std	Z+2, r23	; 0x02
     546:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     548:	19 96       	adiw	r26, 0x09	; 9
     54a:	fc 93       	st	X, r31
     54c:	ee 93       	st	-X, r30
     54e:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     550:	80 81       	ld	r24, Z
     552:	8f 5f       	subi	r24, 0xFF	; 255
     554:	80 83       	st	Z, r24
}
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     562:	48 81       	ld	r20, Y
     564:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     566:	4f 3f       	cpi	r20, 0xFF	; 255
     568:	2f ef       	ldi	r18, 0xFF	; 255
     56a:	52 07       	cpc	r21, r18
     56c:	31 f4       	brne	.+12     	; 0x57a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     56e:	dc 01       	movw	r26, r24
     570:	17 96       	adiw	r26, 0x07	; 7
     572:	ed 91       	ld	r30, X+
     574:	fc 91       	ld	r31, X
     576:	18 97       	sbiw	r26, 0x08	; 8
     578:	17 c0       	rjmp	.+46     	; 0x5a8 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     57a:	fc 01       	movw	r30, r24
     57c:	33 96       	adiw	r30, 0x03	; 3
     57e:	dc 01       	movw	r26, r24
     580:	15 96       	adiw	r26, 0x05	; 5
     582:	2d 91       	ld	r18, X+
     584:	3c 91       	ld	r19, X
     586:	16 97       	sbiw	r26, 0x06	; 6
     588:	d9 01       	movw	r26, r18
     58a:	2d 91       	ld	r18, X+
     58c:	3c 91       	ld	r19, X
     58e:	42 17       	cp	r20, r18
     590:	53 07       	cpc	r21, r19
     592:	50 f0       	brcs	.+20     	; 0x5a8 <vListInsert+0x4c>
     594:	02 80       	ldd	r0, Z+2	; 0x02
     596:	f3 81       	ldd	r31, Z+3	; 0x03
     598:	e0 2d       	mov	r30, r0
     59a:	a2 81       	ldd	r26, Z+2	; 0x02
     59c:	b3 81       	ldd	r27, Z+3	; 0x03
     59e:	2d 91       	ld	r18, X+
     5a0:	3c 91       	ld	r19, X
     5a2:	42 17       	cp	r20, r18
     5a4:	53 07       	cpc	r21, r19
     5a6:	b0 f7       	brcc	.-20     	; 0x594 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     5a8:	a2 81       	ldd	r26, Z+2	; 0x02
     5aa:	b3 81       	ldd	r27, Z+3	; 0x03
     5ac:	bb 83       	std	Y+3, r27	; 0x03
     5ae:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     5b0:	15 96       	adiw	r26, 0x05	; 5
     5b2:	dc 93       	st	X, r29
     5b4:	ce 93       	st	-X, r28
     5b6:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     5b8:	fd 83       	std	Y+5, r31	; 0x05
     5ba:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     5bc:	d3 83       	std	Z+3, r29	; 0x03
     5be:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     5c0:	99 87       	std	Y+9, r25	; 0x09
     5c2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     5c4:	fc 01       	movw	r30, r24
     5c6:	20 81       	ld	r18, Z
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	20 83       	st	Z, r18
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     5d2:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5d4:	a2 81       	ldd	r26, Z+2	; 0x02
     5d6:	b3 81       	ldd	r27, Z+3	; 0x03
     5d8:	84 81       	ldd	r24, Z+4	; 0x04
     5da:	95 81       	ldd	r25, Z+5	; 0x05
     5dc:	15 96       	adiw	r26, 0x05	; 5
     5de:	9c 93       	st	X, r25
     5e0:	8e 93       	st	-X, r24
     5e2:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5e4:	a4 81       	ldd	r26, Z+4	; 0x04
     5e6:	b5 81       	ldd	r27, Z+5	; 0x05
     5e8:	82 81       	ldd	r24, Z+2	; 0x02
     5ea:	93 81       	ldd	r25, Z+3	; 0x03
     5ec:	13 96       	adiw	r26, 0x03	; 3
     5ee:	9c 93       	st	X, r25
     5f0:	8e 93       	st	-X, r24
     5f2:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     5f4:	a0 85       	ldd	r26, Z+8	; 0x08
     5f6:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     5f8:	11 96       	adiw	r26, 0x01	; 1
     5fa:	8d 91       	ld	r24, X+
     5fc:	9c 91       	ld	r25, X
     5fe:	12 97       	sbiw	r26, 0x02	; 2
     600:	8e 17       	cp	r24, r30
     602:	9f 07       	cpc	r25, r31
     604:	31 f4       	brne	.+12     	; 0x612 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     606:	84 81       	ldd	r24, Z+4	; 0x04
     608:	95 81       	ldd	r25, Z+5	; 0x05
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	9c 93       	st	X, r25
     60e:	8e 93       	st	-X, r24
     610:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     612:	11 86       	std	Z+9, r1	; 0x09
     614:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     616:	8c 91       	ld	r24, X
     618:	81 50       	subi	r24, 0x01	; 1
     61a:	8c 93       	st	X, r24
     61c:	08 95       	ret

0000061e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     61e:	31 e1       	ldi	r19, 0x11	; 17
     620:	fc 01       	movw	r30, r24
     622:	30 83       	st	Z, r19
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	22 e2       	ldi	r18, 0x22	; 34
     628:	20 83       	st	Z, r18
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	a3 e3       	ldi	r26, 0x33	; 51
     62e:	a0 83       	st	Z, r26
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	60 83       	st	Z, r22
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	70 83       	st	Z, r23
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	10 82       	st	Z, r1
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	60 e8       	ldi	r22, 0x80	; 128
     640:	60 83       	st	Z, r22
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	10 82       	st	Z, r1
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	62 e0       	ldi	r22, 0x02	; 2
     64a:	60 83       	st	Z, r22
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	63 e0       	ldi	r22, 0x03	; 3
     650:	60 83       	st	Z, r22
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	64 e0       	ldi	r22, 0x04	; 4
     656:	60 83       	st	Z, r22
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	65 e0       	ldi	r22, 0x05	; 5
     65c:	60 83       	st	Z, r22
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	66 e0       	ldi	r22, 0x06	; 6
     662:	60 83       	st	Z, r22
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	67 e0       	ldi	r22, 0x07	; 7
     668:	60 83       	st	Z, r22
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	68 e0       	ldi	r22, 0x08	; 8
     66e:	60 83       	st	Z, r22
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	69 e0       	ldi	r22, 0x09	; 9
     674:	60 83       	st	Z, r22
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	60 e1       	ldi	r22, 0x10	; 16
     67a:	60 83       	st	Z, r22
     67c:	31 97       	sbiw	r30, 0x01	; 1
     67e:	30 83       	st	Z, r19
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	32 e1       	ldi	r19, 0x12	; 18
     684:	30 83       	st	Z, r19
     686:	31 97       	sbiw	r30, 0x01	; 1
     688:	33 e1       	ldi	r19, 0x13	; 19
     68a:	30 83       	st	Z, r19
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	34 e1       	ldi	r19, 0x14	; 20
     690:	30 83       	st	Z, r19
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	35 e1       	ldi	r19, 0x15	; 21
     696:	30 83       	st	Z, r19
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	36 e1       	ldi	r19, 0x16	; 22
     69c:	30 83       	st	Z, r19
     69e:	31 97       	sbiw	r30, 0x01	; 1
     6a0:	37 e1       	ldi	r19, 0x17	; 23
     6a2:	30 83       	st	Z, r19
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	38 e1       	ldi	r19, 0x18	; 24
     6a8:	30 83       	st	Z, r19
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	39 e1       	ldi	r19, 0x19	; 25
     6ae:	30 83       	st	Z, r19
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	30 e2       	ldi	r19, 0x20	; 32
     6b4:	30 83       	st	Z, r19
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	31 e2       	ldi	r19, 0x21	; 33
     6ba:	30 83       	st	Z, r19
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	20 83       	st	Z, r18
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	23 e2       	ldi	r18, 0x23	; 35
     6c4:	20 83       	st	Z, r18
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	40 83       	st	Z, r20
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	50 83       	st	Z, r21
     6ce:	31 97       	sbiw	r30, 0x01	; 1
     6d0:	26 e2       	ldi	r18, 0x26	; 38
     6d2:	20 83       	st	Z, r18
     6d4:	31 97       	sbiw	r30, 0x01	; 1
     6d6:	27 e2       	ldi	r18, 0x27	; 39
     6d8:	20 83       	st	Z, r18
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	28 e2       	ldi	r18, 0x28	; 40
     6de:	20 83       	st	Z, r18
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	29 e2       	ldi	r18, 0x29	; 41
     6e4:	20 83       	st	Z, r18
     6e6:	31 97       	sbiw	r30, 0x01	; 1
     6e8:	20 e3       	ldi	r18, 0x30	; 48
     6ea:	20 83       	st	Z, r18
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	21 e3       	ldi	r18, 0x31	; 49
     6f0:	20 83       	st	Z, r18
     6f2:	86 97       	sbiw	r24, 0x26	; 38
     6f4:	08 95       	ret

000006f6 <xPortStartScheduler>:
     6f6:	10 92 89 00 	sts	0x0089, r1
     6fa:	8c e7       	ldi	r24, 0x7C	; 124
     6fc:	80 93 88 00 	sts	0x0088, r24
     700:	8b e0       	ldi	r24, 0x0B	; 11
     702:	80 93 81 00 	sts	0x0081, r24
     706:	ef e6       	ldi	r30, 0x6F	; 111
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	82 60       	ori	r24, 0x02	; 2
     70e:	80 83       	st	Z, r24
     710:	a0 91 67 07 	lds	r26, 0x0767
     714:	b0 91 68 07 	lds	r27, 0x0768
     718:	cd 91       	ld	r28, X+
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	dd 91       	ld	r29, X+
     71e:	de bf       	out	0x3e, r29	; 62
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	bf 91       	pop	r27
     72a:	af 91       	pop	r26
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	7f 91       	pop	r23
     732:	6f 91       	pop	r22
     734:	5f 91       	pop	r21
     736:	4f 91       	pop	r20
     738:	3f 91       	pop	r19
     73a:	2f 91       	pop	r18
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	7f 90       	pop	r7
     752:	6f 90       	pop	r6
     754:	5f 90       	pop	r5
     756:	4f 90       	pop	r4
     758:	3f 90       	pop	r3
     75a:	2f 90       	pop	r2
     75c:	1f 90       	pop	r1
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	08 95       	ret
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	08 95       	ret

0000076a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	0f 92       	push	r0
     772:	1f 92       	push	r1
     774:	11 24       	eor	r1, r1
     776:	2f 92       	push	r2
     778:	3f 92       	push	r3
     77a:	4f 92       	push	r4
     77c:	5f 92       	push	r5
     77e:	6f 92       	push	r6
     780:	7f 92       	push	r7
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
     7b2:	a0 91 67 07 	lds	r26, 0x0767
     7b6:	b0 91 68 07 	lds	r27, 0x0768
     7ba:	0d b6       	in	r0, 0x3d	; 61
     7bc:	0d 92       	st	X+, r0
     7be:	0e b6       	in	r0, 0x3e	; 62
     7c0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     7c2:	70 d3       	rcall	.+1760   	; 0xea4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     7c4:	a0 91 67 07 	lds	r26, 0x0767
     7c8:	b0 91 68 07 	lds	r27, 0x0768
     7cc:	cd 91       	ld	r28, X+
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	dd 91       	ld	r29, X+
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	9f 90       	pop	r9
     802:	8f 90       	pop	r8
     804:	7f 90       	pop	r7
     806:	6f 90       	pop	r6
     808:	5f 90       	pop	r5
     80a:	4f 90       	pop	r4
     80c:	3f 90       	pop	r3
     80e:	2f 90       	pop	r2
     810:	1f 90       	pop	r1
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0

	asm volatile ( "ret" );
     818:	08 95       	ret

0000081a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	0f 92       	push	r0
     822:	1f 92       	push	r1
     824:	11 24       	eor	r1, r1
     826:	2f 92       	push	r2
     828:	3f 92       	push	r3
     82a:	4f 92       	push	r4
     82c:	5f 92       	push	r5
     82e:	6f 92       	push	r6
     830:	7f 92       	push	r7
     832:	8f 92       	push	r8
     834:	9f 92       	push	r9
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	2f 93       	push	r18
     848:	3f 93       	push	r19
     84a:	4f 93       	push	r20
     84c:	5f 93       	push	r21
     84e:	6f 93       	push	r22
     850:	7f 93       	push	r23
     852:	8f 93       	push	r24
     854:	9f 93       	push	r25
     856:	af 93       	push	r26
     858:	bf 93       	push	r27
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
     862:	a0 91 67 07 	lds	r26, 0x0767
     866:	b0 91 68 07 	lds	r27, 0x0768
     86a:	0d b6       	in	r0, 0x3d	; 61
     86c:	0d 92       	st	X+, r0
     86e:	0e b6       	in	r0, 0x3e	; 62
     870:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     872:	85 d1       	rcall	.+778    	; 0xb7e <vTaskIncrementTick>
	vTaskSwitchContext();
     874:	17 d3       	rcall	.+1582   	; 0xea4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     876:	a0 91 67 07 	lds	r26, 0x0767
     87a:	b0 91 68 07 	lds	r27, 0x0768
     87e:	cd 91       	ld	r28, X+
     880:	cd bf       	out	0x3d, r28	; 61
     882:	dd 91       	ld	r29, X+
     884:	de bf       	out	0x3e, r29	; 62
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	af 90       	pop	r10
     8b2:	9f 90       	pop	r9
     8b4:	8f 90       	pop	r8
     8b6:	7f 90       	pop	r7
     8b8:	6f 90       	pop	r6
     8ba:	5f 90       	pop	r5
     8bc:	4f 90       	pop	r4
     8be:	3f 90       	pop	r3
     8c0:	2f 90       	pop	r2
     8c2:	1f 90       	pop	r1
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     8ca:	08 95       	ret

000008cc <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     8cc:	a6 df       	rcall	.-180    	; 0x81a <vPortYieldFromTick>
		asm volatile ( "reti" );
     8ce:	18 95       	reti

000008d0 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	e0 91 67 07 	lds	r30, 0x0767
     8da:	f0 91 68 07 	lds	r31, 0x0768
     8de:	93 83       	std	Z+3, r25	; 0x03
     8e0:	82 83       	std	Z+2, r24	; 0x02
     8e2:	80 91 17 07 	lds	r24, 0x0717
     8e6:	90 91 18 07 	lds	r25, 0x0718
     8ea:	c8 17       	cp	r28, r24
     8ec:	d9 07       	cpc	r29, r25
     8ee:	60 f4       	brcc	.+24     	; 0x908 <prvAddCurrentTaskToDelayedList+0x38>
     8f0:	60 91 67 07 	lds	r22, 0x0767
     8f4:	70 91 68 07 	lds	r23, 0x0768
     8f8:	80 91 2d 07 	lds	r24, 0x072D
     8fc:	90 91 2e 07 	lds	r25, 0x072E
     900:	6e 5f       	subi	r22, 0xFE	; 254
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	2b de       	rcall	.-938    	; 0x55c <vListInsert>
     906:	16 c0       	rjmp	.+44     	; 0x934 <prvAddCurrentTaskToDelayedList+0x64>
     908:	60 91 67 07 	lds	r22, 0x0767
     90c:	70 91 68 07 	lds	r23, 0x0768
     910:	80 91 2f 07 	lds	r24, 0x072F
     914:	90 91 30 07 	lds	r25, 0x0730
     918:	6e 5f       	subi	r22, 0xFE	; 254
     91a:	7f 4f       	sbci	r23, 0xFF	; 255
     91c:	1f de       	rcall	.-962    	; 0x55c <vListInsert>
     91e:	80 91 07 01 	lds	r24, 0x0107
     922:	90 91 08 01 	lds	r25, 0x0108
     926:	c8 17       	cp	r28, r24
     928:	d9 07       	cpc	r29, r25
     92a:	20 f4       	brcc	.+8      	; 0x934 <prvAddCurrentTaskToDelayedList+0x64>
     92c:	d0 93 08 01 	sts	0x0108, r29
     930:	c0 93 07 01 	sts	0x0107, r28
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <xTaskGenericCreate>:
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	5c 01       	movw	r10, r24
     95c:	4b 01       	movw	r8, r22
     95e:	3a 01       	movw	r6, r20
     960:	29 01       	movw	r4, r18
     962:	81 e2       	ldi	r24, 0x21	; 33
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	b1 db       	rcall	.-2206   	; 0xca <pvPortMalloc>
     968:	ec 01       	movw	r28, r24
     96a:	89 2b       	or	r24, r25
     96c:	09 f4       	brne	.+2      	; 0x970 <xTaskGenericCreate+0x36>
     96e:	c6 c0       	rjmp	.+396    	; 0xafc <xTaskGenericCreate+0x1c2>
     970:	c1 14       	cp	r12, r1
     972:	d1 04       	cpc	r13, r1
     974:	09 f0       	breq	.+2      	; 0x978 <xTaskGenericCreate+0x3e>
     976:	be c0       	rjmp	.+380    	; 0xaf4 <xTaskGenericCreate+0x1ba>
     978:	c3 01       	movw	r24, r6
     97a:	a7 db       	rcall	.-2226   	; 0xca <pvPortMalloc>
     97c:	98 8f       	std	Y+24, r25	; 0x18
     97e:	8f 8b       	std	Y+23, r24	; 0x17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	19 f4       	brne	.+6      	; 0x98a <xTaskGenericCreate+0x50>
     984:	ce 01       	movw	r24, r28
     986:	c5 db       	rcall	.-2166   	; 0x112 <vPortFree>
     988:	b9 c0       	rjmp	.+370    	; 0xafc <xTaskGenericCreate+0x1c2>
     98a:	a3 01       	movw	r20, r6
     98c:	65 ea       	ldi	r22, 0xA5	; 165
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	9c d4       	rcall	.+2360   	; 0x12ca <memset>
     992:	93 01       	movw	r18, r6
     994:	21 50       	subi	r18, 0x01	; 1
     996:	31 09       	sbc	r19, r1
     998:	8f 89       	ldd	r24, Y+23	; 0x17
     99a:	98 8d       	ldd	r25, Y+24	; 0x18
     99c:	3c 01       	movw	r6, r24
     99e:	62 0e       	add	r6, r18
     9a0:	73 1e       	adc	r7, r19
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	b4 01       	movw	r22, r8
     9a8:	ce 01       	movw	r24, r28
     9aa:	49 96       	adiw	r24, 0x19	; 25
     9ac:	95 d4       	rcall	.+2346   	; 0x12d8 <strncpy>
     9ae:	18 a2       	std	Y+32, r1	; 0x20
     9b0:	10 2f       	mov	r17, r16
     9b2:	04 30       	cpi	r16, 0x04	; 4
     9b4:	08 f0       	brcs	.+2      	; 0x9b8 <xTaskGenericCreate+0x7e>
     9b6:	13 e0       	ldi	r17, 0x03	; 3
     9b8:	1e 8b       	std	Y+22, r17	; 0x16
     9ba:	6e 01       	movw	r12, r28
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	c8 0e       	add	r12, r24
     9c0:	d1 1c       	adc	r13, r1
     9c2:	c6 01       	movw	r24, r12
     9c4:	a0 dd       	rcall	.-1216   	; 0x506 <vListInitialiseItem>
     9c6:	ce 01       	movw	r24, r28
     9c8:	0c 96       	adiw	r24, 0x0c	; 12
     9ca:	9d dd       	rcall	.-1222   	; 0x506 <vListInitialiseItem>
     9cc:	d9 87       	std	Y+9, r29	; 0x09
     9ce:	c8 87       	std	Y+8, r28	; 0x08
     9d0:	84 e0       	ldi	r24, 0x04	; 4
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	81 1b       	sub	r24, r17
     9d6:	91 09       	sbc	r25, r1
     9d8:	9d 87       	std	Y+13, r25	; 0x0d
     9da:	8c 87       	std	Y+12, r24	; 0x0c
     9dc:	db 8b       	std	Y+19, r29	; 0x13
     9de:	ca 8b       	std	Y+18, r28	; 0x12
     9e0:	a2 01       	movw	r20, r4
     9e2:	b5 01       	movw	r22, r10
     9e4:	c3 01       	movw	r24, r6
     9e6:	1b de       	rcall	.-970    	; 0x61e <pxPortInitialiseStack>
     9e8:	99 83       	std	Y+1, r25	; 0x01
     9ea:	88 83       	st	Y, r24
     9ec:	e1 14       	cp	r14, r1
     9ee:	f1 04       	cpc	r15, r1
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <xTaskGenericCreate+0xbe>
     9f2:	f7 01       	movw	r30, r14
     9f4:	d1 83       	std	Z+1, r29	; 0x01
     9f6:	c0 83       	st	Z, r28
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	0f 92       	push	r0
     9fe:	80 91 19 07 	lds	r24, 0x0719
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	80 93 19 07 	sts	0x0719, r24
     a08:	80 91 67 07 	lds	r24, 0x0767
     a0c:	90 91 68 07 	lds	r25, 0x0768
     a10:	89 2b       	or	r24, r25
     a12:	69 f5       	brne	.+90     	; 0xa6e <xTaskGenericCreate+0x134>
     a14:	d0 93 68 07 	sts	0x0768, r29
     a18:	c0 93 67 07 	sts	0x0767, r28
     a1c:	80 91 19 07 	lds	r24, 0x0719
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	a1 f5       	brne	.+104    	; 0xa8c <xTaskGenericCreate+0x152>
     a24:	83 e4       	ldi	r24, 0x43	; 67
     a26:	97 e0       	ldi	r25, 0x07	; 7
     a28:	60 dd       	rcall	.-1344   	; 0x4ea <vListInitialise>
     a2a:	8c e4       	ldi	r24, 0x4C	; 76
     a2c:	97 e0       	ldi	r25, 0x07	; 7
     a2e:	5d dd       	rcall	.-1350   	; 0x4ea <vListInitialise>
     a30:	85 e5       	ldi	r24, 0x55	; 85
     a32:	97 e0       	ldi	r25, 0x07	; 7
     a34:	5a dd       	rcall	.-1356   	; 0x4ea <vListInitialise>
     a36:	8e e5       	ldi	r24, 0x5E	; 94
     a38:	97 e0       	ldi	r25, 0x07	; 7
     a3a:	57 dd       	rcall	.-1362   	; 0x4ea <vListInitialise>
     a3c:	8a e3       	ldi	r24, 0x3A	; 58
     a3e:	97 e0       	ldi	r25, 0x07	; 7
     a40:	54 dd       	rcall	.-1368   	; 0x4ea <vListInitialise>
     a42:	81 e3       	ldi	r24, 0x31	; 49
     a44:	97 e0       	ldi	r25, 0x07	; 7
     a46:	51 dd       	rcall	.-1374   	; 0x4ea <vListInitialise>
     a48:	84 e2       	ldi	r24, 0x24	; 36
     a4a:	97 e0       	ldi	r25, 0x07	; 7
     a4c:	4e dd       	rcall	.-1380   	; 0x4ea <vListInitialise>
     a4e:	8b e1       	ldi	r24, 0x1B	; 27
     a50:	97 e0       	ldi	r25, 0x07	; 7
     a52:	4b dd       	rcall	.-1386   	; 0x4ea <vListInitialise>
     a54:	8a e3       	ldi	r24, 0x3A	; 58
     a56:	97 e0       	ldi	r25, 0x07	; 7
     a58:	90 93 30 07 	sts	0x0730, r25
     a5c:	80 93 2f 07 	sts	0x072F, r24
     a60:	81 e3       	ldi	r24, 0x31	; 49
     a62:	97 e0       	ldi	r25, 0x07	; 7
     a64:	90 93 2e 07 	sts	0x072E, r25
     a68:	80 93 2d 07 	sts	0x072D, r24
     a6c:	0f c0       	rjmp	.+30     	; 0xa8c <xTaskGenericCreate+0x152>
     a6e:	80 91 14 07 	lds	r24, 0x0714
     a72:	81 11       	cpse	r24, r1
     a74:	0b c0       	rjmp	.+22     	; 0xa8c <xTaskGenericCreate+0x152>
     a76:	e0 91 67 07 	lds	r30, 0x0767
     a7a:	f0 91 68 07 	lds	r31, 0x0768
     a7e:	86 89       	ldd	r24, Z+22	; 0x16
     a80:	08 17       	cp	r16, r24
     a82:	20 f0       	brcs	.+8      	; 0xa8c <xTaskGenericCreate+0x152>
     a84:	d0 93 68 07 	sts	0x0768, r29
     a88:	c0 93 67 07 	sts	0x0767, r28
     a8c:	8e 89       	ldd	r24, Y+22	; 0x16
     a8e:	90 91 16 07 	lds	r25, 0x0716
     a92:	98 17       	cp	r25, r24
     a94:	10 f4       	brcc	.+4      	; 0xa9a <xTaskGenericCreate+0x160>
     a96:	80 93 16 07 	sts	0x0716, r24
     a9a:	90 91 0f 07 	lds	r25, 0x070F
     a9e:	9f 5f       	subi	r25, 0xFF	; 255
     aa0:	90 93 0f 07 	sts	0x070F, r25
     aa4:	90 91 15 07 	lds	r25, 0x0715
     aa8:	98 17       	cp	r25, r24
     aaa:	10 f4       	brcc	.+4      	; 0xab0 <xTaskGenericCreate+0x176>
     aac:	80 93 15 07 	sts	0x0715, r24
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	9c 01       	movw	r18, r24
     ab4:	22 0f       	add	r18, r18
     ab6:	33 1f       	adc	r19, r19
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	22 0f       	add	r18, r18
     abe:	33 1f       	adc	r19, r19
     ac0:	82 0f       	add	r24, r18
     ac2:	93 1f       	adc	r25, r19
     ac4:	b6 01       	movw	r22, r12
     ac6:	8d 5b       	subi	r24, 0xBD	; 189
     ac8:	98 4f       	sbci	r25, 0xF8	; 248
     aca:	21 dd       	rcall	.-1470   	; 0x50e <vListInsertEnd>
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	80 91 14 07 	lds	r24, 0x0714
     ad4:	88 23       	and	r24, r24
     ad6:	51 f0       	breq	.+20     	; 0xaec <xTaskGenericCreate+0x1b2>
     ad8:	e0 91 67 07 	lds	r30, 0x0767
     adc:	f0 91 68 07 	lds	r31, 0x0768
     ae0:	86 89       	ldd	r24, Z+22	; 0x16
     ae2:	80 17       	cp	r24, r16
     ae4:	28 f4       	brcc	.+10     	; 0xaf0 <xTaskGenericCreate+0x1b6>
     ae6:	41 de       	rcall	.-894    	; 0x76a <vPortYield>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	09 c0       	rjmp	.+18     	; 0xafe <xTaskGenericCreate+0x1c4>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	07 c0       	rjmp	.+14     	; 0xafe <xTaskGenericCreate+0x1c4>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	05 c0       	rjmp	.+10     	; 0xafe <xTaskGenericCreate+0x1c4>
     af4:	d8 8e       	std	Y+24, r13	; 0x18
     af6:	cf 8a       	std	Y+23, r12	; 0x17
     af8:	c6 01       	movw	r24, r12
     afa:	47 cf       	rjmp	.-370    	; 0x98a <xTaskGenericCreate+0x50>
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	8f 90       	pop	r8
     b16:	7f 90       	pop	r7
     b18:	6f 90       	pop	r6
     b1a:	5f 90       	pop	r5
     b1c:	4f 90       	pop	r4
     b1e:	08 95       	ret

00000b20 <vTaskStartScheduler>:
     b20:	af 92       	push	r10
     b22:	bf 92       	push	r11
     b24:	cf 92       	push	r12
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	a1 2c       	mov	r10, r1
     b30:	b1 2c       	mov	r11, r1
     b32:	c1 2c       	mov	r12, r1
     b34:	d1 2c       	mov	r13, r1
     b36:	e1 2c       	mov	r14, r1
     b38:	f1 2c       	mov	r15, r1
     b3a:	00 e0       	ldi	r16, 0x00	; 0
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	45 e5       	ldi	r20, 0x55	; 85
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	66 e2       	ldi	r22, 0x26	; 38
     b46:	71 e0       	ldi	r23, 0x01	; 1
     b48:	8c e1       	ldi	r24, 0x1C	; 28
     b4a:	97 e0       	ldi	r25, 0x07	; 7
     b4c:	f6 de       	rcall	.-532    	; 0x93a <xTaskGenericCreate>
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	41 f4       	brne	.+16     	; 0xb62 <vTaskStartScheduler+0x42>
     b52:	f8 94       	cli
     b54:	80 93 14 07 	sts	0x0714, r24
     b58:	10 92 18 07 	sts	0x0718, r1
     b5c:	10 92 17 07 	sts	0x0717, r1
     b60:	ca dd       	rcall	.-1132   	; 0x6f6 <xPortStartScheduler>
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	08 95       	ret

00000b72 <vTaskSuspendAll>:
     b72:	80 91 13 07 	lds	r24, 0x0713
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	80 93 13 07 	sts	0x0713, r24
     b7c:	08 95       	ret

00000b7e <vTaskIncrementTick>:
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	80 91 13 07 	lds	r24, 0x0713
     b8a:	81 11       	cpse	r24, r1
     b8c:	af c0       	rjmp	.+350    	; 0xcec <vTaskIncrementTick+0x16e>
     b8e:	80 91 17 07 	lds	r24, 0x0717
     b92:	90 91 18 07 	lds	r25, 0x0718
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	90 93 18 07 	sts	0x0718, r25
     b9c:	80 93 17 07 	sts	0x0717, r24
     ba0:	80 91 17 07 	lds	r24, 0x0717
     ba4:	90 91 18 07 	lds	r25, 0x0718
     ba8:	89 2b       	or	r24, r25
     baa:	99 f5       	brne	.+102    	; 0xc12 <vTaskIncrementTick+0x94>
     bac:	80 91 2f 07 	lds	r24, 0x072F
     bb0:	90 91 30 07 	lds	r25, 0x0730
     bb4:	20 91 2d 07 	lds	r18, 0x072D
     bb8:	30 91 2e 07 	lds	r19, 0x072E
     bbc:	30 93 30 07 	sts	0x0730, r19
     bc0:	20 93 2f 07 	sts	0x072F, r18
     bc4:	90 93 2e 07 	sts	0x072E, r25
     bc8:	80 93 2d 07 	sts	0x072D, r24
     bcc:	80 91 10 07 	lds	r24, 0x0710
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
     bd2:	80 93 10 07 	sts	0x0710, r24
     bd6:	e0 91 2f 07 	lds	r30, 0x072F
     bda:	f0 91 30 07 	lds	r31, 0x0730
     bde:	80 81       	ld	r24, Z
     be0:	81 11       	cpse	r24, r1
     be2:	07 c0       	rjmp	.+14     	; 0xbf2 <vTaskIncrementTick+0x74>
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	9f ef       	ldi	r25, 0xFF	; 255
     be8:	90 93 08 01 	sts	0x0108, r25
     bec:	80 93 07 01 	sts	0x0107, r24
     bf0:	10 c0       	rjmp	.+32     	; 0xc12 <vTaskIncrementTick+0x94>
     bf2:	e0 91 2f 07 	lds	r30, 0x072F
     bf6:	f0 91 30 07 	lds	r31, 0x0730
     bfa:	05 80       	ldd	r0, Z+5	; 0x05
     bfc:	f6 81       	ldd	r31, Z+6	; 0x06
     bfe:	e0 2d       	mov	r30, r0
     c00:	06 80       	ldd	r0, Z+6	; 0x06
     c02:	f7 81       	ldd	r31, Z+7	; 0x07
     c04:	e0 2d       	mov	r30, r0
     c06:	82 81       	ldd	r24, Z+2	; 0x02
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	90 93 08 01 	sts	0x0108, r25
     c0e:	80 93 07 01 	sts	0x0107, r24
     c12:	20 91 17 07 	lds	r18, 0x0717
     c16:	30 91 18 07 	lds	r19, 0x0718
     c1a:	80 91 07 01 	lds	r24, 0x0107
     c1e:	90 91 08 01 	lds	r25, 0x0108
     c22:	28 17       	cp	r18, r24
     c24:	39 07       	cpc	r19, r25
     c26:	08 f4       	brcc	.+2      	; 0xc2a <vTaskIncrementTick+0xac>
     c28:	66 c0       	rjmp	.+204    	; 0xcf6 <vTaskIncrementTick+0x178>
     c2a:	e0 91 2f 07 	lds	r30, 0x072F
     c2e:	f0 91 30 07 	lds	r31, 0x0730
     c32:	80 81       	ld	r24, Z
     c34:	88 23       	and	r24, r24
     c36:	99 f0       	breq	.+38     	; 0xc5e <vTaskIncrementTick+0xe0>
     c38:	e0 91 2f 07 	lds	r30, 0x072F
     c3c:	f0 91 30 07 	lds	r31, 0x0730
     c40:	05 80       	ldd	r0, Z+5	; 0x05
     c42:	f6 81       	ldd	r31, Z+6	; 0x06
     c44:	e0 2d       	mov	r30, r0
     c46:	c6 81       	ldd	r28, Z+6	; 0x06
     c48:	d7 81       	ldd	r29, Z+7	; 0x07
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	20 91 17 07 	lds	r18, 0x0717
     c52:	30 91 18 07 	lds	r19, 0x0718
     c56:	28 17       	cp	r18, r24
     c58:	39 07       	cpc	r19, r25
     c5a:	f8 f4       	brcc	.+62     	; 0xc9a <vTaskIncrementTick+0x11c>
     c5c:	19 c0       	rjmp	.+50     	; 0xc90 <vTaskIncrementTick+0x112>
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	9f ef       	ldi	r25, 0xFF	; 255
     c62:	90 93 08 01 	sts	0x0108, r25
     c66:	80 93 07 01 	sts	0x0107, r24
     c6a:	45 c0       	rjmp	.+138    	; 0xcf6 <vTaskIncrementTick+0x178>
     c6c:	e0 91 2f 07 	lds	r30, 0x072F
     c70:	f0 91 30 07 	lds	r31, 0x0730
     c74:	05 80       	ldd	r0, Z+5	; 0x05
     c76:	f6 81       	ldd	r31, Z+6	; 0x06
     c78:	e0 2d       	mov	r30, r0
     c7a:	c6 81       	ldd	r28, Z+6	; 0x06
     c7c:	d7 81       	ldd	r29, Z+7	; 0x07
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	20 91 17 07 	lds	r18, 0x0717
     c86:	30 91 18 07 	lds	r19, 0x0718
     c8a:	28 17       	cp	r18, r24
     c8c:	39 07       	cpc	r19, r25
     c8e:	28 f4       	brcc	.+10     	; 0xc9a <vTaskIncrementTick+0x11c>
     c90:	90 93 08 01 	sts	0x0108, r25
     c94:	80 93 07 01 	sts	0x0107, r24
     c98:	2e c0       	rjmp	.+92     	; 0xcf6 <vTaskIncrementTick+0x178>
     c9a:	8e 01       	movw	r16, r28
     c9c:	0e 5f       	subi	r16, 0xFE	; 254
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	c8 01       	movw	r24, r16
     ca2:	97 dc       	rcall	.-1746   	; 0x5d2 <vListRemove>
     ca4:	8c 89       	ldd	r24, Y+20	; 0x14
     ca6:	9d 89       	ldd	r25, Y+21	; 0x15
     ca8:	89 2b       	or	r24, r25
     caa:	19 f0       	breq	.+6      	; 0xcb2 <vTaskIncrementTick+0x134>
     cac:	ce 01       	movw	r24, r28
     cae:	0c 96       	adiw	r24, 0x0c	; 12
     cb0:	90 dc       	rcall	.-1760   	; 0x5d2 <vListRemove>
     cb2:	2e 89       	ldd	r18, Y+22	; 0x16
     cb4:	80 91 15 07 	lds	r24, 0x0715
     cb8:	82 17       	cp	r24, r18
     cba:	10 f4       	brcc	.+4      	; 0xcc0 <vTaskIncrementTick+0x142>
     cbc:	20 93 15 07 	sts	0x0715, r18
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	c9 01       	movw	r24, r18
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	82 0f       	add	r24, r18
     cd2:	93 1f       	adc	r25, r19
     cd4:	b8 01       	movw	r22, r16
     cd6:	8d 5b       	subi	r24, 0xBD	; 189
     cd8:	98 4f       	sbci	r25, 0xF8	; 248
     cda:	19 dc       	rcall	.-1998   	; 0x50e <vListInsertEnd>
     cdc:	e0 91 2f 07 	lds	r30, 0x072F
     ce0:	f0 91 30 07 	lds	r31, 0x0730
     ce4:	80 81       	ld	r24, Z
     ce6:	81 11       	cpse	r24, r1
     ce8:	c1 cf       	rjmp	.-126    	; 0xc6c <vTaskIncrementTick+0xee>
     cea:	b9 cf       	rjmp	.-142    	; 0xc5e <vTaskIncrementTick+0xe0>
     cec:	80 91 12 07 	lds	r24, 0x0712
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
     cf2:	80 93 12 07 	sts	0x0712, r24
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <xTaskResumeAll>:
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	0f 92       	push	r0
     d16:	80 91 13 07 	lds	r24, 0x0713
     d1a:	81 50       	subi	r24, 0x01	; 1
     d1c:	80 93 13 07 	sts	0x0713, r24
     d20:	80 91 13 07 	lds	r24, 0x0713
     d24:	81 11       	cpse	r24, r1
     d26:	5f c0       	rjmp	.+190    	; 0xde6 <xTaskResumeAll+0xe6>
     d28:	80 91 19 07 	lds	r24, 0x0719
     d2c:	81 11       	cpse	r24, r1
     d2e:	2f c0       	rjmp	.+94     	; 0xd8e <xTaskResumeAll+0x8e>
     d30:	5d c0       	rjmp	.+186    	; 0xdec <xTaskResumeAll+0xec>
     d32:	d7 01       	movw	r26, r14
     d34:	15 96       	adiw	r26, 0x05	; 5
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	16 97       	sbiw	r26, 0x06	; 6
     d3c:	c6 81       	ldd	r28, Z+6	; 0x06
     d3e:	d7 81       	ldd	r29, Z+7	; 0x07
     d40:	ce 01       	movw	r24, r28
     d42:	0c 96       	adiw	r24, 0x0c	; 12
     d44:	46 dc       	rcall	.-1908   	; 0x5d2 <vListRemove>
     d46:	8e 01       	movw	r16, r28
     d48:	0e 5f       	subi	r16, 0xFE	; 254
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	c8 01       	movw	r24, r16
     d4e:	41 dc       	rcall	.-1918   	; 0x5d2 <vListRemove>
     d50:	2e 89       	ldd	r18, Y+22	; 0x16
     d52:	80 91 15 07 	lds	r24, 0x0715
     d56:	82 17       	cp	r24, r18
     d58:	10 f4       	brcc	.+4      	; 0xd5e <xTaskResumeAll+0x5e>
     d5a:	20 93 15 07 	sts	0x0715, r18
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	c9 01       	movw	r24, r18
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	82 0f       	add	r24, r18
     d70:	93 1f       	adc	r25, r19
     d72:	b8 01       	movw	r22, r16
     d74:	8d 5b       	subi	r24, 0xBD	; 189
     d76:	98 4f       	sbci	r25, 0xF8	; 248
     d78:	ca db       	rcall	.-2156   	; 0x50e <vListInsertEnd>
     d7a:	e0 91 67 07 	lds	r30, 0x0767
     d7e:	f0 91 68 07 	lds	r31, 0x0768
     d82:	9e 89       	ldd	r25, Y+22	; 0x16
     d84:	86 89       	ldd	r24, Z+22	; 0x16
     d86:	98 17       	cp	r25, r24
     d88:	58 f0       	brcs	.+22     	; 0xda0 <xTaskResumeAll+0xa0>
     d8a:	dc 2c       	mov	r13, r12
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <xTaskResumeAll+0xa0>
     d8e:	d1 2c       	mov	r13, r1
     d90:	0f 2e       	mov	r0, r31
     d92:	f4 e2       	ldi	r31, 0x24	; 36
     d94:	ef 2e       	mov	r14, r31
     d96:	f7 e0       	ldi	r31, 0x07	; 7
     d98:	ff 2e       	mov	r15, r31
     d9a:	f0 2d       	mov	r31, r0
     d9c:	cc 24       	eor	r12, r12
     d9e:	c3 94       	inc	r12
     da0:	f7 01       	movw	r30, r14
     da2:	80 81       	ld	r24, Z
     da4:	81 11       	cpse	r24, r1
     da6:	c5 cf       	rjmp	.-118    	; 0xd32 <xTaskResumeAll+0x32>
     da8:	80 91 12 07 	lds	r24, 0x0712
     dac:	88 23       	and	r24, r24
     dae:	79 f0       	breq	.+30     	; 0xdce <xTaskResumeAll+0xce>
     db0:	80 91 12 07 	lds	r24, 0x0712
     db4:	88 23       	and	r24, r24
     db6:	91 f0       	breq	.+36     	; 0xddc <xTaskResumeAll+0xdc>
     db8:	e2 de       	rcall	.-572    	; 0xb7e <vTaskIncrementTick>
     dba:	80 91 12 07 	lds	r24, 0x0712
     dbe:	81 50       	subi	r24, 0x01	; 1
     dc0:	80 93 12 07 	sts	0x0712, r24
     dc4:	80 91 12 07 	lds	r24, 0x0712
     dc8:	81 11       	cpse	r24, r1
     dca:	f6 cf       	rjmp	.-20     	; 0xdb8 <xTaskResumeAll+0xb8>
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <xTaskResumeAll+0xdc>
     dce:	f1 e0       	ldi	r31, 0x01	; 1
     dd0:	df 16       	cp	r13, r31
     dd2:	21 f0       	breq	.+8      	; 0xddc <xTaskResumeAll+0xdc>
     dd4:	80 91 11 07 	lds	r24, 0x0711
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	39 f4       	brne	.+14     	; 0xdea <xTaskResumeAll+0xea>
     ddc:	10 92 11 07 	sts	0x0711, r1
     de0:	c4 dc       	rcall	.-1656   	; 0x76a <vPortYield>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	03 c0       	rjmp	.+6      	; 0xdec <xTaskResumeAll+0xec>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	01 c0       	rjmp	.+2      	; 0xdec <xTaskResumeAll+0xec>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	08 95       	ret

00000e02 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     e08:	89 2b       	or	r24, r25
     e0a:	91 f0       	breq	.+36     	; 0xe30 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
     e0c:	b2 de       	rcall	.-668    	; 0xb72 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     e0e:	80 91 17 07 	lds	r24, 0x0717
     e12:	90 91 18 07 	lds	r25, 0x0718
     e16:	c8 0f       	add	r28, r24
     e18:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     e1a:	80 91 67 07 	lds	r24, 0x0767
     e1e:	90 91 68 07 	lds	r25, 0x0768
     e22:	02 96       	adiw	r24, 0x02	; 2
     e24:	d6 db       	rcall	.-2132   	; 0x5d2 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     e26:	ce 01       	movw	r24, r28
     e28:	53 dd       	rcall	.-1370   	; 0x8d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
     e2a:	6a df       	rcall	.-300    	; 0xd00 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     e2c:	81 11       	cpse	r24, r1
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
     e30:	9c dc       	rcall	.-1736   	; 0x76a <vPortYield>
		}
	}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     e38:	0f 2e       	mov	r0, r31
     e3a:	fb e1       	ldi	r31, 0x1B	; 27
     e3c:	ef 2e       	mov	r14, r31
     e3e:	f7 e0       	ldi	r31, 0x07	; 7
     e40:	ff 2e       	mov	r15, r31
     e42:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     e44:	c3 e4       	ldi	r28, 0x43	; 67
     e46:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
     e48:	80 91 1a 07 	lds	r24, 0x071A
     e4c:	88 23       	and	r24, r24
     e4e:	29 f1       	breq	.+74     	; 0xe9a <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
     e50:	90 de       	rcall	.-736    	; 0xb72 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
     e52:	d7 01       	movw	r26, r14
     e54:	1c 91       	ld	r17, X
			xTaskResumeAll();
     e56:	54 df       	rcall	.-344    	; 0xd00 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
     e58:	11 23       	and	r17, r17
     e5a:	f9 f0       	breq	.+62     	; 0xe9a <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
     e62:	d7 01       	movw	r26, r14
     e64:	15 96       	adiw	r26, 0x05	; 5
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	16 97       	sbiw	r26, 0x06	; 6
     e6c:	06 81       	ldd	r16, Z+6	; 0x06
     e6e:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
     e70:	c8 01       	movw	r24, r16
     e72:	02 96       	adiw	r24, 0x02	; 2
     e74:	ae db       	rcall	.-2212   	; 0x5d2 <vListRemove>
					--uxCurrentNumberOfTasks;
     e76:	80 91 19 07 	lds	r24, 0x0719
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	80 93 19 07 	sts	0x0719, r24
					--uxTasksDeleted;
     e80:	80 91 1a 07 	lds	r24, 0x071A
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	80 93 1a 07 	sts	0x071A, r24
				}
				taskEXIT_CRITICAL();
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
     e8e:	f8 01       	movw	r30, r16
     e90:	87 89       	ldd	r24, Z+23	; 0x17
     e92:	90 8d       	ldd	r25, Z+24	; 0x18
     e94:	3e d9       	rcall	.-3460   	; 0x112 <vPortFree>
		vPortFree( pxTCB );
     e96:	c8 01       	movw	r24, r16
     e98:	3c d9       	rcall	.-3464   	; 0x112 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
     e9a:	88 81       	ld	r24, Y
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	a0 f2       	brcs	.-88     	; 0xe48 <prvIdleTask+0x10>
			{
				taskYIELD();
     ea0:	64 dc       	rcall	.-1848   	; 0x76a <vPortYield>
     ea2:	d2 cf       	rjmp	.-92     	; 0xe48 <prvIdleTask+0x10>

00000ea4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     ea4:	80 91 13 07 	lds	r24, 0x0713
     ea8:	81 11       	cpse	r24, r1
     eaa:	13 c0       	rjmp	.+38     	; 0xed2 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     eac:	80 91 15 07 	lds	r24, 0x0715
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	8e 0f       	add	r24, r30
     ec2:	9f 1f       	adc	r25, r31
     ec4:	fc 01       	movw	r30, r24
     ec6:	ed 5b       	subi	r30, 0xBD	; 189
     ec8:	f8 4f       	sbci	r31, 0xF8	; 248
     eca:	80 81       	ld	r24, Z
     ecc:	88 23       	and	r24, r24
     ece:	29 f0       	breq	.+10     	; 0xeda <vTaskSwitchContext+0x36>
     ed0:	1b c0       	rjmp	.+54     	; 0xf08 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 11 07 	sts	0x0711, r24
     ed8:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
     eda:	80 91 15 07 	lds	r24, 0x0715
     ede:	81 50       	subi	r24, 0x01	; 1
     ee0:	80 93 15 07 	sts	0x0715, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
     ee4:	80 91 15 07 	lds	r24, 0x0715
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	8e 0f       	add	r24, r30
     efa:	9f 1f       	adc	r25, r31
     efc:	fc 01       	movw	r30, r24
     efe:	ed 5b       	subi	r30, 0xBD	; 189
     f00:	f8 4f       	sbci	r31, 0xF8	; 248
     f02:	80 81       	ld	r24, Z
     f04:	88 23       	and	r24, r24
     f06:	49 f3       	breq	.-46     	; 0xeda <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
     f08:	80 91 15 07 	lds	r24, 0x0715
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9c 01       	movw	r18, r24
     f10:	22 0f       	add	r18, r18
     f12:	33 1f       	adc	r19, r19
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	28 0f       	add	r18, r24
     f1e:	39 1f       	adc	r19, r25
     f20:	d9 01       	movw	r26, r18
     f22:	ad 5b       	subi	r26, 0xBD	; 189
     f24:	b8 4f       	sbci	r27, 0xF8	; 248
     f26:	11 96       	adiw	r26, 0x01	; 1
     f28:	ed 91       	ld	r30, X+
     f2a:	fc 91       	ld	r31, X
     f2c:	12 97       	sbiw	r26, 0x02	; 2
     f2e:	02 80       	ldd	r0, Z+2	; 0x02
     f30:	f3 81       	ldd	r31, Z+3	; 0x03
     f32:	e0 2d       	mov	r30, r0
     f34:	12 96       	adiw	r26, 0x02	; 2
     f36:	fc 93       	st	X, r31
     f38:	ee 93       	st	-X, r30
     f3a:	11 97       	sbiw	r26, 0x01	; 1
     f3c:	2a 5b       	subi	r18, 0xBA	; 186
     f3e:	38 4f       	sbci	r19, 0xF8	; 248
     f40:	e2 17       	cp	r30, r18
     f42:	f3 07       	cpc	r31, r19
     f44:	29 f4       	brne	.+10     	; 0xf50 <vTaskSwitchContext+0xac>
     f46:	22 81       	ldd	r18, Z+2	; 0x02
     f48:	33 81       	ldd	r19, Z+3	; 0x03
     f4a:	fd 01       	movw	r30, r26
     f4c:	32 83       	std	Z+2, r19	; 0x02
     f4e:	21 83       	std	Z+1, r18	; 0x01
     f50:	fc 01       	movw	r30, r24
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	8e 0f       	add	r24, r30
     f60:	9f 1f       	adc	r25, r31
     f62:	fc 01       	movw	r30, r24
     f64:	ed 5b       	subi	r30, 0xBD	; 189
     f66:	f8 4f       	sbci	r31, 0xF8	; 248
     f68:	01 80       	ldd	r0, Z+1	; 0x01
     f6a:	f2 81       	ldd	r31, Z+2	; 0x02
     f6c:	e0 2d       	mov	r30, r0
     f6e:	86 81       	ldd	r24, Z+6	; 0x06
     f70:	97 81       	ldd	r25, Z+7	; 0x07
     f72:	90 93 68 07 	sts	0x0768, r25
     f76:	80 93 67 07 	sts	0x0767, r24
     f7a:	08 95       	ret

00000f7c <__divsf3>:
     f7c:	0c d0       	rcall	.+24     	; 0xf96 <__divsf3x>
     f7e:	eb c0       	rjmp	.+470    	; 0x1156 <__fp_round>
     f80:	e3 d0       	rcall	.+454    	; 0x1148 <__fp_pscB>
     f82:	40 f0       	brcs	.+16     	; 0xf94 <__divsf3+0x18>
     f84:	da d0       	rcall	.+436    	; 0x113a <__fp_pscA>
     f86:	30 f0       	brcs	.+12     	; 0xf94 <__divsf3+0x18>
     f88:	21 f4       	brne	.+8      	; 0xf92 <__divsf3+0x16>
     f8a:	5f 3f       	cpi	r21, 0xFF	; 255
     f8c:	19 f0       	breq	.+6      	; 0xf94 <__divsf3+0x18>
     f8e:	cc c0       	rjmp	.+408    	; 0x1128 <__fp_inf>
     f90:	51 11       	cpse	r21, r1
     f92:	15 c1       	rjmp	.+554    	; 0x11be <__fp_szero>
     f94:	cf c0       	rjmp	.+414    	; 0x1134 <__fp_nan>

00000f96 <__divsf3x>:
     f96:	f0 d0       	rcall	.+480    	; 0x1178 <__fp_split3>
     f98:	98 f3       	brcs	.-26     	; 0xf80 <__divsf3+0x4>

00000f9a <__divsf3_pse>:
     f9a:	99 23       	and	r25, r25
     f9c:	c9 f3       	breq	.-14     	; 0xf90 <__divsf3+0x14>
     f9e:	55 23       	and	r21, r21
     fa0:	b1 f3       	breq	.-20     	; 0xf8e <__divsf3+0x12>
     fa2:	95 1b       	sub	r25, r21
     fa4:	55 0b       	sbc	r21, r21
     fa6:	bb 27       	eor	r27, r27
     fa8:	aa 27       	eor	r26, r26
     faa:	62 17       	cp	r22, r18
     fac:	73 07       	cpc	r23, r19
     fae:	84 07       	cpc	r24, r20
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <__divsf3_pse+0x26>
     fb2:	9f 5f       	subi	r25, 0xFF	; 255
     fb4:	5f 4f       	sbci	r21, 0xFF	; 255
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	44 1f       	adc	r20, r20
     fbc:	aa 1f       	adc	r26, r26
     fbe:	a9 f3       	breq	.-22     	; 0xfaa <__divsf3_pse+0x10>
     fc0:	33 d0       	rcall	.+102    	; 0x1028 <__divsf3_pse+0x8e>
     fc2:	0e 2e       	mov	r0, r30
     fc4:	3a f0       	brmi	.+14     	; 0xfd4 <__divsf3_pse+0x3a>
     fc6:	e0 e8       	ldi	r30, 0x80	; 128
     fc8:	30 d0       	rcall	.+96     	; 0x102a <__divsf3_pse+0x90>
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	50 40       	sbci	r21, 0x00	; 0
     fce:	e6 95       	lsr	r30
     fd0:	00 1c       	adc	r0, r0
     fd2:	ca f7       	brpl	.-14     	; 0xfc6 <__divsf3_pse+0x2c>
     fd4:	29 d0       	rcall	.+82     	; 0x1028 <__divsf3_pse+0x8e>
     fd6:	fe 2f       	mov	r31, r30
     fd8:	27 d0       	rcall	.+78     	; 0x1028 <__divsf3_pse+0x8e>
     fda:	66 0f       	add	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	88 1f       	adc	r24, r24
     fe0:	bb 1f       	adc	r27, r27
     fe2:	26 17       	cp	r18, r22
     fe4:	37 07       	cpc	r19, r23
     fe6:	48 07       	cpc	r20, r24
     fe8:	ab 07       	cpc	r26, r27
     fea:	b0 e8       	ldi	r27, 0x80	; 128
     fec:	09 f0       	breq	.+2      	; 0xff0 <__divsf3_pse+0x56>
     fee:	bb 0b       	sbc	r27, r27
     ff0:	80 2d       	mov	r24, r0
     ff2:	bf 01       	movw	r22, r30
     ff4:	ff 27       	eor	r31, r31
     ff6:	93 58       	subi	r25, 0x83	; 131
     ff8:	5f 4f       	sbci	r21, 0xFF	; 255
     ffa:	2a f0       	brmi	.+10     	; 0x1006 <__divsf3_pse+0x6c>
     ffc:	9e 3f       	cpi	r25, 0xFE	; 254
     ffe:	51 05       	cpc	r21, r1
    1000:	68 f0       	brcs	.+26     	; 0x101c <__divsf3_pse+0x82>
    1002:	92 c0       	rjmp	.+292    	; 0x1128 <__fp_inf>
    1004:	dc c0       	rjmp	.+440    	; 0x11be <__fp_szero>
    1006:	5f 3f       	cpi	r21, 0xFF	; 255
    1008:	ec f3       	brlt	.-6      	; 0x1004 <__divsf3_pse+0x6a>
    100a:	98 3e       	cpi	r25, 0xE8	; 232
    100c:	dc f3       	brlt	.-10     	; 0x1004 <__divsf3_pse+0x6a>
    100e:	86 95       	lsr	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	f7 95       	ror	r31
    1018:	9f 5f       	subi	r25, 0xFF	; 255
    101a:	c9 f7       	brne	.-14     	; 0x100e <__divsf3_pse+0x74>
    101c:	88 0f       	add	r24, r24
    101e:	91 1d       	adc	r25, r1
    1020:	96 95       	lsr	r25
    1022:	87 95       	ror	r24
    1024:	97 f9       	bld	r25, 7
    1026:	08 95       	ret
    1028:	e1 e0       	ldi	r30, 0x01	; 1
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	bb 1f       	adc	r27, r27
    1032:	62 17       	cp	r22, r18
    1034:	73 07       	cpc	r23, r19
    1036:	84 07       	cpc	r24, r20
    1038:	ba 07       	cpc	r27, r26
    103a:	20 f0       	brcs	.+8      	; 0x1044 <__divsf3_pse+0xaa>
    103c:	62 1b       	sub	r22, r18
    103e:	73 0b       	sbc	r23, r19
    1040:	84 0b       	sbc	r24, r20
    1042:	ba 0b       	sbc	r27, r26
    1044:	ee 1f       	adc	r30, r30
    1046:	88 f7       	brcc	.-30     	; 0x102a <__divsf3_pse+0x90>
    1048:	e0 95       	com	r30
    104a:	08 95       	ret

0000104c <__fixsfsi>:
    104c:	04 d0       	rcall	.+8      	; 0x1056 <__fixunssfsi>
    104e:	68 94       	set
    1050:	b1 11       	cpse	r27, r1
    1052:	b5 c0       	rjmp	.+362    	; 0x11be <__fp_szero>
    1054:	08 95       	ret

00001056 <__fixunssfsi>:
    1056:	98 d0       	rcall	.+304    	; 0x1188 <__fp_splitA>
    1058:	88 f0       	brcs	.+34     	; 0x107c <__fixunssfsi+0x26>
    105a:	9f 57       	subi	r25, 0x7F	; 127
    105c:	90 f0       	brcs	.+36     	; 0x1082 <__fixunssfsi+0x2c>
    105e:	b9 2f       	mov	r27, r25
    1060:	99 27       	eor	r25, r25
    1062:	b7 51       	subi	r27, 0x17	; 23
    1064:	a0 f0       	brcs	.+40     	; 0x108e <__fixunssfsi+0x38>
    1066:	d1 f0       	breq	.+52     	; 0x109c <__fixunssfsi+0x46>
    1068:	66 0f       	add	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	88 1f       	adc	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	1a f0       	brmi	.+6      	; 0x1078 <__fixunssfsi+0x22>
    1072:	ba 95       	dec	r27
    1074:	c9 f7       	brne	.-14     	; 0x1068 <__fixunssfsi+0x12>
    1076:	12 c0       	rjmp	.+36     	; 0x109c <__fixunssfsi+0x46>
    1078:	b1 30       	cpi	r27, 0x01	; 1
    107a:	81 f0       	breq	.+32     	; 0x109c <__fixunssfsi+0x46>
    107c:	9f d0       	rcall	.+318    	; 0x11bc <__fp_zero>
    107e:	b1 e0       	ldi	r27, 0x01	; 1
    1080:	08 95       	ret
    1082:	9c c0       	rjmp	.+312    	; 0x11bc <__fp_zero>
    1084:	67 2f       	mov	r22, r23
    1086:	78 2f       	mov	r23, r24
    1088:	88 27       	eor	r24, r24
    108a:	b8 5f       	subi	r27, 0xF8	; 248
    108c:	39 f0       	breq	.+14     	; 0x109c <__fixunssfsi+0x46>
    108e:	b9 3f       	cpi	r27, 0xF9	; 249
    1090:	cc f3       	brlt	.-14     	; 0x1084 <__fixunssfsi+0x2e>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b3 95       	inc	r27
    109a:	d9 f7       	brne	.-10     	; 0x1092 <__fixunssfsi+0x3c>
    109c:	3e f4       	brtc	.+14     	; 0x10ac <__fixunssfsi+0x56>
    109e:	90 95       	com	r25
    10a0:	80 95       	com	r24
    10a2:	70 95       	com	r23
    10a4:	61 95       	neg	r22
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__floatunsisf>:
    10ae:	e8 94       	clt
    10b0:	09 c0       	rjmp	.+18     	; 0x10c4 <__floatsisf+0x12>

000010b2 <__floatsisf>:
    10b2:	97 fb       	bst	r25, 7
    10b4:	3e f4       	brtc	.+14     	; 0x10c4 <__floatsisf+0x12>
    10b6:	90 95       	com	r25
    10b8:	80 95       	com	r24
    10ba:	70 95       	com	r23
    10bc:	61 95       	neg	r22
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	8f 4f       	sbci	r24, 0xFF	; 255
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	99 23       	and	r25, r25
    10c6:	a9 f0       	breq	.+42     	; 0x10f2 <__floatsisf+0x40>
    10c8:	f9 2f       	mov	r31, r25
    10ca:	96 e9       	ldi	r25, 0x96	; 150
    10cc:	bb 27       	eor	r27, r27
    10ce:	93 95       	inc	r25
    10d0:	f6 95       	lsr	r31
    10d2:	87 95       	ror	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	b7 95       	ror	r27
    10da:	f1 11       	cpse	r31, r1
    10dc:	f8 cf       	rjmp	.-16     	; 0x10ce <__floatsisf+0x1c>
    10de:	fa f4       	brpl	.+62     	; 0x111e <__floatsisf+0x6c>
    10e0:	bb 0f       	add	r27, r27
    10e2:	11 f4       	brne	.+4      	; 0x10e8 <__floatsisf+0x36>
    10e4:	60 ff       	sbrs	r22, 0
    10e6:	1b c0       	rjmp	.+54     	; 0x111e <__floatsisf+0x6c>
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	8f 4f       	sbci	r24, 0xFF	; 255
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	16 c0       	rjmp	.+44     	; 0x111e <__floatsisf+0x6c>
    10f2:	88 23       	and	r24, r24
    10f4:	11 f0       	breq	.+4      	; 0x10fa <__floatsisf+0x48>
    10f6:	96 e9       	ldi	r25, 0x96	; 150
    10f8:	11 c0       	rjmp	.+34     	; 0x111c <__floatsisf+0x6a>
    10fa:	77 23       	and	r23, r23
    10fc:	21 f0       	breq	.+8      	; 0x1106 <__floatsisf+0x54>
    10fe:	9e e8       	ldi	r25, 0x8E	; 142
    1100:	87 2f       	mov	r24, r23
    1102:	76 2f       	mov	r23, r22
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <__floatsisf+0x5e>
    1106:	66 23       	and	r22, r22
    1108:	71 f0       	breq	.+28     	; 0x1126 <__floatsisf+0x74>
    110a:	96 e8       	ldi	r25, 0x86	; 134
    110c:	86 2f       	mov	r24, r22
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	2a f0       	brmi	.+10     	; 0x111e <__floatsisf+0x6c>
    1114:	9a 95       	dec	r25
    1116:	66 0f       	add	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	da f7       	brpl	.-10     	; 0x1114 <__floatsisf+0x62>
    111e:	88 0f       	add	r24, r24
    1120:	96 95       	lsr	r25
    1122:	87 95       	ror	r24
    1124:	97 f9       	bld	r25, 7
    1126:	08 95       	ret

00001128 <__fp_inf>:
    1128:	97 f9       	bld	r25, 7
    112a:	9f 67       	ori	r25, 0x7F	; 127
    112c:	80 e8       	ldi	r24, 0x80	; 128
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	08 95       	ret

00001134 <__fp_nan>:
    1134:	9f ef       	ldi	r25, 0xFF	; 255
    1136:	80 ec       	ldi	r24, 0xC0	; 192
    1138:	08 95       	ret

0000113a <__fp_pscA>:
    113a:	00 24       	eor	r0, r0
    113c:	0a 94       	dec	r0
    113e:	16 16       	cp	r1, r22
    1140:	17 06       	cpc	r1, r23
    1142:	18 06       	cpc	r1, r24
    1144:	09 06       	cpc	r0, r25
    1146:	08 95       	ret

00001148 <__fp_pscB>:
    1148:	00 24       	eor	r0, r0
    114a:	0a 94       	dec	r0
    114c:	12 16       	cp	r1, r18
    114e:	13 06       	cpc	r1, r19
    1150:	14 06       	cpc	r1, r20
    1152:	05 06       	cpc	r0, r21
    1154:	08 95       	ret

00001156 <__fp_round>:
    1156:	09 2e       	mov	r0, r25
    1158:	03 94       	inc	r0
    115a:	00 0c       	add	r0, r0
    115c:	11 f4       	brne	.+4      	; 0x1162 <__fp_round+0xc>
    115e:	88 23       	and	r24, r24
    1160:	52 f0       	brmi	.+20     	; 0x1176 <__fp_round+0x20>
    1162:	bb 0f       	add	r27, r27
    1164:	40 f4       	brcc	.+16     	; 0x1176 <__fp_round+0x20>
    1166:	bf 2b       	or	r27, r31
    1168:	11 f4       	brne	.+4      	; 0x116e <__fp_round+0x18>
    116a:	60 ff       	sbrs	r22, 0
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <__fp_round+0x20>
    116e:	6f 5f       	subi	r22, 0xFF	; 255
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	08 95       	ret

00001178 <__fp_split3>:
    1178:	57 fd       	sbrc	r21, 7
    117a:	90 58       	subi	r25, 0x80	; 128
    117c:	44 0f       	add	r20, r20
    117e:	55 1f       	adc	r21, r21
    1180:	59 f0       	breq	.+22     	; 0x1198 <__fp_splitA+0x10>
    1182:	5f 3f       	cpi	r21, 0xFF	; 255
    1184:	71 f0       	breq	.+28     	; 0x11a2 <__fp_splitA+0x1a>
    1186:	47 95       	ror	r20

00001188 <__fp_splitA>:
    1188:	88 0f       	add	r24, r24
    118a:	97 fb       	bst	r25, 7
    118c:	99 1f       	adc	r25, r25
    118e:	61 f0       	breq	.+24     	; 0x11a8 <__fp_splitA+0x20>
    1190:	9f 3f       	cpi	r25, 0xFF	; 255
    1192:	79 f0       	breq	.+30     	; 0x11b2 <__fp_splitA+0x2a>
    1194:	87 95       	ror	r24
    1196:	08 95       	ret
    1198:	12 16       	cp	r1, r18
    119a:	13 06       	cpc	r1, r19
    119c:	14 06       	cpc	r1, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	f2 cf       	rjmp	.-28     	; 0x1186 <__fp_split3+0xe>
    11a2:	46 95       	lsr	r20
    11a4:	f1 df       	rcall	.-30     	; 0x1188 <__fp_splitA>
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <__fp_splitA+0x30>
    11a8:	16 16       	cp	r1, r22
    11aa:	17 06       	cpc	r1, r23
    11ac:	18 06       	cpc	r1, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	f1 cf       	rjmp	.-30     	; 0x1194 <__fp_splitA+0xc>
    11b2:	86 95       	lsr	r24
    11b4:	71 05       	cpc	r23, r1
    11b6:	61 05       	cpc	r22, r1
    11b8:	08 94       	sec
    11ba:	08 95       	ret

000011bc <__fp_zero>:
    11bc:	e8 94       	clt

000011be <__fp_szero>:
    11be:	bb 27       	eor	r27, r27
    11c0:	66 27       	eor	r22, r22
    11c2:	77 27       	eor	r23, r23
    11c4:	cb 01       	movw	r24, r22
    11c6:	97 f9       	bld	r25, 7
    11c8:	08 95       	ret

000011ca <__mulsf3>:
    11ca:	0b d0       	rcall	.+22     	; 0x11e2 <__mulsf3x>
    11cc:	c4 cf       	rjmp	.-120    	; 0x1156 <__fp_round>
    11ce:	b5 df       	rcall	.-150    	; 0x113a <__fp_pscA>
    11d0:	28 f0       	brcs	.+10     	; 0x11dc <__mulsf3+0x12>
    11d2:	ba df       	rcall	.-140    	; 0x1148 <__fp_pscB>
    11d4:	18 f0       	brcs	.+6      	; 0x11dc <__mulsf3+0x12>
    11d6:	95 23       	and	r25, r21
    11d8:	09 f0       	breq	.+2      	; 0x11dc <__mulsf3+0x12>
    11da:	a6 cf       	rjmp	.-180    	; 0x1128 <__fp_inf>
    11dc:	ab cf       	rjmp	.-170    	; 0x1134 <__fp_nan>
    11de:	11 24       	eor	r1, r1
    11e0:	ee cf       	rjmp	.-36     	; 0x11be <__fp_szero>

000011e2 <__mulsf3x>:
    11e2:	ca df       	rcall	.-108    	; 0x1178 <__fp_split3>
    11e4:	a0 f3       	brcs	.-24     	; 0x11ce <__mulsf3+0x4>

000011e6 <__mulsf3_pse>:
    11e6:	95 9f       	mul	r25, r21
    11e8:	d1 f3       	breq	.-12     	; 0x11de <__mulsf3+0x14>
    11ea:	95 0f       	add	r25, r21
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	55 1f       	adc	r21, r21
    11f0:	62 9f       	mul	r22, r18
    11f2:	f0 01       	movw	r30, r0
    11f4:	72 9f       	mul	r23, r18
    11f6:	bb 27       	eor	r27, r27
    11f8:	f0 0d       	add	r31, r0
    11fa:	b1 1d       	adc	r27, r1
    11fc:	63 9f       	mul	r22, r19
    11fe:	aa 27       	eor	r26, r26
    1200:	f0 0d       	add	r31, r0
    1202:	b1 1d       	adc	r27, r1
    1204:	aa 1f       	adc	r26, r26
    1206:	64 9f       	mul	r22, r20
    1208:	66 27       	eor	r22, r22
    120a:	b0 0d       	add	r27, r0
    120c:	a1 1d       	adc	r26, r1
    120e:	66 1f       	adc	r22, r22
    1210:	82 9f       	mul	r24, r18
    1212:	22 27       	eor	r18, r18
    1214:	b0 0d       	add	r27, r0
    1216:	a1 1d       	adc	r26, r1
    1218:	62 1f       	adc	r22, r18
    121a:	73 9f       	mul	r23, r19
    121c:	b0 0d       	add	r27, r0
    121e:	a1 1d       	adc	r26, r1
    1220:	62 1f       	adc	r22, r18
    1222:	83 9f       	mul	r24, r19
    1224:	a0 0d       	add	r26, r0
    1226:	61 1d       	adc	r22, r1
    1228:	22 1f       	adc	r18, r18
    122a:	74 9f       	mul	r23, r20
    122c:	33 27       	eor	r19, r19
    122e:	a0 0d       	add	r26, r0
    1230:	61 1d       	adc	r22, r1
    1232:	23 1f       	adc	r18, r19
    1234:	84 9f       	mul	r24, r20
    1236:	60 0d       	add	r22, r0
    1238:	21 1d       	adc	r18, r1
    123a:	82 2f       	mov	r24, r18
    123c:	76 2f       	mov	r23, r22
    123e:	6a 2f       	mov	r22, r26
    1240:	11 24       	eor	r1, r1
    1242:	9f 57       	subi	r25, 0x7F	; 127
    1244:	50 40       	sbci	r21, 0x00	; 0
    1246:	8a f0       	brmi	.+34     	; 0x126a <__mulsf3_pse+0x84>
    1248:	e1 f0       	breq	.+56     	; 0x1282 <__mulsf3_pse+0x9c>
    124a:	88 23       	and	r24, r24
    124c:	4a f0       	brmi	.+18     	; 0x1260 <__mulsf3_pse+0x7a>
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	bb 1f       	adc	r27, r27
    1254:	66 1f       	adc	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	88 1f       	adc	r24, r24
    125a:	91 50       	subi	r25, 0x01	; 1
    125c:	50 40       	sbci	r21, 0x00	; 0
    125e:	a9 f7       	brne	.-22     	; 0x124a <__mulsf3_pse+0x64>
    1260:	9e 3f       	cpi	r25, 0xFE	; 254
    1262:	51 05       	cpc	r21, r1
    1264:	70 f0       	brcs	.+28     	; 0x1282 <__mulsf3_pse+0x9c>
    1266:	60 cf       	rjmp	.-320    	; 0x1128 <__fp_inf>
    1268:	aa cf       	rjmp	.-172    	; 0x11be <__fp_szero>
    126a:	5f 3f       	cpi	r21, 0xFF	; 255
    126c:	ec f3       	brlt	.-6      	; 0x1268 <__mulsf3_pse+0x82>
    126e:	98 3e       	cpi	r25, 0xE8	; 232
    1270:	dc f3       	brlt	.-10     	; 0x1268 <__mulsf3_pse+0x82>
    1272:	86 95       	lsr	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b7 95       	ror	r27
    127a:	f7 95       	ror	r31
    127c:	e7 95       	ror	r30
    127e:	9f 5f       	subi	r25, 0xFF	; 255
    1280:	c1 f7       	brne	.-16     	; 0x1272 <__mulsf3_pse+0x8c>
    1282:	fe 2b       	or	r31, r30
    1284:	88 0f       	add	r24, r24
    1286:	91 1d       	adc	r25, r1
    1288:	96 95       	lsr	r25
    128a:	87 95       	ror	r24
    128c:	97 f9       	bld	r25, 7
    128e:	08 95       	ret

00001290 <atoi>:
    1290:	fc 01       	movw	r30, r24
    1292:	88 27       	eor	r24, r24
    1294:	99 27       	eor	r25, r25
    1296:	e8 94       	clt
    1298:	21 91       	ld	r18, Z+
    129a:	20 32       	cpi	r18, 0x20	; 32
    129c:	e9 f3       	breq	.-6      	; 0x1298 <atoi+0x8>
    129e:	29 30       	cpi	r18, 0x09	; 9
    12a0:	10 f0       	brcs	.+4      	; 0x12a6 <atoi+0x16>
    12a2:	2e 30       	cpi	r18, 0x0E	; 14
    12a4:	c8 f3       	brcs	.-14     	; 0x1298 <atoi+0x8>
    12a6:	2b 32       	cpi	r18, 0x2B	; 43
    12a8:	39 f0       	breq	.+14     	; 0x12b8 <atoi+0x28>
    12aa:	2d 32       	cpi	r18, 0x2D	; 45
    12ac:	31 f4       	brne	.+12     	; 0x12ba <atoi+0x2a>
    12ae:	68 94       	set
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <atoi+0x28>
    12b2:	21 d0       	rcall	.+66     	; 0x12f6 <__mulhi_const_10>
    12b4:	82 0f       	add	r24, r18
    12b6:	91 1d       	adc	r25, r1
    12b8:	21 91       	ld	r18, Z+
    12ba:	20 53       	subi	r18, 0x30	; 48
    12bc:	2a 30       	cpi	r18, 0x0A	; 10
    12be:	c8 f3       	brcs	.-14     	; 0x12b2 <atoi+0x22>
    12c0:	1e f4       	brtc	.+6      	; 0x12c8 <atoi+0x38>
    12c2:	90 95       	com	r25
    12c4:	81 95       	neg	r24
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	08 95       	ret

000012ca <memset>:
    12ca:	dc 01       	movw	r26, r24
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <memset+0x6>
    12ce:	6d 93       	st	X+, r22
    12d0:	41 50       	subi	r20, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	e0 f7       	brcc	.-8      	; 0x12ce <memset+0x4>
    12d6:	08 95       	ret

000012d8 <strncpy>:
    12d8:	fb 01       	movw	r30, r22
    12da:	dc 01       	movw	r26, r24
    12dc:	41 50       	subi	r20, 0x01	; 1
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	48 f0       	brcs	.+18     	; 0x12f4 <strncpy+0x1c>
    12e2:	01 90       	ld	r0, Z+
    12e4:	0d 92       	st	X+, r0
    12e6:	00 20       	and	r0, r0
    12e8:	c9 f7       	brne	.-14     	; 0x12dc <strncpy+0x4>
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <strncpy+0x16>
    12ec:	1d 92       	st	X+, r1
    12ee:	41 50       	subi	r20, 0x01	; 1
    12f0:	50 40       	sbci	r21, 0x00	; 0
    12f2:	e0 f7       	brcc	.-8      	; 0x12ec <strncpy+0x14>
    12f4:	08 95       	ret

000012f6 <__mulhi_const_10>:
    12f6:	7a e0       	ldi	r23, 0x0A	; 10
    12f8:	97 9f       	mul	r25, r23
    12fa:	90 2d       	mov	r25, r0
    12fc:	87 9f       	mul	r24, r23
    12fe:	80 2d       	mov	r24, r0
    1300:	91 0d       	add	r25, r1
    1302:	11 24       	eor	r1, r1
    1304:	08 95       	ret

00001306 <_exit>:
    1306:	f8 94       	cli

00001308 <__stop_program>:
    1308:	ff cf       	rjmp	.-2      	; 0x1308 <__stop_program>
