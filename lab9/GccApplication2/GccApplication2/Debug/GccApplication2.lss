
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000dfc  00000e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063f  0080011c  0080011c  00000eac  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bcc  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000868  00000000  00000000  00002cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001345  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00004880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a46  00000000  00000000  00004cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000120b  00000000  00000000  0000570e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00006919  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	73 c3       	rjmp	.+1766   	; 0x71c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ac e1       	ldi	r26, 0x1C	; 28
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 35       	cpi	r26, 0x5B	; 91
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ca d1       	rcall	.+916    	; 0x458 <main>
  c4:	99 c6       	rjmp	.+3378   	; 0xdf8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	79 d4       	rcall	.+2290   	; 0x9c2 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 1c 01 	lds	r18, 0x011C
  d4:	30 91 1d 01 	lds	r19, 0x011D
  d8:	ce 01       	movw	r24, r28
  da:	82 0f       	add	r24, r18
  dc:	93 1f       	adc	r25, r19
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	c2 5e       	subi	r28, 0xE2	; 226
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 1d 01 	sts	0x011D, r25
  f6:	80 93 1c 01 	sts	0x011C, r24
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 106:	24 d5       	rcall	.+2632   	; 0xb50 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	8e 17       	cp	r24, r30
 22a:	9f 07       	cpc	r25, r31
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <MOTOR_Tick>:
void MOTOR_Init() {
	motor_state = INIT;
}

void MOTOR_Tick() { // Transitions
	switch(motor_state) { 
 246:	80 91 56 07 	lds	r24, 0x0756
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	61 f0       	breq	.+24     	; 0x266 <MOTOR_Tick+0x20>
 24e:	38 f0       	brcs	.+14     	; 0x25e <MOTOR_Tick+0x18>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	09 f4       	brne	.+2      	; 0x256 <MOTOR_Tick+0x10>
 254:	50 c0       	rjmp	.+160    	; 0x2f6 <MOTOR_Tick+0xb0>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	09 f4       	brne	.+2      	; 0x25c <MOTOR_Tick+0x16>
 25a:	65 c0       	rjmp	.+202    	; 0x326 <MOTOR_Tick+0xe0>
 25c:	7c c0       	rjmp	.+248    	; 0x356 <MOTOR_Tick+0x110>
		case INIT:
			motor_state = IDLE;
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 56 07 	sts	0x0756, r24
		break;
 264:	08 95       	ret

		case IDLE:
			if(BTN0) {
 266:	18 99       	sbic	0x03, 0	; 3
 268:	0a c0       	rjmp	.+20     	; 0x27e <MOTOR_Tick+0x38>
				numPhases = 1024; 				
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	94 e0       	ldi	r25, 0x04	; 4
 26e:	90 93 5a 07 	sts	0x075A, r25
 272:	80 93 59 07 	sts	0x0759, r24
				motor_state = COUNTERCLOCKWISE;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	80 93 56 07 	sts	0x0756, r24
 27c:	b7 c0       	rjmp	.+366    	; 0x3ec <MOTOR_Tick+0x1a6>
			}
			else if(BTN1) {
 27e:	19 99       	sbic	0x03, 1	; 3
 280:	0a c0       	rjmp	.+20     	; 0x296 <MOTOR_Tick+0x50>
				numPhases = 2048;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	98 e0       	ldi	r25, 0x08	; 8
 286:	90 93 5a 07 	sts	0x075A, r25
 28a:	80 93 59 07 	sts	0x0759, r24
				motor_state = COUNTERCLOCKWISE;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	80 93 56 07 	sts	0x0756, r24
 294:	ab c0       	rjmp	.+342    	; 0x3ec <MOTOR_Tick+0x1a6>
			}
			else if(BTN2) {
 296:	1a 99       	sbic	0x03, 2	; 3
 298:	0a c0       	rjmp	.+20     	; 0x2ae <MOTOR_Tick+0x68>
				numPhases = 4096;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e1       	ldi	r25, 0x10	; 16
 29e:	90 93 5a 07 	sts	0x075A, r25
 2a2:	80 93 59 07 	sts	0x0759, r24
				motor_state = COUNTERCLOCKWISE;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	80 93 56 07 	sts	0x0756, r24
 2ac:	9f c0       	rjmp	.+318    	; 0x3ec <MOTOR_Tick+0x1a6>
			}
			else if(BTN3) {
 2ae:	1b 99       	sbic	0x03, 3	; 3
 2b0:	0a c0       	rjmp	.+20     	; 0x2c6 <MOTOR_Tick+0x80>
				numPhases = 1024;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	94 e0       	ldi	r25, 0x04	; 4
 2b6:	90 93 5a 07 	sts	0x075A, r25
 2ba:	80 93 59 07 	sts	0x0759, r24
				motor_state = CLOCKWISE;
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	80 93 56 07 	sts	0x0756, r24
 2c4:	9b c0       	rjmp	.+310    	; 0x3fc <MOTOR_Tick+0x1b6>
			}
			else if(BTN4) {
 2c6:	1c 99       	sbic	0x03, 4	; 3
 2c8:	0a c0       	rjmp	.+20     	; 0x2de <MOTOR_Tick+0x98>
				numPhases = 2048;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	98 e0       	ldi	r25, 0x08	; 8
 2ce:	90 93 5a 07 	sts	0x075A, r25
 2d2:	80 93 59 07 	sts	0x0759, r24
				motor_state = CLOCKWISE;
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	80 93 56 07 	sts	0x0756, r24
 2dc:	8f c0       	rjmp	.+286    	; 0x3fc <MOTOR_Tick+0x1b6>
			}
			else if(BTN5) {
 2de:	1d 99       	sbic	0x03, 5	; 3
 2e0:	94 c0       	rjmp	.+296    	; 0x40a <MOTOR_Tick+0x1c4>
				numPhases = 4096;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e1       	ldi	r25, 0x10	; 16
 2e6:	90 93 5a 07 	sts	0x075A, r25
 2ea:	80 93 59 07 	sts	0x0759, r24
				motor_state = CLOCKWISE;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	80 93 56 07 	sts	0x0756, r24
 2f4:	83 c0       	rjmp	.+262    	; 0x3fc <MOTOR_Tick+0x1b6>
				// Do nothing
			}
		break;

		case COUNTERCLOCKWISE:
			if(j >= numPhases) {
 2f6:	20 91 54 07 	lds	r18, 0x0754
 2fa:	30 91 55 07 	lds	r19, 0x0755
 2fe:	80 91 59 07 	lds	r24, 0x0759
 302:	90 91 5a 07 	lds	r25, 0x075A
 306:	28 17       	cp	r18, r24
 308:	39 07       	cpc	r19, r25
 30a:	0c f4       	brge	.+2      	; 0x30e <MOTOR_Tick+0xc8>
 30c:	6f c0       	rjmp	.+222    	; 0x3ec <MOTOR_Tick+0x1a6>
				i = 0;
 30e:	10 92 58 07 	sts	0x0758, r1
 312:	10 92 57 07 	sts	0x0757, r1
				j = 0;
 316:	10 92 55 07 	sts	0x0755, r1
 31a:	10 92 54 07 	sts	0x0754, r1
				motor_state = IDLE;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 56 07 	sts	0x0756, r24
 324:	08 95       	ret
			}
		break;

		case CLOCKWISE:
			if(j >= numPhases) {
 326:	20 91 54 07 	lds	r18, 0x0754
 32a:	30 91 55 07 	lds	r19, 0x0755
 32e:	80 91 59 07 	lds	r24, 0x0759
 332:	90 91 5a 07 	lds	r25, 0x075A
 336:	28 17       	cp	r18, r24
 338:	39 07       	cpc	r19, r25
 33a:	0c f4       	brge	.+2      	; 0x33e <MOTOR_Tick+0xf8>
 33c:	5f c0       	rjmp	.+190    	; 0x3fc <MOTOR_Tick+0x1b6>
				i = 0;
 33e:	10 92 58 07 	sts	0x0758, r1
 342:	10 92 57 07 	sts	0x0757, r1
			    j = 0;
 346:	10 92 55 07 	sts	0x0755, r1
 34a:	10 92 54 07 	sts	0x0754, r1
			    motor_state = IDLE;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 56 07 	sts	0x0756, r24
 354:	08 95       	ret
			}
		break;

		default:
			motor_state = INIT;
 356:	10 92 56 07 	sts	0x0756, r1
		break;
	}

	switch(motor_state) { // Actions
		case INIT:
			i = 0;
 35a:	10 92 58 07 	sts	0x0758, r1
 35e:	10 92 57 07 	sts	0x0757, r1
			j = 0;
 362:	10 92 55 07 	sts	0x0755, r1
 366:	10 92 54 07 	sts	0x0754, r1
		break;
 36a:	08 95       	ret
		
		break;

		case COUNTERCLOCKWISE:
			if(i < 0) {
				i = 6;
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	90 93 58 07 	sts	0x0758, r25
 374:	80 93 57 07 	sts	0x0757, r24
			}
			PORTA = motorPhase[i];
 378:	e0 91 57 07 	lds	r30, 0x0757
 37c:	f0 91 58 07 	lds	r31, 0x0758
 380:	e0 50       	subi	r30, 0x00	; 0
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	80 81       	ld	r24, Z
 386:	82 b9       	out	0x02, r24	; 2
			-- i;
 388:	80 91 57 07 	lds	r24, 0x0757
 38c:	90 91 58 07 	lds	r25, 0x0758
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	90 93 58 07 	sts	0x0758, r25
 396:	80 93 57 07 	sts	0x0757, r24
			++ j;
 39a:	80 91 54 07 	lds	r24, 0x0754
 39e:	90 91 55 07 	lds	r25, 0x0755
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 55 07 	sts	0x0755, r25
 3a8:	80 93 54 07 	sts	0x0754, r24
		break;
 3ac:	08 95       	ret

		case CLOCKWISE:
			if(i > 6) {
				i = 0;
 3ae:	10 92 58 07 	sts	0x0758, r1
 3b2:	10 92 57 07 	sts	0x0757, r1
			}
			PORTA = motorPhase[i];
 3b6:	e0 91 57 07 	lds	r30, 0x0757
 3ba:	f0 91 58 07 	lds	r31, 0x0758
 3be:	e0 50       	subi	r30, 0x00	; 0
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	80 81       	ld	r24, Z
 3c4:	82 b9       	out	0x02, r24	; 2
			++ i;	
 3c6:	80 91 57 07 	lds	r24, 0x0757
 3ca:	90 91 58 07 	lds	r25, 0x0758
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	90 93 58 07 	sts	0x0758, r25
 3d4:	80 93 57 07 	sts	0x0757, r24
			++ j;
 3d8:	80 91 54 07 	lds	r24, 0x0754
 3dc:	90 91 55 07 	lds	r25, 0x0755
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	90 93 55 07 	sts	0x0755, r25
 3e6:	80 93 54 07 	sts	0x0754, r24
		break;
 3ea:	08 95       	ret
			// Do nothing
		
		break;

		case COUNTERCLOCKWISE:
			if(i < 0) {
 3ec:	80 91 57 07 	lds	r24, 0x0757
 3f0:	90 91 58 07 	lds	r25, 0x0758
 3f4:	99 23       	and	r25, r25
 3f6:	0c f0       	brlt	.+2      	; 0x3fa <MOTOR_Tick+0x1b4>
 3f8:	bf cf       	rjmp	.-130    	; 0x378 <MOTOR_Tick+0x132>
 3fa:	b8 cf       	rjmp	.-144    	; 0x36c <MOTOR_Tick+0x126>
			-- i;
			++ j;
		break;

		case CLOCKWISE:
			if(i > 6) {
 3fc:	80 91 57 07 	lds	r24, 0x0757
 400:	90 91 58 07 	lds	r25, 0x0758
 404:	07 97       	sbiw	r24, 0x07	; 7
 406:	9c f6       	brge	.-90     	; 0x3ae <MOTOR_Tick+0x168>
 408:	d6 cf       	rjmp	.-84     	; 0x3b6 <MOTOR_Tick+0x170>
 40a:	08 95       	ret

0000040c <MotorSecTask>:
			   // 180		2048
			   // 360       4096
enum motorState {INIT, IDLE, COUNTERCLOCKWISE, CLOCKWISE} motor_state;

void MOTOR_Init() {
	motor_state = INIT;
 40c:	10 92 56 07 	sts	0x0756, r1
}

void MotorSecTask() {
	MOTOR_Init();
   for(;;) { 	
	MOTOR_Tick();
 410:	1a df       	rcall	.-460    	; 0x246 <MOTOR_Tick>
	vTaskDelay(3); 
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	1d d4       	rcall	.+2106   	; 0xc52 <vTaskDelay>
   } 
 418:	fb cf       	rjmp	.-10     	; 0x410 <MotorSecTask+0x4>

0000041a <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 41a:	af 92       	push	r10
 41c:	bf 92       	push	r11
 41e:	cf 92       	push	r12
 420:	df 92       	push	r13
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
	xTaskCreate(MotorSecTask, (signed portCHAR *)"MotorSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 428:	a1 2c       	mov	r10, r1
 42a:	b1 2c       	mov	r11, r1
 42c:	c1 2c       	mov	r12, r1
 42e:	d1 2c       	mov	r13, r1
 430:	e1 2c       	mov	r14, r1
 432:	f1 2c       	mov	r15, r1
 434:	08 2f       	mov	r16, r24
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	45 e5       	ldi	r20, 0x55	; 85
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	69 e0       	ldi	r22, 0x09	; 9
 440:	71 e0       	ldi	r23, 0x01	; 1
 442:	86 e0       	ldi	r24, 0x06	; 6
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	a1 d1       	rcall	.+834    	; 0x78a <xTaskGenericCreate>
}	
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	bf 90       	pop	r11
 454:	af 90       	pop	r10
 456:	08 95       	ret

00000458 <main>:
 
int main(void) { 
   DDRB = 0x00; PORTB = 0xFF; // Set PORTB as input
 458:	14 b8       	out	0x04, r1	; 4
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	85 b9       	out	0x05, r24	; 5
   DDRA = 0xFF; PORTA = 0x00; // Set PORTD as output
 45e:	81 b9       	out	0x01, r24	; 1
 460:	12 b8       	out	0x02, r1	; 2

   // Start Tasks  
   StartSecPulse(1);
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	da df       	rcall	.-76     	; 0x41a <StartSecPulse>
    // RunSchedular 
   vTaskStartScheduler(); 
 466:	84 d2       	rcall	.+1288   	; 0x970 <vTaskStartScheduler>
 
   return 0; 
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	08 95       	ret

0000046e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 46e:	31 e1       	ldi	r19, 0x11	; 17
 470:	fc 01       	movw	r30, r24
 472:	30 83       	st	Z, r19
 474:	31 97       	sbiw	r30, 0x01	; 1
 476:	22 e2       	ldi	r18, 0x22	; 34
 478:	20 83       	st	Z, r18
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	a3 e3       	ldi	r26, 0x33	; 51
 47e:	a0 83       	st	Z, r26
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	60 83       	st	Z, r22
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	70 83       	st	Z, r23
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	10 82       	st	Z, r1
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	60 e8       	ldi	r22, 0x80	; 128
 490:	60 83       	st	Z, r22
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	10 82       	st	Z, r1
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	62 e0       	ldi	r22, 0x02	; 2
 49a:	60 83       	st	Z, r22
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	63 e0       	ldi	r22, 0x03	; 3
 4a0:	60 83       	st	Z, r22
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	64 e0       	ldi	r22, 0x04	; 4
 4a6:	60 83       	st	Z, r22
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	65 e0       	ldi	r22, 0x05	; 5
 4ac:	60 83       	st	Z, r22
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	66 e0       	ldi	r22, 0x06	; 6
 4b2:	60 83       	st	Z, r22
 4b4:	31 97       	sbiw	r30, 0x01	; 1
 4b6:	67 e0       	ldi	r22, 0x07	; 7
 4b8:	60 83       	st	Z, r22
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	68 e0       	ldi	r22, 0x08	; 8
 4be:	60 83       	st	Z, r22
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	69 e0       	ldi	r22, 0x09	; 9
 4c4:	60 83       	st	Z, r22
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	60 e1       	ldi	r22, 0x10	; 16
 4ca:	60 83       	st	Z, r22
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	30 83       	st	Z, r19
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	32 e1       	ldi	r19, 0x12	; 18
 4d4:	30 83       	st	Z, r19
 4d6:	31 97       	sbiw	r30, 0x01	; 1
 4d8:	33 e1       	ldi	r19, 0x13	; 19
 4da:	30 83       	st	Z, r19
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	34 e1       	ldi	r19, 0x14	; 20
 4e0:	30 83       	st	Z, r19
 4e2:	31 97       	sbiw	r30, 0x01	; 1
 4e4:	35 e1       	ldi	r19, 0x15	; 21
 4e6:	30 83       	st	Z, r19
 4e8:	31 97       	sbiw	r30, 0x01	; 1
 4ea:	36 e1       	ldi	r19, 0x16	; 22
 4ec:	30 83       	st	Z, r19
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	37 e1       	ldi	r19, 0x17	; 23
 4f2:	30 83       	st	Z, r19
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	38 e1       	ldi	r19, 0x18	; 24
 4f8:	30 83       	st	Z, r19
 4fa:	31 97       	sbiw	r30, 0x01	; 1
 4fc:	39 e1       	ldi	r19, 0x19	; 25
 4fe:	30 83       	st	Z, r19
 500:	31 97       	sbiw	r30, 0x01	; 1
 502:	30 e2       	ldi	r19, 0x20	; 32
 504:	30 83       	st	Z, r19
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	31 e2       	ldi	r19, 0x21	; 33
 50a:	30 83       	st	Z, r19
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	20 83       	st	Z, r18
 510:	31 97       	sbiw	r30, 0x01	; 1
 512:	23 e2       	ldi	r18, 0x23	; 35
 514:	20 83       	st	Z, r18
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	40 83       	st	Z, r20
 51a:	31 97       	sbiw	r30, 0x01	; 1
 51c:	50 83       	st	Z, r21
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	26 e2       	ldi	r18, 0x26	; 38
 522:	20 83       	st	Z, r18
 524:	31 97       	sbiw	r30, 0x01	; 1
 526:	27 e2       	ldi	r18, 0x27	; 39
 528:	20 83       	st	Z, r18
 52a:	31 97       	sbiw	r30, 0x01	; 1
 52c:	28 e2       	ldi	r18, 0x28	; 40
 52e:	20 83       	st	Z, r18
 530:	31 97       	sbiw	r30, 0x01	; 1
 532:	29 e2       	ldi	r18, 0x29	; 41
 534:	20 83       	st	Z, r18
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	20 e3       	ldi	r18, 0x30	; 48
 53a:	20 83       	st	Z, r18
 53c:	31 97       	sbiw	r30, 0x01	; 1
 53e:	21 e3       	ldi	r18, 0x31	; 49
 540:	20 83       	st	Z, r18
 542:	86 97       	sbiw	r24, 0x26	; 38
 544:	08 95       	ret

00000546 <xPortStartScheduler>:
 546:	10 92 89 00 	sts	0x0089, r1
 54a:	8c e7       	ldi	r24, 0x7C	; 124
 54c:	80 93 88 00 	sts	0x0088, r24
 550:	8b e0       	ldi	r24, 0x0B	; 11
 552:	80 93 81 00 	sts	0x0081, r24
 556:	ef e6       	ldi	r30, 0x6F	; 111
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	80 83       	st	Z, r24
 560:	a0 91 52 07 	lds	r26, 0x0752
 564:	b0 91 53 07 	lds	r27, 0x0753
 568:	cd 91       	ld	r28, X+
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	dd 91       	ld	r29, X+
 56e:	de bf       	out	0x3e, r29	; 62
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	7f 91       	pop	r23
 582:	6f 91       	pop	r22
 584:	5f 91       	pop	r21
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	df 90       	pop	r13
 596:	cf 90       	pop	r12
 598:	bf 90       	pop	r11
 59a:	af 90       	pop	r10
 59c:	9f 90       	pop	r9
 59e:	8f 90       	pop	r8
 5a0:	7f 90       	pop	r7
 5a2:	6f 90       	pop	r6
 5a4:	5f 90       	pop	r5
 5a6:	4f 90       	pop	r4
 5a8:	3f 90       	pop	r3
 5aa:	2f 90       	pop	r2
 5ac:	1f 90       	pop	r1
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	08 95       	ret
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	08 95       	ret

000005ba <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	f8 94       	cli
 5c0:	0f 92       	push	r0
 5c2:	1f 92       	push	r1
 5c4:	11 24       	eor	r1, r1
 5c6:	2f 92       	push	r2
 5c8:	3f 92       	push	r3
 5ca:	4f 92       	push	r4
 5cc:	5f 92       	push	r5
 5ce:	6f 92       	push	r6
 5d0:	7f 92       	push	r7
 5d2:	8f 92       	push	r8
 5d4:	9f 92       	push	r9
 5d6:	af 92       	push	r10
 5d8:	bf 92       	push	r11
 5da:	cf 92       	push	r12
 5dc:	df 92       	push	r13
 5de:	ef 92       	push	r14
 5e0:	ff 92       	push	r15
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
 602:	a0 91 52 07 	lds	r26, 0x0752
 606:	b0 91 53 07 	lds	r27, 0x0753
 60a:	0d b6       	in	r0, 0x3d	; 61
 60c:	0d 92       	st	X+, r0
 60e:	0e b6       	in	r0, 0x3e	; 62
 610:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 612:	70 d3       	rcall	.+1760   	; 0xcf4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 614:	a0 91 52 07 	lds	r26, 0x0752
 618:	b0 91 53 07 	lds	r27, 0x0753
 61c:	cd 91       	ld	r28, X+
 61e:	cd bf       	out	0x3d, r28	; 61
 620:	dd 91       	ld	r29, X+
 622:	de bf       	out	0x3e, r29	; 62
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	ff 90       	pop	r15
 646:	ef 90       	pop	r14
 648:	df 90       	pop	r13
 64a:	cf 90       	pop	r12
 64c:	bf 90       	pop	r11
 64e:	af 90       	pop	r10
 650:	9f 90       	pop	r9
 652:	8f 90       	pop	r8
 654:	7f 90       	pop	r7
 656:	6f 90       	pop	r6
 658:	5f 90       	pop	r5
 65a:	4f 90       	pop	r4
 65c:	3f 90       	pop	r3
 65e:	2f 90       	pop	r2
 660:	1f 90       	pop	r1
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	0f 90       	pop	r0

	asm volatile ( "ret" );
 668:	08 95       	ret

0000066a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	0f 92       	push	r0
 672:	1f 92       	push	r1
 674:	11 24       	eor	r1, r1
 676:	2f 92       	push	r2
 678:	3f 92       	push	r3
 67a:	4f 92       	push	r4
 67c:	5f 92       	push	r5
 67e:	6f 92       	push	r6
 680:	7f 92       	push	r7
 682:	8f 92       	push	r8
 684:	9f 92       	push	r9
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	2f 93       	push	r18
 698:	3f 93       	push	r19
 69a:	4f 93       	push	r20
 69c:	5f 93       	push	r21
 69e:	6f 93       	push	r22
 6a0:	7f 93       	push	r23
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	af 93       	push	r26
 6a8:	bf 93       	push	r27
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
 6b2:	a0 91 52 07 	lds	r26, 0x0752
 6b6:	b0 91 53 07 	lds	r27, 0x0753
 6ba:	0d b6       	in	r0, 0x3d	; 61
 6bc:	0d 92       	st	X+, r0
 6be:	0e b6       	in	r0, 0x3e	; 62
 6c0:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 6c2:	85 d1       	rcall	.+778    	; 0x9ce <vTaskIncrementTick>
	vTaskSwitchContext();
 6c4:	17 d3       	rcall	.+1582   	; 0xcf4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 6c6:	a0 91 52 07 	lds	r26, 0x0752
 6ca:	b0 91 53 07 	lds	r27, 0x0753
 6ce:	cd 91       	ld	r28, X+
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	dd 91       	ld	r29, X+
 6d4:	de bf       	out	0x3e, r29	; 62
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	bf 91       	pop	r27
 6e0:	af 91       	pop	r26
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	7f 91       	pop	r23
 6e8:	6f 91       	pop	r22
 6ea:	5f 91       	pop	r21
 6ec:	4f 91       	pop	r20
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	ff 90       	pop	r15
 6f8:	ef 90       	pop	r14
 6fa:	df 90       	pop	r13
 6fc:	cf 90       	pop	r12
 6fe:	bf 90       	pop	r11
 700:	af 90       	pop	r10
 702:	9f 90       	pop	r9
 704:	8f 90       	pop	r8
 706:	7f 90       	pop	r7
 708:	6f 90       	pop	r6
 70a:	5f 90       	pop	r5
 70c:	4f 90       	pop	r4
 70e:	3f 90       	pop	r3
 710:	2f 90       	pop	r2
 712:	1f 90       	pop	r1
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0

	asm volatile ( "ret" );
 71a:	08 95       	ret

0000071c <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 71c:	a6 df       	rcall	.-180    	; 0x66a <vPortYieldFromTick>
		asm volatile ( "reti" );
 71e:	18 95       	reti

00000720 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	ec 01       	movw	r28, r24
 726:	e0 91 52 07 	lds	r30, 0x0752
 72a:	f0 91 53 07 	lds	r31, 0x0753
 72e:	93 83       	std	Z+3, r25	; 0x03
 730:	82 83       	std	Z+2, r24	; 0x02
 732:	80 91 02 07 	lds	r24, 0x0702
 736:	90 91 03 07 	lds	r25, 0x0703
 73a:	c8 17       	cp	r28, r24
 73c:	d9 07       	cpc	r29, r25
 73e:	60 f4       	brcc	.+24     	; 0x758 <prvAddCurrentTaskToDelayedList+0x38>
 740:	60 91 52 07 	lds	r22, 0x0752
 744:	70 91 53 07 	lds	r23, 0x0753
 748:	80 91 18 07 	lds	r24, 0x0718
 74c:	90 91 19 07 	lds	r25, 0x0719
 750:	6e 5f       	subi	r22, 0xFE	; 254
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	17 dd       	rcall	.-1490   	; 0x184 <vListInsert>
 756:	16 c0       	rjmp	.+44     	; 0x784 <prvAddCurrentTaskToDelayedList+0x64>
 758:	60 91 52 07 	lds	r22, 0x0752
 75c:	70 91 53 07 	lds	r23, 0x0753
 760:	80 91 1a 07 	lds	r24, 0x071A
 764:	90 91 1b 07 	lds	r25, 0x071B
 768:	6e 5f       	subi	r22, 0xFE	; 254
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	0b dd       	rcall	.-1514   	; 0x184 <vListInsert>
 76e:	80 91 07 01 	lds	r24, 0x0107
 772:	90 91 08 01 	lds	r25, 0x0108
 776:	c8 17       	cp	r28, r24
 778:	d9 07       	cpc	r29, r25
 77a:	20 f4       	brcc	.+8      	; 0x784 <prvAddCurrentTaskToDelayedList+0x64>
 77c:	d0 93 08 01 	sts	0x0108, r29
 780:	c0 93 07 01 	sts	0x0107, r28
 784:	df 91       	pop	r29
 786:	cf 91       	pop	r28
 788:	08 95       	ret

0000078a <xTaskGenericCreate>:
 78a:	4f 92       	push	r4
 78c:	5f 92       	push	r5
 78e:	6f 92       	push	r6
 790:	7f 92       	push	r7
 792:	8f 92       	push	r8
 794:	9f 92       	push	r9
 796:	af 92       	push	r10
 798:	bf 92       	push	r11
 79a:	cf 92       	push	r12
 79c:	df 92       	push	r13
 79e:	ef 92       	push	r14
 7a0:	ff 92       	push	r15
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	5c 01       	movw	r10, r24
 7ac:	4b 01       	movw	r8, r22
 7ae:	3a 01       	movw	r6, r20
 7b0:	29 01       	movw	r4, r18
 7b2:	81 e2       	ldi	r24, 0x21	; 33
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	88 dc       	rcall	.-1776   	; 0xc8 <pvPortMalloc>
 7b8:	ec 01       	movw	r28, r24
 7ba:	89 2b       	or	r24, r25
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <xTaskGenericCreate+0x36>
 7be:	c6 c0       	rjmp	.+396    	; 0x94c <xTaskGenericCreate+0x1c2>
 7c0:	c1 14       	cp	r12, r1
 7c2:	d1 04       	cpc	r13, r1
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <xTaskGenericCreate+0x3e>
 7c6:	be c0       	rjmp	.+380    	; 0x944 <xTaskGenericCreate+0x1ba>
 7c8:	c3 01       	movw	r24, r6
 7ca:	7e dc       	rcall	.-1796   	; 0xc8 <pvPortMalloc>
 7cc:	98 8f       	std	Y+24, r25	; 0x18
 7ce:	8f 8b       	std	Y+23, r24	; 0x17
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	19 f4       	brne	.+6      	; 0x7da <xTaskGenericCreate+0x50>
 7d4:	ce 01       	movw	r24, r28
 7d6:	9c dc       	rcall	.-1736   	; 0x110 <vPortFree>
 7d8:	b9 c0       	rjmp	.+370    	; 0x94c <xTaskGenericCreate+0x1c2>
 7da:	a3 01       	movw	r20, r6
 7dc:	65 ea       	ldi	r22, 0xA5	; 165
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	f5 d2       	rcall	.+1514   	; 0xdcc <memset>
 7e2:	93 01       	movw	r18, r6
 7e4:	21 50       	subi	r18, 0x01	; 1
 7e6:	31 09       	sbc	r19, r1
 7e8:	8f 89       	ldd	r24, Y+23	; 0x17
 7ea:	98 8d       	ldd	r25, Y+24	; 0x18
 7ec:	3c 01       	movw	r6, r24
 7ee:	62 0e       	add	r6, r18
 7f0:	73 1e       	adc	r7, r19
 7f2:	48 e0       	ldi	r20, 0x08	; 8
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	b4 01       	movw	r22, r8
 7f8:	ce 01       	movw	r24, r28
 7fa:	49 96       	adiw	r24, 0x19	; 25
 7fc:	ee d2       	rcall	.+1500   	; 0xdda <strncpy>
 7fe:	18 a2       	std	Y+32, r1	; 0x20
 800:	10 2f       	mov	r17, r16
 802:	04 30       	cpi	r16, 0x04	; 4
 804:	08 f0       	brcs	.+2      	; 0x808 <xTaskGenericCreate+0x7e>
 806:	13 e0       	ldi	r17, 0x03	; 3
 808:	1e 8b       	std	Y+22, r17	; 0x16
 80a:	6e 01       	movw	r12, r28
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	c8 0e       	add	r12, r24
 810:	d1 1c       	adc	r13, r1
 812:	c6 01       	movw	r24, r12
 814:	8c dc       	rcall	.-1768   	; 0x12e <vListInitialiseItem>
 816:	ce 01       	movw	r24, r28
 818:	0c 96       	adiw	r24, 0x0c	; 12
 81a:	89 dc       	rcall	.-1774   	; 0x12e <vListInitialiseItem>
 81c:	d9 87       	std	Y+9, r29	; 0x09
 81e:	c8 87       	std	Y+8, r28	; 0x08
 820:	84 e0       	ldi	r24, 0x04	; 4
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	81 1b       	sub	r24, r17
 826:	91 09       	sbc	r25, r1
 828:	9d 87       	std	Y+13, r25	; 0x0d
 82a:	8c 87       	std	Y+12, r24	; 0x0c
 82c:	db 8b       	std	Y+19, r29	; 0x13
 82e:	ca 8b       	std	Y+18, r28	; 0x12
 830:	a2 01       	movw	r20, r4
 832:	b5 01       	movw	r22, r10
 834:	c3 01       	movw	r24, r6
 836:	1b de       	rcall	.-970    	; 0x46e <pxPortInitialiseStack>
 838:	99 83       	std	Y+1, r25	; 0x01
 83a:	88 83       	st	Y, r24
 83c:	e1 14       	cp	r14, r1
 83e:	f1 04       	cpc	r15, r1
 840:	19 f0       	breq	.+6      	; 0x848 <xTaskGenericCreate+0xbe>
 842:	f7 01       	movw	r30, r14
 844:	d1 83       	std	Z+1, r29	; 0x01
 846:	c0 83       	st	Z, r28
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	0f 92       	push	r0
 84e:	80 91 04 07 	lds	r24, 0x0704
 852:	8f 5f       	subi	r24, 0xFF	; 255
 854:	80 93 04 07 	sts	0x0704, r24
 858:	80 91 52 07 	lds	r24, 0x0752
 85c:	90 91 53 07 	lds	r25, 0x0753
 860:	89 2b       	or	r24, r25
 862:	69 f5       	brne	.+90     	; 0x8be <xTaskGenericCreate+0x134>
 864:	d0 93 53 07 	sts	0x0753, r29
 868:	c0 93 52 07 	sts	0x0752, r28
 86c:	80 91 04 07 	lds	r24, 0x0704
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	a1 f5       	brne	.+104    	; 0x8dc <xTaskGenericCreate+0x152>
 874:	8e e2       	ldi	r24, 0x2E	; 46
 876:	97 e0       	ldi	r25, 0x07	; 7
 878:	4c dc       	rcall	.-1896   	; 0x112 <vListInitialise>
 87a:	87 e3       	ldi	r24, 0x37	; 55
 87c:	97 e0       	ldi	r25, 0x07	; 7
 87e:	49 dc       	rcall	.-1902   	; 0x112 <vListInitialise>
 880:	80 e4       	ldi	r24, 0x40	; 64
 882:	97 e0       	ldi	r25, 0x07	; 7
 884:	46 dc       	rcall	.-1908   	; 0x112 <vListInitialise>
 886:	89 e4       	ldi	r24, 0x49	; 73
 888:	97 e0       	ldi	r25, 0x07	; 7
 88a:	43 dc       	rcall	.-1914   	; 0x112 <vListInitialise>
 88c:	85 e2       	ldi	r24, 0x25	; 37
 88e:	97 e0       	ldi	r25, 0x07	; 7
 890:	40 dc       	rcall	.-1920   	; 0x112 <vListInitialise>
 892:	8c e1       	ldi	r24, 0x1C	; 28
 894:	97 e0       	ldi	r25, 0x07	; 7
 896:	3d dc       	rcall	.-1926   	; 0x112 <vListInitialise>
 898:	8f e0       	ldi	r24, 0x0F	; 15
 89a:	97 e0       	ldi	r25, 0x07	; 7
 89c:	3a dc       	rcall	.-1932   	; 0x112 <vListInitialise>
 89e:	86 e0       	ldi	r24, 0x06	; 6
 8a0:	97 e0       	ldi	r25, 0x07	; 7
 8a2:	37 dc       	rcall	.-1938   	; 0x112 <vListInitialise>
 8a4:	85 e2       	ldi	r24, 0x25	; 37
 8a6:	97 e0       	ldi	r25, 0x07	; 7
 8a8:	90 93 1b 07 	sts	0x071B, r25
 8ac:	80 93 1a 07 	sts	0x071A, r24
 8b0:	8c e1       	ldi	r24, 0x1C	; 28
 8b2:	97 e0       	ldi	r25, 0x07	; 7
 8b4:	90 93 19 07 	sts	0x0719, r25
 8b8:	80 93 18 07 	sts	0x0718, r24
 8bc:	0f c0       	rjmp	.+30     	; 0x8dc <xTaskGenericCreate+0x152>
 8be:	80 91 ff 06 	lds	r24, 0x06FF
 8c2:	81 11       	cpse	r24, r1
 8c4:	0b c0       	rjmp	.+22     	; 0x8dc <xTaskGenericCreate+0x152>
 8c6:	e0 91 52 07 	lds	r30, 0x0752
 8ca:	f0 91 53 07 	lds	r31, 0x0753
 8ce:	86 89       	ldd	r24, Z+22	; 0x16
 8d0:	08 17       	cp	r16, r24
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <xTaskGenericCreate+0x152>
 8d4:	d0 93 53 07 	sts	0x0753, r29
 8d8:	c0 93 52 07 	sts	0x0752, r28
 8dc:	8e 89       	ldd	r24, Y+22	; 0x16
 8de:	90 91 01 07 	lds	r25, 0x0701
 8e2:	98 17       	cp	r25, r24
 8e4:	10 f4       	brcc	.+4      	; 0x8ea <xTaskGenericCreate+0x160>
 8e6:	80 93 01 07 	sts	0x0701, r24
 8ea:	90 91 fa 06 	lds	r25, 0x06FA
 8ee:	9f 5f       	subi	r25, 0xFF	; 255
 8f0:	90 93 fa 06 	sts	0x06FA, r25
 8f4:	90 91 00 07 	lds	r25, 0x0700
 8f8:	98 17       	cp	r25, r24
 8fa:	10 f4       	brcc	.+4      	; 0x900 <xTaskGenericCreate+0x176>
 8fc:	80 93 00 07 	sts	0x0700, r24
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	9c 01       	movw	r18, r24
 904:	22 0f       	add	r18, r18
 906:	33 1f       	adc	r19, r19
 908:	22 0f       	add	r18, r18
 90a:	33 1f       	adc	r19, r19
 90c:	22 0f       	add	r18, r18
 90e:	33 1f       	adc	r19, r19
 910:	82 0f       	add	r24, r18
 912:	93 1f       	adc	r25, r19
 914:	b6 01       	movw	r22, r12
 916:	82 5d       	subi	r24, 0xD2	; 210
 918:	98 4f       	sbci	r25, 0xF8	; 248
 91a:	0d dc       	rcall	.-2022   	; 0x136 <vListInsertEnd>
 91c:	0f 90       	pop	r0
 91e:	0f be       	out	0x3f, r0	; 63
 920:	80 91 ff 06 	lds	r24, 0x06FF
 924:	88 23       	and	r24, r24
 926:	51 f0       	breq	.+20     	; 0x93c <xTaskGenericCreate+0x1b2>
 928:	e0 91 52 07 	lds	r30, 0x0752
 92c:	f0 91 53 07 	lds	r31, 0x0753
 930:	86 89       	ldd	r24, Z+22	; 0x16
 932:	80 17       	cp	r24, r16
 934:	28 f4       	brcc	.+10     	; 0x940 <xTaskGenericCreate+0x1b6>
 936:	41 de       	rcall	.-894    	; 0x5ba <vPortYield>
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	09 c0       	rjmp	.+18     	; 0x94e <xTaskGenericCreate+0x1c4>
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	07 c0       	rjmp	.+14     	; 0x94e <xTaskGenericCreate+0x1c4>
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	05 c0       	rjmp	.+10     	; 0x94e <xTaskGenericCreate+0x1c4>
 944:	d8 8e       	std	Y+24, r13	; 0x18
 946:	cf 8a       	std	Y+23, r12	; 0x17
 948:	c6 01       	movw	r24, r12
 94a:	47 cf       	rjmp	.-370    	; 0x7da <xTaskGenericCreate+0x50>
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	df 91       	pop	r29
 950:	cf 91       	pop	r28
 952:	1f 91       	pop	r17
 954:	0f 91       	pop	r16
 956:	ff 90       	pop	r15
 958:	ef 90       	pop	r14
 95a:	df 90       	pop	r13
 95c:	cf 90       	pop	r12
 95e:	bf 90       	pop	r11
 960:	af 90       	pop	r10
 962:	9f 90       	pop	r9
 964:	8f 90       	pop	r8
 966:	7f 90       	pop	r7
 968:	6f 90       	pop	r6
 96a:	5f 90       	pop	r5
 96c:	4f 90       	pop	r4
 96e:	08 95       	ret

00000970 <vTaskStartScheduler>:
 970:	af 92       	push	r10
 972:	bf 92       	push	r11
 974:	cf 92       	push	r12
 976:	df 92       	push	r13
 978:	ef 92       	push	r14
 97a:	ff 92       	push	r15
 97c:	0f 93       	push	r16
 97e:	a1 2c       	mov	r10, r1
 980:	b1 2c       	mov	r11, r1
 982:	c1 2c       	mov	r12, r1
 984:	d1 2c       	mov	r13, r1
 986:	e1 2c       	mov	r14, r1
 988:	f1 2c       	mov	r15, r1
 98a:	00 e0       	ldi	r16, 0x00	; 0
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	45 e5       	ldi	r20, 0x55	; 85
 992:	50 e0       	ldi	r21, 0x00	; 0
 994:	66 e1       	ldi	r22, 0x16	; 22
 996:	71 e0       	ldi	r23, 0x01	; 1
 998:	84 e4       	ldi	r24, 0x44	; 68
 99a:	96 e0       	ldi	r25, 0x06	; 6
 99c:	f6 de       	rcall	.-532    	; 0x78a <xTaskGenericCreate>
 99e:	81 30       	cpi	r24, 0x01	; 1
 9a0:	41 f4       	brne	.+16     	; 0x9b2 <vTaskStartScheduler+0x42>
 9a2:	f8 94       	cli
 9a4:	80 93 ff 06 	sts	0x06FF, r24
 9a8:	10 92 03 07 	sts	0x0703, r1
 9ac:	10 92 02 07 	sts	0x0702, r1
 9b0:	ca dd       	rcall	.-1132   	; 0x546 <xPortStartScheduler>
 9b2:	0f 91       	pop	r16
 9b4:	ff 90       	pop	r15
 9b6:	ef 90       	pop	r14
 9b8:	df 90       	pop	r13
 9ba:	cf 90       	pop	r12
 9bc:	bf 90       	pop	r11
 9be:	af 90       	pop	r10
 9c0:	08 95       	ret

000009c2 <vTaskSuspendAll>:
 9c2:	80 91 fe 06 	lds	r24, 0x06FE
 9c6:	8f 5f       	subi	r24, 0xFF	; 255
 9c8:	80 93 fe 06 	sts	0x06FE, r24
 9cc:	08 95       	ret

000009ce <vTaskIncrementTick>:
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	80 91 fe 06 	lds	r24, 0x06FE
 9da:	81 11       	cpse	r24, r1
 9dc:	af c0       	rjmp	.+350    	; 0xb3c <vTaskIncrementTick+0x16e>
 9de:	80 91 02 07 	lds	r24, 0x0702
 9e2:	90 91 03 07 	lds	r25, 0x0703
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	90 93 03 07 	sts	0x0703, r25
 9ec:	80 93 02 07 	sts	0x0702, r24
 9f0:	80 91 02 07 	lds	r24, 0x0702
 9f4:	90 91 03 07 	lds	r25, 0x0703
 9f8:	89 2b       	or	r24, r25
 9fa:	99 f5       	brne	.+102    	; 0xa62 <vTaskIncrementTick+0x94>
 9fc:	80 91 1a 07 	lds	r24, 0x071A
 a00:	90 91 1b 07 	lds	r25, 0x071B
 a04:	20 91 18 07 	lds	r18, 0x0718
 a08:	30 91 19 07 	lds	r19, 0x0719
 a0c:	30 93 1b 07 	sts	0x071B, r19
 a10:	20 93 1a 07 	sts	0x071A, r18
 a14:	90 93 19 07 	sts	0x0719, r25
 a18:	80 93 18 07 	sts	0x0718, r24
 a1c:	80 91 fb 06 	lds	r24, 0x06FB
 a20:	8f 5f       	subi	r24, 0xFF	; 255
 a22:	80 93 fb 06 	sts	0x06FB, r24
 a26:	e0 91 1a 07 	lds	r30, 0x071A
 a2a:	f0 91 1b 07 	lds	r31, 0x071B
 a2e:	80 81       	ld	r24, Z
 a30:	81 11       	cpse	r24, r1
 a32:	07 c0       	rjmp	.+14     	; 0xa42 <vTaskIncrementTick+0x74>
 a34:	8f ef       	ldi	r24, 0xFF	; 255
 a36:	9f ef       	ldi	r25, 0xFF	; 255
 a38:	90 93 08 01 	sts	0x0108, r25
 a3c:	80 93 07 01 	sts	0x0107, r24
 a40:	10 c0       	rjmp	.+32     	; 0xa62 <vTaskIncrementTick+0x94>
 a42:	e0 91 1a 07 	lds	r30, 0x071A
 a46:	f0 91 1b 07 	lds	r31, 0x071B
 a4a:	05 80       	ldd	r0, Z+5	; 0x05
 a4c:	f6 81       	ldd	r31, Z+6	; 0x06
 a4e:	e0 2d       	mov	r30, r0
 a50:	06 80       	ldd	r0, Z+6	; 0x06
 a52:	f7 81       	ldd	r31, Z+7	; 0x07
 a54:	e0 2d       	mov	r30, r0
 a56:	82 81       	ldd	r24, Z+2	; 0x02
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	90 93 08 01 	sts	0x0108, r25
 a5e:	80 93 07 01 	sts	0x0107, r24
 a62:	20 91 02 07 	lds	r18, 0x0702
 a66:	30 91 03 07 	lds	r19, 0x0703
 a6a:	80 91 07 01 	lds	r24, 0x0107
 a6e:	90 91 08 01 	lds	r25, 0x0108
 a72:	28 17       	cp	r18, r24
 a74:	39 07       	cpc	r19, r25
 a76:	08 f4       	brcc	.+2      	; 0xa7a <vTaskIncrementTick+0xac>
 a78:	66 c0       	rjmp	.+204    	; 0xb46 <vTaskIncrementTick+0x178>
 a7a:	e0 91 1a 07 	lds	r30, 0x071A
 a7e:	f0 91 1b 07 	lds	r31, 0x071B
 a82:	80 81       	ld	r24, Z
 a84:	88 23       	and	r24, r24
 a86:	99 f0       	breq	.+38     	; 0xaae <vTaskIncrementTick+0xe0>
 a88:	e0 91 1a 07 	lds	r30, 0x071A
 a8c:	f0 91 1b 07 	lds	r31, 0x071B
 a90:	05 80       	ldd	r0, Z+5	; 0x05
 a92:	f6 81       	ldd	r31, Z+6	; 0x06
 a94:	e0 2d       	mov	r30, r0
 a96:	c6 81       	ldd	r28, Z+6	; 0x06
 a98:	d7 81       	ldd	r29, Z+7	; 0x07
 a9a:	8a 81       	ldd	r24, Y+2	; 0x02
 a9c:	9b 81       	ldd	r25, Y+3	; 0x03
 a9e:	20 91 02 07 	lds	r18, 0x0702
 aa2:	30 91 03 07 	lds	r19, 0x0703
 aa6:	28 17       	cp	r18, r24
 aa8:	39 07       	cpc	r19, r25
 aaa:	f8 f4       	brcc	.+62     	; 0xaea <vTaskIncrementTick+0x11c>
 aac:	19 c0       	rjmp	.+50     	; 0xae0 <vTaskIncrementTick+0x112>
 aae:	8f ef       	ldi	r24, 0xFF	; 255
 ab0:	9f ef       	ldi	r25, 0xFF	; 255
 ab2:	90 93 08 01 	sts	0x0108, r25
 ab6:	80 93 07 01 	sts	0x0107, r24
 aba:	45 c0       	rjmp	.+138    	; 0xb46 <vTaskIncrementTick+0x178>
 abc:	e0 91 1a 07 	lds	r30, 0x071A
 ac0:	f0 91 1b 07 	lds	r31, 0x071B
 ac4:	05 80       	ldd	r0, Z+5	; 0x05
 ac6:	f6 81       	ldd	r31, Z+6	; 0x06
 ac8:	e0 2d       	mov	r30, r0
 aca:	c6 81       	ldd	r28, Z+6	; 0x06
 acc:	d7 81       	ldd	r29, Z+7	; 0x07
 ace:	8a 81       	ldd	r24, Y+2	; 0x02
 ad0:	9b 81       	ldd	r25, Y+3	; 0x03
 ad2:	20 91 02 07 	lds	r18, 0x0702
 ad6:	30 91 03 07 	lds	r19, 0x0703
 ada:	28 17       	cp	r18, r24
 adc:	39 07       	cpc	r19, r25
 ade:	28 f4       	brcc	.+10     	; 0xaea <vTaskIncrementTick+0x11c>
 ae0:	90 93 08 01 	sts	0x0108, r25
 ae4:	80 93 07 01 	sts	0x0107, r24
 ae8:	2e c0       	rjmp	.+92     	; 0xb46 <vTaskIncrementTick+0x178>
 aea:	8e 01       	movw	r16, r28
 aec:	0e 5f       	subi	r16, 0xFE	; 254
 aee:	1f 4f       	sbci	r17, 0xFF	; 255
 af0:	c8 01       	movw	r24, r16
 af2:	83 db       	rcall	.-2298   	; 0x1fa <vListRemove>
 af4:	8c 89       	ldd	r24, Y+20	; 0x14
 af6:	9d 89       	ldd	r25, Y+21	; 0x15
 af8:	89 2b       	or	r24, r25
 afa:	19 f0       	breq	.+6      	; 0xb02 <vTaskIncrementTick+0x134>
 afc:	ce 01       	movw	r24, r28
 afe:	0c 96       	adiw	r24, 0x0c	; 12
 b00:	7c db       	rcall	.-2312   	; 0x1fa <vListRemove>
 b02:	2e 89       	ldd	r18, Y+22	; 0x16
 b04:	80 91 00 07 	lds	r24, 0x0700
 b08:	82 17       	cp	r24, r18
 b0a:	10 f4       	brcc	.+4      	; 0xb10 <vTaskIncrementTick+0x142>
 b0c:	20 93 00 07 	sts	0x0700, r18
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	c9 01       	movw	r24, r18
 b14:	88 0f       	add	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	88 0f       	add	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	88 0f       	add	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	82 0f       	add	r24, r18
 b22:	93 1f       	adc	r25, r19
 b24:	b8 01       	movw	r22, r16
 b26:	82 5d       	subi	r24, 0xD2	; 210
 b28:	98 4f       	sbci	r25, 0xF8	; 248
 b2a:	05 db       	rcall	.-2550   	; 0x136 <vListInsertEnd>
 b2c:	e0 91 1a 07 	lds	r30, 0x071A
 b30:	f0 91 1b 07 	lds	r31, 0x071B
 b34:	80 81       	ld	r24, Z
 b36:	81 11       	cpse	r24, r1
 b38:	c1 cf       	rjmp	.-126    	; 0xabc <vTaskIncrementTick+0xee>
 b3a:	b9 cf       	rjmp	.-142    	; 0xaae <vTaskIncrementTick+0xe0>
 b3c:	80 91 fd 06 	lds	r24, 0x06FD
 b40:	8f 5f       	subi	r24, 0xFF	; 255
 b42:	80 93 fd 06 	sts	0x06FD, r24
 b46:	df 91       	pop	r29
 b48:	cf 91       	pop	r28
 b4a:	1f 91       	pop	r17
 b4c:	0f 91       	pop	r16
 b4e:	08 95       	ret

00000b50 <xTaskResumeAll>:
 b50:	cf 92       	push	r12
 b52:	df 92       	push	r13
 b54:	ef 92       	push	r14
 b56:	ff 92       	push	r15
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	f8 94       	cli
 b64:	0f 92       	push	r0
 b66:	80 91 fe 06 	lds	r24, 0x06FE
 b6a:	81 50       	subi	r24, 0x01	; 1
 b6c:	80 93 fe 06 	sts	0x06FE, r24
 b70:	80 91 fe 06 	lds	r24, 0x06FE
 b74:	81 11       	cpse	r24, r1
 b76:	5f c0       	rjmp	.+190    	; 0xc36 <xTaskResumeAll+0xe6>
 b78:	80 91 04 07 	lds	r24, 0x0704
 b7c:	81 11       	cpse	r24, r1
 b7e:	2f c0       	rjmp	.+94     	; 0xbde <xTaskResumeAll+0x8e>
 b80:	5d c0       	rjmp	.+186    	; 0xc3c <xTaskResumeAll+0xec>
 b82:	d7 01       	movw	r26, r14
 b84:	15 96       	adiw	r26, 0x05	; 5
 b86:	ed 91       	ld	r30, X+
 b88:	fc 91       	ld	r31, X
 b8a:	16 97       	sbiw	r26, 0x06	; 6
 b8c:	c6 81       	ldd	r28, Z+6	; 0x06
 b8e:	d7 81       	ldd	r29, Z+7	; 0x07
 b90:	ce 01       	movw	r24, r28
 b92:	0c 96       	adiw	r24, 0x0c	; 12
 b94:	32 db       	rcall	.-2460   	; 0x1fa <vListRemove>
 b96:	8e 01       	movw	r16, r28
 b98:	0e 5f       	subi	r16, 0xFE	; 254
 b9a:	1f 4f       	sbci	r17, 0xFF	; 255
 b9c:	c8 01       	movw	r24, r16
 b9e:	2d db       	rcall	.-2470   	; 0x1fa <vListRemove>
 ba0:	2e 89       	ldd	r18, Y+22	; 0x16
 ba2:	80 91 00 07 	lds	r24, 0x0700
 ba6:	82 17       	cp	r24, r18
 ba8:	10 f4       	brcc	.+4      	; 0xbae <xTaskResumeAll+0x5e>
 baa:	20 93 00 07 	sts	0x0700, r18
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	c9 01       	movw	r24, r18
 bb2:	88 0f       	add	r24, r24
 bb4:	99 1f       	adc	r25, r25
 bb6:	88 0f       	add	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	88 0f       	add	r24, r24
 bbc:	99 1f       	adc	r25, r25
 bbe:	82 0f       	add	r24, r18
 bc0:	93 1f       	adc	r25, r19
 bc2:	b8 01       	movw	r22, r16
 bc4:	82 5d       	subi	r24, 0xD2	; 210
 bc6:	98 4f       	sbci	r25, 0xF8	; 248
 bc8:	b6 da       	rcall	.-2708   	; 0x136 <vListInsertEnd>
 bca:	e0 91 52 07 	lds	r30, 0x0752
 bce:	f0 91 53 07 	lds	r31, 0x0753
 bd2:	9e 89       	ldd	r25, Y+22	; 0x16
 bd4:	86 89       	ldd	r24, Z+22	; 0x16
 bd6:	98 17       	cp	r25, r24
 bd8:	58 f0       	brcs	.+22     	; 0xbf0 <xTaskResumeAll+0xa0>
 bda:	dc 2c       	mov	r13, r12
 bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <xTaskResumeAll+0xa0>
 bde:	d1 2c       	mov	r13, r1
 be0:	0f 2e       	mov	r0, r31
 be2:	ff e0       	ldi	r31, 0x0F	; 15
 be4:	ef 2e       	mov	r14, r31
 be6:	f7 e0       	ldi	r31, 0x07	; 7
 be8:	ff 2e       	mov	r15, r31
 bea:	f0 2d       	mov	r31, r0
 bec:	cc 24       	eor	r12, r12
 bee:	c3 94       	inc	r12
 bf0:	f7 01       	movw	r30, r14
 bf2:	80 81       	ld	r24, Z
 bf4:	81 11       	cpse	r24, r1
 bf6:	c5 cf       	rjmp	.-118    	; 0xb82 <xTaskResumeAll+0x32>
 bf8:	80 91 fd 06 	lds	r24, 0x06FD
 bfc:	88 23       	and	r24, r24
 bfe:	79 f0       	breq	.+30     	; 0xc1e <xTaskResumeAll+0xce>
 c00:	80 91 fd 06 	lds	r24, 0x06FD
 c04:	88 23       	and	r24, r24
 c06:	91 f0       	breq	.+36     	; 0xc2c <xTaskResumeAll+0xdc>
 c08:	e2 de       	rcall	.-572    	; 0x9ce <vTaskIncrementTick>
 c0a:	80 91 fd 06 	lds	r24, 0x06FD
 c0e:	81 50       	subi	r24, 0x01	; 1
 c10:	80 93 fd 06 	sts	0x06FD, r24
 c14:	80 91 fd 06 	lds	r24, 0x06FD
 c18:	81 11       	cpse	r24, r1
 c1a:	f6 cf       	rjmp	.-20     	; 0xc08 <xTaskResumeAll+0xb8>
 c1c:	07 c0       	rjmp	.+14     	; 0xc2c <xTaskResumeAll+0xdc>
 c1e:	f1 e0       	ldi	r31, 0x01	; 1
 c20:	df 16       	cp	r13, r31
 c22:	21 f0       	breq	.+8      	; 0xc2c <xTaskResumeAll+0xdc>
 c24:	80 91 fc 06 	lds	r24, 0x06FC
 c28:	81 30       	cpi	r24, 0x01	; 1
 c2a:	39 f4       	brne	.+14     	; 0xc3a <xTaskResumeAll+0xea>
 c2c:	10 92 fc 06 	sts	0x06FC, r1
 c30:	c4 dc       	rcall	.-1656   	; 0x5ba <vPortYield>
 c32:	81 e0       	ldi	r24, 0x01	; 1
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <xTaskResumeAll+0xec>
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	01 c0       	rjmp	.+2      	; 0xc3c <xTaskResumeAll+0xec>
 c3a:	80 e0       	ldi	r24, 0x00	; 0
 c3c:	0f 90       	pop	r0
 c3e:	0f be       	out	0x3f, r0	; 63
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	1f 91       	pop	r17
 c46:	0f 91       	pop	r16
 c48:	ff 90       	pop	r15
 c4a:	ef 90       	pop	r14
 c4c:	df 90       	pop	r13
 c4e:	cf 90       	pop	r12
 c50:	08 95       	ret

00000c52 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 c52:	cf 93       	push	r28
 c54:	df 93       	push	r29
 c56:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 c58:	89 2b       	or	r24, r25
 c5a:	91 f0       	breq	.+36     	; 0xc80 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 c5c:	b2 de       	rcall	.-668    	; 0x9c2 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 c5e:	80 91 02 07 	lds	r24, 0x0702
 c62:	90 91 03 07 	lds	r25, 0x0703
 c66:	c8 0f       	add	r28, r24
 c68:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c6a:	80 91 52 07 	lds	r24, 0x0752
 c6e:	90 91 53 07 	lds	r25, 0x0753
 c72:	02 96       	adiw	r24, 0x02	; 2
 c74:	c2 da       	rcall	.-2684   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 c76:	ce 01       	movw	r24, r28
 c78:	53 dd       	rcall	.-1370   	; 0x720 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 c7a:	6a df       	rcall	.-300    	; 0xb50 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c7c:	81 11       	cpse	r24, r1
 c7e:	01 c0       	rjmp	.+2      	; 0xc82 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 c80:	9c dc       	rcall	.-1736   	; 0x5ba <vPortYield>
		}
	}
 c82:	df 91       	pop	r29
 c84:	cf 91       	pop	r28
 c86:	08 95       	ret

00000c88 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c88:	0f 2e       	mov	r0, r31
 c8a:	f6 e0       	ldi	r31, 0x06	; 6
 c8c:	ef 2e       	mov	r14, r31
 c8e:	f7 e0       	ldi	r31, 0x07	; 7
 c90:	ff 2e       	mov	r15, r31
 c92:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c94:	ce e2       	ldi	r28, 0x2E	; 46
 c96:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c98:	80 91 05 07 	lds	r24, 0x0705
 c9c:	88 23       	and	r24, r24
 c9e:	29 f1       	breq	.+74     	; 0xcea <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 ca0:	90 de       	rcall	.-736    	; 0x9c2 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 ca2:	d7 01       	movw	r26, r14
 ca4:	1c 91       	ld	r17, X
			xTaskResumeAll();
 ca6:	54 df       	rcall	.-344    	; 0xb50 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 ca8:	11 23       	and	r17, r17
 caa:	f9 f0       	breq	.+62     	; 0xcea <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 cac:	0f b6       	in	r0, 0x3f	; 63
 cae:	f8 94       	cli
 cb0:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 cb2:	d7 01       	movw	r26, r14
 cb4:	15 96       	adiw	r26, 0x05	; 5
 cb6:	ed 91       	ld	r30, X+
 cb8:	fc 91       	ld	r31, X
 cba:	16 97       	sbiw	r26, 0x06	; 6
 cbc:	06 81       	ldd	r16, Z+6	; 0x06
 cbe:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 cc0:	c8 01       	movw	r24, r16
 cc2:	02 96       	adiw	r24, 0x02	; 2
 cc4:	9a da       	rcall	.-2764   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 cc6:	80 91 04 07 	lds	r24, 0x0704
 cca:	81 50       	subi	r24, 0x01	; 1
 ccc:	80 93 04 07 	sts	0x0704, r24
					--uxTasksDeleted;
 cd0:	80 91 05 07 	lds	r24, 0x0705
 cd4:	81 50       	subi	r24, 0x01	; 1
 cd6:	80 93 05 07 	sts	0x0705, r24
				}
				taskEXIT_CRITICAL();
 cda:	0f 90       	pop	r0
 cdc:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 cde:	f8 01       	movw	r30, r16
 ce0:	87 89       	ldd	r24, Z+23	; 0x17
 ce2:	90 8d       	ldd	r25, Z+24	; 0x18
 ce4:	15 da       	rcall	.-3030   	; 0x110 <vPortFree>
		vPortFree( pxTCB );
 ce6:	c8 01       	movw	r24, r16
 ce8:	13 da       	rcall	.-3034   	; 0x110 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 cea:	88 81       	ld	r24, Y
 cec:	82 30       	cpi	r24, 0x02	; 2
 cee:	a0 f2       	brcs	.-88     	; 0xc98 <prvIdleTask+0x10>
			{
				taskYIELD();
 cf0:	64 dc       	rcall	.-1848   	; 0x5ba <vPortYield>
 cf2:	d2 cf       	rjmp	.-92     	; 0xc98 <prvIdleTask+0x10>

00000cf4 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 cf4:	80 91 fe 06 	lds	r24, 0x06FE
 cf8:	81 11       	cpse	r24, r1
 cfa:	13 c0       	rjmp	.+38     	; 0xd22 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cfc:	80 91 00 07 	lds	r24, 0x0700
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	fc 01       	movw	r30, r24
 d04:	ee 0f       	add	r30, r30
 d06:	ff 1f       	adc	r31, r31
 d08:	ee 0f       	add	r30, r30
 d0a:	ff 1f       	adc	r31, r31
 d0c:	ee 0f       	add	r30, r30
 d0e:	ff 1f       	adc	r31, r31
 d10:	8e 0f       	add	r24, r30
 d12:	9f 1f       	adc	r25, r31
 d14:	fc 01       	movw	r30, r24
 d16:	e2 5d       	subi	r30, 0xD2	; 210
 d18:	f8 4f       	sbci	r31, 0xF8	; 248
 d1a:	80 81       	ld	r24, Z
 d1c:	88 23       	and	r24, r24
 d1e:	29 f0       	breq	.+10     	; 0xd2a <vTaskSwitchContext+0x36>
 d20:	1b c0       	rjmp	.+54     	; 0xd58 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 d22:	81 e0       	ldi	r24, 0x01	; 1
 d24:	80 93 fc 06 	sts	0x06FC, r24
 d28:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 d2a:	80 91 00 07 	lds	r24, 0x0700
 d2e:	81 50       	subi	r24, 0x01	; 1
 d30:	80 93 00 07 	sts	0x0700, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d34:	80 91 00 07 	lds	r24, 0x0700
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	fc 01       	movw	r30, r24
 d3c:	ee 0f       	add	r30, r30
 d3e:	ff 1f       	adc	r31, r31
 d40:	ee 0f       	add	r30, r30
 d42:	ff 1f       	adc	r31, r31
 d44:	ee 0f       	add	r30, r30
 d46:	ff 1f       	adc	r31, r31
 d48:	8e 0f       	add	r24, r30
 d4a:	9f 1f       	adc	r25, r31
 d4c:	fc 01       	movw	r30, r24
 d4e:	e2 5d       	subi	r30, 0xD2	; 210
 d50:	f8 4f       	sbci	r31, 0xF8	; 248
 d52:	80 81       	ld	r24, Z
 d54:	88 23       	and	r24, r24
 d56:	49 f3       	breq	.-46     	; 0xd2a <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 d58:	80 91 00 07 	lds	r24, 0x0700
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	9c 01       	movw	r18, r24
 d60:	22 0f       	add	r18, r18
 d62:	33 1f       	adc	r19, r19
 d64:	22 0f       	add	r18, r18
 d66:	33 1f       	adc	r19, r19
 d68:	22 0f       	add	r18, r18
 d6a:	33 1f       	adc	r19, r19
 d6c:	28 0f       	add	r18, r24
 d6e:	39 1f       	adc	r19, r25
 d70:	d9 01       	movw	r26, r18
 d72:	a2 5d       	subi	r26, 0xD2	; 210
 d74:	b8 4f       	sbci	r27, 0xF8	; 248
 d76:	11 96       	adiw	r26, 0x01	; 1
 d78:	ed 91       	ld	r30, X+
 d7a:	fc 91       	ld	r31, X
 d7c:	12 97       	sbiw	r26, 0x02	; 2
 d7e:	02 80       	ldd	r0, Z+2	; 0x02
 d80:	f3 81       	ldd	r31, Z+3	; 0x03
 d82:	e0 2d       	mov	r30, r0
 d84:	12 96       	adiw	r26, 0x02	; 2
 d86:	fc 93       	st	X, r31
 d88:	ee 93       	st	-X, r30
 d8a:	11 97       	sbiw	r26, 0x01	; 1
 d8c:	2f 5c       	subi	r18, 0xCF	; 207
 d8e:	38 4f       	sbci	r19, 0xF8	; 248
 d90:	e2 17       	cp	r30, r18
 d92:	f3 07       	cpc	r31, r19
 d94:	29 f4       	brne	.+10     	; 0xda0 <vTaskSwitchContext+0xac>
 d96:	22 81       	ldd	r18, Z+2	; 0x02
 d98:	33 81       	ldd	r19, Z+3	; 0x03
 d9a:	fd 01       	movw	r30, r26
 d9c:	32 83       	std	Z+2, r19	; 0x02
 d9e:	21 83       	std	Z+1, r18	; 0x01
 da0:	fc 01       	movw	r30, r24
 da2:	ee 0f       	add	r30, r30
 da4:	ff 1f       	adc	r31, r31
 da6:	ee 0f       	add	r30, r30
 da8:	ff 1f       	adc	r31, r31
 daa:	ee 0f       	add	r30, r30
 dac:	ff 1f       	adc	r31, r31
 dae:	8e 0f       	add	r24, r30
 db0:	9f 1f       	adc	r25, r31
 db2:	fc 01       	movw	r30, r24
 db4:	e2 5d       	subi	r30, 0xD2	; 210
 db6:	f8 4f       	sbci	r31, 0xF8	; 248
 db8:	01 80       	ldd	r0, Z+1	; 0x01
 dba:	f2 81       	ldd	r31, Z+2	; 0x02
 dbc:	e0 2d       	mov	r30, r0
 dbe:	86 81       	ldd	r24, Z+6	; 0x06
 dc0:	97 81       	ldd	r25, Z+7	; 0x07
 dc2:	90 93 53 07 	sts	0x0753, r25
 dc6:	80 93 52 07 	sts	0x0752, r24
 dca:	08 95       	ret

00000dcc <memset>:
 dcc:	dc 01       	movw	r26, r24
 dce:	01 c0       	rjmp	.+2      	; 0xdd2 <memset+0x6>
 dd0:	6d 93       	st	X+, r22
 dd2:	41 50       	subi	r20, 0x01	; 1
 dd4:	50 40       	sbci	r21, 0x00	; 0
 dd6:	e0 f7       	brcc	.-8      	; 0xdd0 <memset+0x4>
 dd8:	08 95       	ret

00000dda <strncpy>:
 dda:	fb 01       	movw	r30, r22
 ddc:	dc 01       	movw	r26, r24
 dde:	41 50       	subi	r20, 0x01	; 1
 de0:	50 40       	sbci	r21, 0x00	; 0
 de2:	48 f0       	brcs	.+18     	; 0xdf6 <strncpy+0x1c>
 de4:	01 90       	ld	r0, Z+
 de6:	0d 92       	st	X+, r0
 de8:	00 20       	and	r0, r0
 dea:	c9 f7       	brne	.-14     	; 0xdde <strncpy+0x4>
 dec:	01 c0       	rjmp	.+2      	; 0xdf0 <strncpy+0x16>
 dee:	1d 92       	st	X+, r1
 df0:	41 50       	subi	r20, 0x01	; 1
 df2:	50 40       	sbci	r21, 0x00	; 0
 df4:	e0 f7       	brcc	.-8      	; 0xdee <strncpy+0x14>
 df6:	08 95       	ret

00000df8 <_exit>:
 df8:	f8 94       	cli

00000dfa <__stop_program>:
 dfa:	ff cf       	rjmp	.-2      	; 0xdfa <__stop_program>
