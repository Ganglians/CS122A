
Juan_Chavez_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003e0  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000033d  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e8  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bf  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000236  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026e  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	09 c1       	rjmp	.+530    	; 0x248 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	34 d1       	rcall	.+616    	; 0x32c <main>
  c4:	8b c1       	rjmp	.+790    	; 0x3dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <toggleD0>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
	tasksPeriodCntDown = tasksPeriodGCD;
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	69 f0       	breq	.+26     	; 0xe6 <toggleD0+0x1e>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	11 f0       	breq	.+4      	; 0xd6 <toggleD0+0xe>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	81 f4       	brne	.+32     	; 0xf6 <toggleD0+0x2e>
  d6:	80 91 05 01 	lds	r24, 0x0105
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 93 05 01 	sts	0x0105, r24
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0a c0       	rjmp	.+20     	; 0xfa <toggleD0+0x32>
  e6:	80 91 05 01 	lds	r24, 0x0105
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	80 93 05 01 	sts	0x0105, r24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <toggleD0+0x32>
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	9f ef       	ldi	r25, 0xFF	; 255
  fa:	20 91 05 01 	lds	r18, 0x0105
  fe:	2b b9       	out	0x0b, r18	; 11
 100:	08 95       	ret

00000102 <toggleD2>:
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	69 f0       	breq	.+26     	; 0x120 <toggleD2+0x1e>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	11 f0       	breq	.+4      	; 0x110 <toggleD2+0xe>
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	81 f4       	brne	.+32     	; 0x130 <toggleD2+0x2e>
 110:	80 91 05 01 	lds	r24, 0x0105
 114:	84 60       	ori	r24, 0x04	; 4
 116:	80 93 05 01 	sts	0x0105, r24
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0a c0       	rjmp	.+20     	; 0x134 <toggleD2+0x32>
 120:	80 91 05 01 	lds	r24, 0x0105
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	80 93 05 01 	sts	0x0105, r24
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <toggleD2+0x32>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	9f ef       	ldi	r25, 0xFF	; 255
 134:	20 91 05 01 	lds	r18, 0x0105
 138:	2b b9       	out	0x0b, r18	; 11
 13a:	08 95       	ret

0000013c <toggleD4>:
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	69 f0       	breq	.+26     	; 0x15a <toggleD4+0x1e>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	91 05       	cpc	r25, r1
 144:	11 f0       	breq	.+4      	; 0x14a <toggleD4+0xe>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	81 f4       	brne	.+32     	; 0x16a <toggleD4+0x2e>
 14a:	80 91 05 01 	lds	r24, 0x0105
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	80 93 05 01 	sts	0x0105, r24
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0a c0       	rjmp	.+20     	; 0x16e <toggleD4+0x32>
 15a:	80 91 05 01 	lds	r24, 0x0105
 15e:	8f 7e       	andi	r24, 0xEF	; 239
 160:	80 93 05 01 	sts	0x0105, r24
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <toggleD4+0x32>
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	9f ef       	ldi	r25, 0xFF	; 255
 16e:	20 91 05 01 	lds	r18, 0x0105
 172:	2b b9       	out	0x0b, r18	; 11
 174:	08 95       	ret

00000176 <TimerISR>:
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	10 92 04 01 	sts	0x0104, r1
 188:	80 91 06 01 	lds	r24, 0x0106
 18c:	88 23       	and	r24, r24
 18e:	09 f4       	brne	.+2      	; 0x192 <TimerISR+0x1c>
 190:	53 c0       	rjmp	.+166    	; 0x238 <TimerISR+0xc2>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	1b e0       	ldi	r17, 0x0B	; 11
 196:	c0 91 0b 01 	lds	r28, 0x010B
 19a:	d0 91 0c 01 	lds	r29, 0x010C
 19e:	18 9f       	mul	r17, r24
 1a0:	c0 0d       	add	r28, r0
 1a2:	d1 1d       	adc	r29, r1
 1a4:	11 24       	eor	r1, r1
 1a6:	4d 81       	ldd	r20, Y+5	; 0x05
 1a8:	5e 81       	ldd	r21, Y+6	; 0x06
 1aa:	6f 81       	ldd	r22, Y+7	; 0x07
 1ac:	78 85       	ldd	r23, Y+8	; 0x08
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	9a 81       	ldd	r25, Y+2	; 0x02
 1b2:	ab 81       	ldd	r26, Y+3	; 0x03
 1b4:	bc 81       	ldd	r27, Y+4	; 0x04
 1b6:	48 17       	cp	r20, r24
 1b8:	59 07       	cpc	r21, r25
 1ba:	6a 07       	cpc	r22, r26
 1bc:	7b 07       	cpc	r23, r27
 1be:	b0 f0       	brcs	.+44     	; 0x1ec <TimerISR+0x76>
 1c0:	88 81       	ld	r24, Y
 1c2:	e9 85       	ldd	r30, Y+9	; 0x09
 1c4:	fa 85       	ldd	r31, Y+10	; 0x0a
 1c6:	08 2e       	mov	r0, r24
 1c8:	00 0c       	add	r0, r0
 1ca:	99 0b       	sbc	r25, r25
 1cc:	09 95       	icall
 1ce:	88 83       	st	Y, r24
 1d0:	80 91 04 01 	lds	r24, 0x0104
 1d4:	e0 91 0b 01 	lds	r30, 0x010B
 1d8:	f0 91 0c 01 	lds	r31, 0x010C
 1dc:	18 9f       	mul	r17, r24
 1de:	e0 0d       	add	r30, r0
 1e0:	f1 1d       	adc	r31, r1
 1e2:	11 24       	eor	r1, r1
 1e4:	15 82       	std	Z+5, r1	; 0x05
 1e6:	16 82       	std	Z+6, r1	; 0x06
 1e8:	17 82       	std	Z+7, r1	; 0x07
 1ea:	10 86       	std	Z+8, r1	; 0x08
 1ec:	80 91 04 01 	lds	r24, 0x0104
 1f0:	e0 91 0b 01 	lds	r30, 0x010B
 1f4:	f0 91 0c 01 	lds	r31, 0x010C
 1f8:	18 9f       	mul	r17, r24
 1fa:	e0 0d       	add	r30, r0
 1fc:	f1 1d       	adc	r31, r1
 1fe:	11 24       	eor	r1, r1
 200:	c5 80       	ldd	r12, Z+5	; 0x05
 202:	d6 80       	ldd	r13, Z+6	; 0x06
 204:	e7 80       	ldd	r14, Z+7	; 0x07
 206:	f0 84       	ldd	r15, Z+8	; 0x08
 208:	40 91 00 01 	lds	r20, 0x0100
 20c:	50 91 01 01 	lds	r21, 0x0101
 210:	60 91 02 01 	lds	r22, 0x0102
 214:	70 91 03 01 	lds	r23, 0x0103
 218:	4c 0d       	add	r20, r12
 21a:	5d 1d       	adc	r21, r13
 21c:	6e 1d       	adc	r22, r14
 21e:	7f 1d       	adc	r23, r15
 220:	45 83       	std	Z+5, r20	; 0x05
 222:	56 83       	std	Z+6, r21	; 0x06
 224:	67 83       	std	Z+7, r22	; 0x07
 226:	70 87       	std	Z+8, r23	; 0x08
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	80 93 04 01 	sts	0x0104, r24
 22e:	90 91 06 01 	lds	r25, 0x0106
 232:	89 17       	cp	r24, r25
 234:	08 f4       	brcc	.+2      	; 0x238 <TimerISR+0xc2>
 236:	af cf       	rjmp	.-162    	; 0x196 <TimerISR+0x20>
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	08 95       	ret

00000248 <__vector_13>:
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	0b b6       	in	r0, 0x3b	; 59
 254:	0f 92       	push	r0
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
 26e:	80 91 07 01 	lds	r24, 0x0107
 272:	90 91 08 01 	lds	r25, 0x0108
 276:	a0 91 09 01 	lds	r26, 0x0109
 27a:	b0 91 0a 01 	lds	r27, 0x010A
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	a1 09       	sbc	r26, r1
 282:	b1 09       	sbc	r27, r1
 284:	80 93 07 01 	sts	0x0107, r24
 288:	90 93 08 01 	sts	0x0108, r25
 28c:	a0 93 09 01 	sts	0x0109, r26
 290:	b0 93 0a 01 	sts	0x010A, r27
 294:	89 2b       	or	r24, r25
 296:	8a 2b       	or	r24, r26
 298:	8b 2b       	or	r24, r27
 29a:	89 f4       	brne	.+34     	; 0x2be <__vector_13+0x76>
 29c:	6c df       	rcall	.-296    	; 0x176 <TimerISR>
 29e:	80 91 00 01 	lds	r24, 0x0100
 2a2:	90 91 01 01 	lds	r25, 0x0101
 2a6:	a0 91 02 01 	lds	r26, 0x0102
 2aa:	b0 91 03 01 	lds	r27, 0x0103
 2ae:	80 93 07 01 	sts	0x0107, r24
 2b2:	90 93 08 01 	sts	0x0108, r25
 2b6:	a0 93 09 01 	sts	0x0109, r26
 2ba:	b0 93 0a 01 	sts	0x010A, r27
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0b be       	out	0x3b, r0	; 59
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 2e4:	8b e0       	ldi	r24, 0x0B	; 11
 2e6:	80 93 81 00 	sts	0x0081, r24
	// Thus TCCR1B = 00001011 or 0x0B
	// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 2ea:	8d e7       	ldi	r24, 0x7D	; 125
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 89 00 	sts	0x0089, r25
 2f2:	80 93 88 00 	sts	0x0088, r24
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register

	//#if defined (__AVR_ATmega1284__)
	TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	80 93 6f 00 	sts	0x006F, r24
	//#else
	//TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
	//#endif

	// Initialize avr counter
	TCNT1 = 0;
 2fc:	10 92 85 00 	sts	0x0085, r1
 300:	10 92 84 00 	sts	0x0084, r1

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 304:	80 91 00 01 	lds	r24, 0x0100
 308:	90 91 01 01 	lds	r25, 0x0101
 30c:	a0 91 02 01 	lds	r26, 0x0102
 310:	b0 91 03 01 	lds	r27, 0x0103
 314:	80 93 07 01 	sts	0x0107, r24
 318:	90 93 08 01 	sts	0x0108, r25
 31c:	a0 93 09 01 	sts	0x0109, r26
 320:	b0 93 0a 01 	sts	0x010A, r27

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 324:	8f b7       	in	r24, 0x3f	; 63
 326:	80 68       	ori	r24, 0x80	; 128
 328:	8f bf       	out	0x3f, r24	; 63
 32a:	08 95       	ret

0000032c <main>:
	
	PORTD = tmpD;
	return state;
}

int main(void) {
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	a1 97       	sbiw	r28, 0x21	; 33
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF; PORTD = 0x00;
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	2a b9       	out	0x0a, r18	; 10
 344:	1b b8       	out	0x0b, r1	; 11
	
	int taskNum = 3;
	
	task function[taskNum];
	tasks = function;
 346:	ce 01       	movw	r24, r28
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	90 93 0c 01 	sts	0x010C, r25
 34e:	80 93 0b 01 	sts	0x010B, r24
	unsigned char i = 0;
	
	tasks[i].state = -1;
 352:	29 83       	std	Y+1, r18	; 0x01
	tasks[i].period = 500;
 354:	84 ef       	ldi	r24, 0xF4	; 244
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	a0 e0       	ldi	r26, 0x00	; 0
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	8a 83       	std	Y+2, r24	; 0x02
 35e:	9b 83       	std	Y+3, r25	; 0x03
 360:	ac 83       	std	Y+4, r26	; 0x04
 362:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 364:	8e 83       	std	Y+6, r24	; 0x06
 366:	9f 83       	std	Y+7, r25	; 0x07
 368:	a8 87       	std	Y+8, r26	; 0x08
 36a:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &toggleD0;
 36c:	44 e6       	ldi	r20, 0x64	; 100
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	5b 87       	std	Y+11, r21	; 0x0b
 372:	4a 87       	std	Y+10, r20	; 0x0a
	++i;
	
	tasks[i].state = -1;
 374:	2c 87       	std	Y+12, r18	; 0x0c
	tasks[i].period = 1000;
 376:	48 ee       	ldi	r20, 0xE8	; 232
 378:	53 e0       	ldi	r21, 0x03	; 3
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	4d 87       	std	Y+13, r20	; 0x0d
 380:	5e 87       	std	Y+14, r21	; 0x0e
 382:	6f 87       	std	Y+15, r22	; 0x0f
 384:	78 8b       	std	Y+16, r23	; 0x10
	tasks[i].elapsedTime = tasks[i].period;
 386:	49 8b       	std	Y+17, r20	; 0x11
 388:	5a 8b       	std	Y+18, r21	; 0x12
 38a:	6b 8b       	std	Y+19, r22	; 0x13
 38c:	7c 8b       	std	Y+20, r23	; 0x14
	tasks[i].TickFct = &toggleD2;
 38e:	41 e8       	ldi	r20, 0x81	; 129
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	5e 8b       	std	Y+22, r21	; 0x16
 394:	4d 8b       	std	Y+21, r20	; 0x15
	++i;
	
	tasks[i].state = -1;
 396:	2f 8b       	std	Y+23, r18	; 0x17
	tasks[i].period = 2500;
 398:	44 ec       	ldi	r20, 0xC4	; 196
 39a:	59 e0       	ldi	r21, 0x09	; 9
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	48 8f       	std	Y+24, r20	; 0x18
 3a2:	59 8f       	std	Y+25, r21	; 0x19
 3a4:	6a 8f       	std	Y+26, r22	; 0x1a
 3a6:	7b 8f       	std	Y+27, r23	; 0x1b
	tasks[i].elapsedTime = tasks[i].period;
 3a8:	4c 8f       	std	Y+28, r20	; 0x1c
 3aa:	5d 8f       	std	Y+29, r21	; 0x1d
 3ac:	6e 8f       	std	Y+30, r22	; 0x1e
 3ae:	7f 8f       	std	Y+31, r23	; 0x1f
	tasks[i].TickFct = &toggleD4;
 3b0:	2e e9       	ldi	r18, 0x9E	; 158
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	39 a3       	std	Y+33, r19	; 0x21
 3b6:	28 a3       	std	Y+32, r18	; 0x20
}

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 3b8:	80 93 00 01 	sts	0x0100, r24
 3bc:	90 93 01 01 	sts	0x0101, r25
 3c0:	a0 93 02 01 	sts	0x0102, r26
 3c4:	b0 93 03 01 	sts	0x0103, r27
	tasksPeriodCntDown = tasksPeriodGCD;
 3c8:	80 93 07 01 	sts	0x0107, r24
 3cc:	90 93 08 01 	sts	0x0108, r25
 3d0:	a0 93 09 01 	sts	0x0109, r26
 3d4:	b0 93 0a 01 	sts	0x010A, r27
	
	TimerSet(500);
	TimerOn();
 3d8:	85 df       	rcall	.-246    	; 0x2e4 <TimerOn>
	
    while(1){
    }
 3da:	ff cf       	rjmp	.-2      	; 0x3da <main+0xae>

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
