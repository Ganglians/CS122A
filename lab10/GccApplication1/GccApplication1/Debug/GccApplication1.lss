
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000006e2  00000796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010e  0080010e  000007a4  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000007a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000007a5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000928  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000339  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000747  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000023c  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003cd  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000068c  00000000  00000000  000022a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  0000292d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c0       	rjmp	.+356    	; 0x19a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6e d2       	rcall	.+1244   	; 0x5a0 <main>
  c4:	0c c3       	rjmp	.+1560   	; 0x6de <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	10 92 0f 01 	sts	0x010F, r1
  da:	80 91 14 01 	lds	r24, 0x0114
  de:	88 23       	and	r24, r24
  e0:	09 f4       	brne	.+2      	; 0xe4 <TimerISR+0x1c>
  e2:	53 c0       	rjmp	.+166    	; 0x18a <TimerISR+0xc2>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	1b e0       	ldi	r17, 0x0B	; 11
  e8:	c0 91 19 01 	lds	r28, 0x0119
  ec:	d0 91 1a 01 	lds	r29, 0x011A
  f0:	18 9f       	mul	r17, r24
  f2:	c0 0d       	add	r28, r0
  f4:	d1 1d       	adc	r29, r1
  f6:	11 24       	eor	r1, r1
  f8:	4d 81       	ldd	r20, Y+5	; 0x05
  fa:	5e 81       	ldd	r21, Y+6	; 0x06
  fc:	6f 81       	ldd	r22, Y+7	; 0x07
  fe:	78 85       	ldd	r23, Y+8	; 0x08
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	ab 81       	ldd	r26, Y+3	; 0x03
 106:	bc 81       	ldd	r27, Y+4	; 0x04
 108:	48 17       	cp	r20, r24
 10a:	59 07       	cpc	r21, r25
 10c:	6a 07       	cpc	r22, r26
 10e:	7b 07       	cpc	r23, r27
 110:	b0 f0       	brcs	.+44     	; 0x13e <TimerISR+0x76>
 112:	88 81       	ld	r24, Y
 114:	e9 85       	ldd	r30, Y+9	; 0x09
 116:	fa 85       	ldd	r31, Y+10	; 0x0a
 118:	08 2e       	mov	r0, r24
 11a:	00 0c       	add	r0, r0
 11c:	99 0b       	sbc	r25, r25
 11e:	09 95       	icall
 120:	88 83       	st	Y, r24
 122:	80 91 0f 01 	lds	r24, 0x010F
 126:	e0 91 19 01 	lds	r30, 0x0119
 12a:	f0 91 1a 01 	lds	r31, 0x011A
 12e:	18 9f       	mul	r17, r24
 130:	e0 0d       	add	r30, r0
 132:	f1 1d       	adc	r31, r1
 134:	11 24       	eor	r1, r1
 136:	15 82       	std	Z+5, r1	; 0x05
 138:	16 82       	std	Z+6, r1	; 0x06
 13a:	17 82       	std	Z+7, r1	; 0x07
 13c:	10 86       	std	Z+8, r1	; 0x08
 13e:	80 91 0f 01 	lds	r24, 0x010F
 142:	e0 91 19 01 	lds	r30, 0x0119
 146:	f0 91 1a 01 	lds	r31, 0x011A
 14a:	18 9f       	mul	r17, r24
 14c:	e0 0d       	add	r30, r0
 14e:	f1 1d       	adc	r31, r1
 150:	11 24       	eor	r1, r1
 152:	c5 80       	ldd	r12, Z+5	; 0x05
 154:	d6 80       	ldd	r13, Z+6	; 0x06
 156:	e7 80       	ldd	r14, Z+7	; 0x07
 158:	f0 84       	ldd	r15, Z+8	; 0x08
 15a:	40 91 02 01 	lds	r20, 0x0102
 15e:	50 91 03 01 	lds	r21, 0x0103
 162:	60 91 04 01 	lds	r22, 0x0104
 166:	70 91 05 01 	lds	r23, 0x0105
 16a:	4c 0d       	add	r20, r12
 16c:	5d 1d       	adc	r21, r13
 16e:	6e 1d       	adc	r22, r14
 170:	7f 1d       	adc	r23, r15
 172:	45 83       	std	Z+5, r20	; 0x05
 174:	56 83       	std	Z+6, r21	; 0x06
 176:	67 83       	std	Z+7, r22	; 0x07
 178:	70 87       	std	Z+8, r23	; 0x08
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 0f 01 	sts	0x010F, r24
 180:	90 91 14 01 	lds	r25, 0x0114
 184:	89 17       	cp	r24, r25
 186:	08 f4       	brcc	.+2      	; 0x18a <TimerISR+0xc2>
 188:	af cf       	rjmp	.-162    	; 0xe8 <TimerISR+0x20>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <__vector_13>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	80 91 15 01 	lds	r24, 0x0115
 1c4:	90 91 16 01 	lds	r25, 0x0116
 1c8:	a0 91 17 01 	lds	r26, 0x0117
 1cc:	b0 91 18 01 	lds	r27, 0x0118
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	a1 09       	sbc	r26, r1
 1d4:	b1 09       	sbc	r27, r1
 1d6:	80 93 15 01 	sts	0x0115, r24
 1da:	90 93 16 01 	sts	0x0116, r25
 1de:	a0 93 17 01 	sts	0x0117, r26
 1e2:	b0 93 18 01 	sts	0x0118, r27
 1e6:	89 2b       	or	r24, r25
 1e8:	8a 2b       	or	r24, r26
 1ea:	8b 2b       	or	r24, r27
 1ec:	89 f4       	brne	.+34     	; 0x210 <__vector_13+0x76>
 1ee:	6c df       	rcall	.-296    	; 0xc8 <TimerISR>
 1f0:	80 91 02 01 	lds	r24, 0x0102
 1f4:	90 91 03 01 	lds	r25, 0x0103
 1f8:	a0 91 04 01 	lds	r26, 0x0104
 1fc:	b0 91 05 01 	lds	r27, 0x0105
 200:	80 93 15 01 	sts	0x0115, r24
 204:	90 93 16 01 	sts	0x0116, r25
 208:	a0 93 17 01 	sts	0x0117, r26
 20c:	b0 93 18 01 	sts	0x0118, r27
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0b be       	out	0x3b, r0	; 59
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <TimerOn>:
 236:	8b e0       	ldi	r24, 0x0B	; 11
 238:	80 93 81 00 	sts	0x0081, r24
 23c:	8a e0       	ldi	r24, 0x0A	; 10
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 89 00 	sts	0x0089, r25
 244:	80 93 88 00 	sts	0x0088, r24
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 6f 00 	sts	0x006F, r24
 24e:	10 92 85 00 	sts	0x0085, r1
 252:	10 92 84 00 	sts	0x0084, r1
 256:	80 91 02 01 	lds	r24, 0x0102
 25a:	90 91 03 01 	lds	r25, 0x0103
 25e:	a0 91 04 01 	lds	r26, 0x0104
 262:	b0 91 05 01 	lds	r27, 0x0105
 266:	80 93 15 01 	sts	0x0115, r24
 26a:	90 93 16 01 	sts	0x0116, r25
 26e:	a0 93 17 01 	sts	0x0117, r26
 272:	b0 93 18 01 	sts	0x0118, r27
 276:	8f b7       	in	r24, 0x3f	; 63
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	8f bf       	out	0x3f, r24	; 63
 27c:	08 95       	ret

0000027e <initUSART>:
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	81 f0       	breq	.+32     	; 0x2a2 <initUSART+0x24>
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
 28c:	e2 ec       	ldi	r30, 0xC2	; 194
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	86 60       	ori	r24, 0x06	; 6
 294:	80 83       	st	Z, r24
 296:	83 e3       	ldi	r24, 0x33	; 51
 298:	80 93 c4 00 	sts	0x00C4, r24
 29c:	10 92 c5 00 	sts	0x00C5, r1
 2a0:	08 95       	ret
 2a2:	e9 ec       	ldi	r30, 0xC9	; 201
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 61       	ori	r24, 0x18	; 24
 2aa:	80 83       	st	Z, r24
 2ac:	ea ec       	ldi	r30, 0xCA	; 202
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	80 83       	st	Z, r24
 2b6:	83 e3       	ldi	r24, 0x33	; 51
 2b8:	80 93 cc 00 	sts	0x00CC, r24
 2bc:	10 92 cd 00 	sts	0x00CD, r1
 2c0:	08 95       	ret

000002c2 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	80 91 c8 00 	lds	r24, 0x00C8
 2ca:	88 23       	and	r24, r24
 2cc:	84 f0       	brlt	.+32     	; 0x2ee <USART_Flush+0x2c>
 2ce:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	88 23       	and	r24, r24
 2d6:	ac f4       	brge	.+42     	; 0x302 <USART_Flush+0x40>
 2d8:	a6 ec       	ldi	r26, 0xC6	; 198
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	80 93 0e 01 	sts	0x010E, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	d4 f3       	brlt	.-12     	; 0x2e0 <USART_Flush+0x1e>
 2ec:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2ee:	ae ec       	ldi	r26, 0xCE	; 206
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e8 ec       	ldi	r30, 0xC8	; 200
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8c 91       	ld	r24, X
 2f8:	80 93 0e 01 	sts	0x010E, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	d4 f3       	brlt	.-12     	; 0x2f6 <USART_Flush+0x34>
 302:	08 95       	ret

00000304 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 304:	61 30       	cpi	r22, 0x01	; 1
 306:	41 f0       	breq	.+16     	; 0x318 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 308:	e0 ec       	ldi	r30, 0xC0	; 192
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	90 81       	ld	r25, Z
 30e:	95 ff       	sbrs	r25, 5
 310:	fd cf       	rjmp	.-6      	; 0x30c <USART_Send+0x8>
		UDR0 = sendMe;
 312:	80 93 c6 00 	sts	0x00C6, r24
 316:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 318:	e8 ec       	ldi	r30, 0xC8	; 200
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	95 ff       	sbrs	r25, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <USART_Send+0x18>
		UDR1 = sendMe;
 322:	80 93 ce 00 	sts	0x00CE, r24
 326:	08 95       	ret

00000328 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	41 f0       	breq	.+16     	; 0x33c <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 32c:	e0 ec       	ldi	r30, 0xC0	; 192
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	88 23       	and	r24, r24
 334:	ec f7       	brge	.-6      	; 0x330 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 336:	80 91 c6 00 	lds	r24, 0x00C6
 33a:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 33c:	e8 ec       	ldi	r30, 0xC8	; 200
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	88 23       	and	r24, r24
 344:	ec f7       	brge	.-6      	; 0x340 <USART_Receive+0x18>
		return UDR1;
 346:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
 34a:	08 95       	ret

0000034c <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 34c:	18 16       	cp	r1, r24
 34e:	19 06       	cpc	r1, r25
 350:	5c f0       	brlt	.+22     	; 0x368 <delay_ms+0x1c>
 352:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 354:	00 00       	nop
 356:	21 50       	subi	r18, 0x01	; 1
 358:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 35a:	e1 f7       	brne	.-8      	; 0x354 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	48 17       	cp	r20, r24
 362:	59 07       	cpc	r21, r25
 364:	29 f4       	brne	.+10     	; 0x370 <delay_ms+0x24>
 366:	08 95       	ret
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
#define RS 6				// pin number of uC connected to pin 4 of LCD disp.
#define E 7					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 36c:	77 e0       	ldi	r23, 0x07	; 7
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	27 2f       	mov	r18, r23
 372:	36 2f       	mov	r19, r22
 374:	ef cf       	rjmp	.-34     	; 0x354 <delay_ms+0x8>

00000376 <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 376:	5e 98       	cbi	0x0b, 6	; 11
	DATA_BUS = Command;
 378:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 37a:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 37c:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 37e:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	e3 cf       	rjmp	.-58     	; 0x34c <delay_ms>
 386:	08 95       	ret

00000388 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	f5 cf       	rjmp	.-22     	; 0x376 <LCD_WriteCommand>
 38c:	08 95       	ret

0000038e <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 38e:	84 e6       	ldi	r24, 0x64	; 100
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	dc df       	rcall	.-72     	; 0x34c <delay_ms>
	LCD_WriteCommand(0x38);
 394:	88 e3       	ldi	r24, 0x38	; 56
 396:	ef df       	rcall	.-34     	; 0x376 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	ed df       	rcall	.-38     	; 0x376 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 39c:	8f e0       	ldi	r24, 0x0F	; 15
 39e:	eb df       	rcall	.-42     	; 0x376 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	e9 df       	rcall	.-46     	; 0x376 <LCD_WriteCommand>
	delay_ms(10);						 
 3a4:	8a e0       	ldi	r24, 0x0A	; 10
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	d1 cf       	rjmp	.-94     	; 0x34c <delay_ms>
 3aa:	08 95       	ret

000003ac <LCD_WriteData>:
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
 3ac:	5e 9a       	sbi	0x0b, 6	; 11
	DATA_BUS = Data;
 3ae:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 3b0:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 3b2:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 3b4:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	c8 cf       	rjmp	.-112    	; 0x34c <delay_ms>
 3bc:	08 95       	ret

000003be <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 3be:	81 31       	cpi	r24, 0x11	; 17
 3c0:	18 f4       	brcc	.+6      	; 0x3c8 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 3c2:	81 58       	subi	r24, 0x81	; 129
 3c4:	d8 cf       	rjmp	.-80     	; 0x376 <LCD_WriteCommand>
 3c6:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 3c8:	81 55       	subi	r24, 0x51	; 81
 3ca:	d5 cf       	rjmp	.-86     	; 0x376 <LCD_WriteCommand>
 3cc:	08 95       	ret

000003ce <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	18 2f       	mov	r17, r24
 3d8:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 3da:	d6 df       	rcall	.-84     	; 0x388 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 3dc:	88 81       	ld	r24, Y
 3de:	88 23       	and	r24, r24
 3e0:	51 f0       	breq	.+20     	; 0x3f6 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 3e2:	01 e0       	ldi	r16, 0x01	; 1
 3e4:	01 0f       	add	r16, r17
 3e6:	81 2f       	mov	r24, r17
 3e8:	ea df       	rcall	.-44     	; 0x3be <LCD_Cursor>
		LCD_WriteData(*string++);
 3ea:	89 91       	ld	r24, Y+
 3ec:	df df       	rcall	.-66     	; 0x3ac <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 3ee:	10 2f       	mov	r17, r16
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 3f0:	88 81       	ld	r24, Y
 3f2:	81 11       	cpse	r24, r1
 3f4:	f6 cf       	rjmp	.-20     	; 0x3e2 <LCD_DisplayString+0x14>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17
 3fc:	0f 91       	pop	r16
 3fe:	08 95       	ret

00000400 <printScore>:

uint8_t EEMEM TEST;

///////////////////////////////////////////////////////////////////////////////
// Helper functions
void printScore() {
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
	int cursorStart = 9;

	for(int i = 0; buff[i] && i < BUFFSIZE; ++ i) {
 406:	80 91 1b 01 	lds	r24, 0x011B
 40a:	88 23       	and	r24, r24
 40c:	81 f0       	breq	.+32     	; 0x42e <printScore+0x2e>
 40e:	0b e1       	ldi	r16, 0x1B	; 27
 410:	11 e0       	ldi	r17, 0x01	; 1
 412:	c9 e0       	ldi	r28, 0x09	; 9
		LCD_Cursor(cursorStart);
 414:	8c 2f       	mov	r24, r28
 416:	d3 df       	rcall	.-90     	; 0x3be <LCD_Cursor>
		LCD_WriteData(buff[i]);
 418:	f8 01       	movw	r30, r16
 41a:	81 91       	ld	r24, Z+
 41c:	8f 01       	movw	r16, r30
 41e:	c6 df       	rcall	.-116    	; 0x3ac <LCD_WriteData>
///////////////////////////////////////////////////////////////////////////////
// Helper functions
void printScore() {
	int cursorStart = 9;

	for(int i = 0; buff[i] && i < BUFFSIZE; ++ i) {
 420:	f8 01       	movw	r30, r16
 422:	80 81       	ld	r24, Z
 424:	88 23       	and	r24, r24
 426:	19 f0       	breq	.+6      	; 0x42e <printScore+0x2e>
 428:	cf 5f       	subi	r28, 0xFF	; 255
 42a:	ce 30       	cpi	r28, 0x0E	; 14
 42c:	99 f7       	brne	.-26     	; 0x414 <printScore+0x14>
		LCD_Cursor(cursorStart);
		LCD_WriteData(buff[i]);
		++ cursorStart;
	}
}
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	08 95       	ret

00000436 <COIN_Tick>:
// Coin detection tick function
enum coinState {INIT1, IDLE1, DETECT, ADD, CHECK, UNLOCK} coin_state ;

static unsigned int lightCurr = 0;

void COIN_Tick() {
 436:	cf 93       	push	r28
	switch(coin_state) { // Transitions
 438:	80 91 20 01 	lds	r24, 0x0120
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	09 f4       	brne	.+2      	; 0x442 <COIN_Tick+0xc>
 440:	3a c0       	rjmp	.+116    	; 0x4b6 <COIN_Tick+0x80>
 442:	28 f4       	brcc	.+10     	; 0x44e <COIN_Tick+0x18>
 444:	88 23       	and	r24, r24
 446:	61 f0       	breq	.+24     	; 0x460 <COIN_Tick+0x2a>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	e1 f0       	breq	.+56     	; 0x484 <COIN_Tick+0x4e>
 44c:	5d c0       	rjmp	.+186    	; 0x508 <COIN_Tick+0xd2>
 44e:	84 30       	cpi	r24, 0x04	; 4
 450:	09 f4       	brne	.+2      	; 0x454 <COIN_Tick+0x1e>
 452:	48 c0       	rjmp	.+144    	; 0x4e4 <COIN_Tick+0xae>
 454:	08 f4       	brcc	.+2      	; 0x458 <COIN_Tick+0x22>
 456:	42 c0       	rjmp	.+132    	; 0x4dc <COIN_Tick+0xa6>
 458:	85 30       	cpi	r24, 0x05	; 5
 45a:	09 f4       	brne	.+2      	; 0x45e <COIN_Tick+0x28>
 45c:	52 c0       	rjmp	.+164    	; 0x502 <COIN_Tick+0xcc>
 45e:	54 c0       	rjmp	.+168    	; 0x508 <COIN_Tick+0xd2>
		case INIT1:
			LCD_DisplayString(1, "Score:");
 460:	66 e0       	ldi	r22, 0x06	; 6
 462:	71 e0       	ldi	r23, 0x01	; 1
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	b3 df       	rcall	.-154    	; 0x3ce <LCD_DisplayString>

			itoa(coins, buff, 10);
 468:	4a e0       	ldi	r20, 0x0A	; 10
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	6b e1       	ldi	r22, 0x1B	; 27
 46e:	71 e0       	ldi	r23, 0x01	; 1
 470:	80 91 00 01 	lds	r24, 0x0100
 474:	90 91 01 01 	lds	r25, 0x0101
 478:	f5 d0       	rcall	.+490    	; 0x664 <itoa>
			printScore();
 47a:	c2 df       	rcall	.-124    	; 0x400 <printScore>

			coin_state = IDLE1;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 20 01 	sts	0x0120, r24
		break;
 482:	44 c0       	rjmp	.+136    	; 0x50c <COIN_Tick+0xd6>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 484:	80 91 c0 00 	lds	r24, 0x00C0
		
		case IDLE1:
			if(USART_HasReceived(0)) {
 488:	88 23       	and	r24, r24
 48a:	0c f0       	brlt	.+2      	; 0x48e <COIN_Tick+0x58>
 48c:	3f c0       	rjmp	.+126    	; 0x50c <COIN_Tick+0xd6>
				unsigned char tmp = USART_Receive(0);
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	4b df       	rcall	.-362    	; 0x328 <USART_Receive>
 492:	c8 2f       	mov	r28, r24
				USART_Flush(0);
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	15 df       	rcall	.-470    	; 0x2c2 <USART_Flush>
				coins += tmp;
 498:	20 91 00 01 	lds	r18, 0x0100
 49c:	30 91 01 01 	lds	r19, 0x0101
 4a0:	c9 01       	movw	r24, r18
 4a2:	8c 0f       	add	r24, r28
 4a4:	91 1d       	adc	r25, r1
 4a6:	90 93 01 01 	sts	0x0101, r25
 4aa:	80 93 00 01 	sts	0x0100, r24
				coin_state = CHECK;
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	80 93 20 01 	sts	0x0120, r24
 4b4:	2b c0       	rjmp	.+86     	; 0x50c <COIN_Tick+0xd6>
			// 	coin_state = DETECT;
			// }
		break;
		
		case DETECT:
			if(lightCurr < lightBase) { 
 4b6:	80 91 10 01 	lds	r24, 0x0110
 4ba:	90 91 11 01 	lds	r25, 0x0111
 4be:	89 2b       	or	r24, r25
 4c0:	29 f5       	brne	.+74     	; 0x50c <COIN_Tick+0xd6>
				coin_state = DETECT;
			}
			else {
				//tempB = 0x80;
				//PORTB = tempB;
				coin_state = ADD; 
 4c2:	83 e0       	ldi	r24, 0x03	; 3
 4c4:	80 93 20 01 	sts	0x0120, r24
			//lightCurr = adc_read(1);
			//a0 = adc_read(2);
		break;
		
		case ADD:
			++ coins;
 4c8:	80 91 00 01 	lds	r24, 0x0100
 4cc:	90 91 01 01 	lds	r25, 0x0101
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	90 93 01 01 	sts	0x0101, r25
 4d6:	80 93 00 01 	sts	0x0100, r24
		break;
 4da:	18 c0       	rjmp	.+48     	; 0x50c <COIN_Tick+0xd6>
				coin_state = ADD; 
			}
		break;
		
		case ADD:
			coin_state = CHECK;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	80 93 20 01 	sts	0x0120, r24
		break;
 4e2:	14 c0       	rjmp	.+40     	; 0x50c <COIN_Tick+0xd6>

		case CHECK:
			if(coins >= 100) {
 4e4:	80 91 00 01 	lds	r24, 0x0100
 4e8:	90 91 01 01 	lds	r25, 0x0101
 4ec:	84 36       	cpi	r24, 0x64	; 100
 4ee:	91 05       	cpc	r25, r1
 4f0:	28 f0       	brcs	.+10     	; 0x4fc <COIN_Tick+0xc6>
				coin_state = UNLOCK;
 4f2:	85 e0       	ldi	r24, 0x05	; 5
 4f4:	80 93 20 01 	sts	0x0120, r24
		case CHECK:
			// Do nothing
		break;

		case UNLOCK:
			PORTB = 0x00;
 4f8:	15 b8       	out	0x05, r1	; 5
		break;
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <COIN_Tick+0xd6>
		case CHECK:
			if(coins >= 100) {
				coin_state = UNLOCK;
			}
			else {
				coin_state = INIT1;
 4fc:	10 92 20 01 	sts	0x0120, r1
 500:	05 c0       	rjmp	.+10     	; 0x50c <COIN_Tick+0xd6>
			}
		break;

		case UNLOCK:
			coin_state = INIT1;
 502:	10 92 20 01 	sts	0x0120, r1
		break;
 506:	02 c0       	rjmp	.+4      	; 0x50c <COIN_Tick+0xd6>
		
		default:
			coin_state = INIT1;
 508:	10 92 20 01 	sts	0x0120, r1

		default:
			// Do nothing
		break;
	}
}
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <adc_init>:
}
///////////////////////////////////////////////////////////////////////////////
// Analog to digital functions
void adc_init() {
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 510:	80 e4       	ldi	r24, 0x40	; 64
 512:	80 93 7c 00 	sts	0x007C, r24
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 516:	87 e8       	ldi	r24, 0x87	; 135
 518:	80 93 7a 00 	sts	0x007A, r24
 51c:	08 95       	ret

0000051e <adc_read>:
uint16_t adc_read(uint8_t ch) {
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 51e:	ec e7       	ldi	r30, 0x7C	; 124
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	90 81       	ld	r25, Z

uint16_t adc_read(uint8_t ch) {
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
 524:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 526:	98 7f       	andi	r25, 0xF8	; 248
 528:	89 2b       	or	r24, r25
 52a:	80 83       	st	Z, r24
	
	// start single convertion
	// write ’1? to ADSC
	ADCSRA |= (1<<ADSC);
 52c:	ea e7       	ldi	r30, 0x7A	; 122
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	80 64       	ori	r24, 0x40	; 64
 534:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes ’0? again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 536:	80 81       	ld	r24, Z
 538:	86 fd       	sbrc	r24, 6
 53a:	fd cf       	rjmp	.-6      	; 0x536 <adc_read+0x18>
	
	return (ADC);
 53c:	80 91 78 00 	lds	r24, 0x0078
 540:	90 91 79 00 	lds	r25, 0x0079
}
 544:	08 95       	ret

00000546 <JOY_Tick>:
enum joyState {INIT2, IDLE2, PULLDOWN, DONE} joy_state;

// Joystick's tick function
int JOY_Tick() {
	// Sample joystick output
	joyc = adc_read(0);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	ea df       	rcall	.-44     	; 0x51e <adc_read>
 54a:	9c 01       	movw	r18, r24
 54c:	90 93 13 01 	sts	0x0113, r25
 550:	80 93 12 01 	sts	0x0112, r24
	//joyc = ADC;
	switch(joy_state) { // Transitions
 554:	90 91 21 01 	lds	r25, 0x0121
 558:	91 30       	cpi	r25, 0x01	; 1
 55a:	51 f0       	breq	.+20     	; 0x570 <JOY_Tick+0x2a>
 55c:	28 f0       	brcs	.+10     	; 0x568 <JOY_Tick+0x22>
 55e:	92 30       	cpi	r25, 0x02	; 2
 560:	71 f0       	breq	.+28     	; 0x57e <JOY_Tick+0x38>
 562:	93 30       	cpi	r25, 0x03	; 3
 564:	b1 f0       	breq	.+44     	; 0x592 <JOY_Tick+0x4c>
 566:	19 c0       	rjmp	.+50     	; 0x59a <JOY_Tick+0x54>
		case INIT2:
			joy_state = IDLE2;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 21 01 	sts	0x0121, r24
		break;
 56e:	08 95       	ret
			// 	//LCD_DisplayString(1, "Got");
			// 	unsigned char tmp = USART_Receive(0);
			// 	USART_Flush(0);
			// 	coins += tmp;
			// }
			if(joyc < 1019) {
 570:	2b 3f       	cpi	r18, 0xFB	; 251
 572:	33 40       	sbci	r19, 0x03	; 3
 574:	a0 f0       	brcs	.+40     	; 0x59e <JOY_Tick+0x58>
				// Do nothing
			}

			else {
				joy_state = PULLDOWN;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	80 93 21 01 	sts	0x0121, r24
 57c:	08 95       	ret
			}
		break;

		case PULLDOWN:
			if(joyc < 1019) {
 57e:	2b 3f       	cpi	r18, 0xFB	; 251
 580:	33 40       	sbci	r19, 0x03	; 3
 582:	68 f4       	brcc	.+26     	; 0x59e <JOY_Tick+0x58>
				joy_state = DONE;
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	80 93 21 01 	sts	0x0121, r24
			// Do nothing
		break;

		case DONE:
			// Send USART signal
			USART_Send(1, 1);
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	ba ce       	rjmp	.-652    	; 0x304 <USART_Send>
		break;
 590:	08 95       	ret
		break;

		case DONE:
			//LCD_DisplayString(7, "IDLE");
			//SPI_MasterTransmit(0);
			joy_state = IDLE2;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	80 93 21 01 	sts	0x0121, r24
		break;
 598:	08 95       	ret

		default:
			joy_state = INIT2;
 59a:	10 92 21 01 	sts	0x0121, r1

		default:
			// Do nothing
		break;
	}
}
 59e:	08 95       	ret

000005a0 <main>:

///////////////////////////////////////////////////////////////////////////////
// Main function
int main(void) {
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	66 97       	sbiw	r28, 0x16	; 22
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
	//DDRA = 0x00; PORTA = 0xFF; // A reads joystick inputs
	DDRA = 0xF0; PORTA = 0x0F;
 5b4:	80 ef       	ldi	r24, 0xF0	; 240
 5b6:	81 b9       	out	0x01, r24	; 1
 5b8:	8f e0       	ldi	r24, 0x0F	; 15
 5ba:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // B is output to electromagnet 
 5bc:	1f ef       	ldi	r17, 0xFF	; 255
 5be:	14 b9       	out	0x04, r17	; 4
 5c0:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // C is output to LCD 
 5c2:	17 b9       	out	0x07, r17	; 7
 5c4:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // D outputs RS and E signals to LCD
 5c6:	1a b9       	out	0x0a, r17	; 10
 5c8:	1b b8       	out	0x0b, r1	; 11

	PORTB = 0x01; // Magnet initially on
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	85 b9       	out	0x05, r24	; 5
	//PORTB = 0xFF;

	// Initialize UART 
	initUSART(0); // Used to receive data
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	56 de       	rcall	.-852    	; 0x27e <initUSART>
	initUSART(1); // Used to send data
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	54 de       	rcall	.-856    	; 0x27e <initUSART>

	// Initialize LCD
	LCD_init();
 5d6:	db de       	rcall	.-586    	; 0x38e <LCD_init>
	
	// Initialize analog to digital converter
	//A2D_init();
	adc_init();
 5d8:	9b df       	rcall	.-202    	; 0x510 <adc_init>

	// Base value for light intensity
	lightBase = adc_read(1) + 100;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	a0 df       	rcall	.-192    	; 0x51e <adc_read>
 5de:	8c 59       	subi	r24, 0x9C	; 156
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	90 93 11 01 	sts	0x0111, r25
 5e6:	80 93 10 01 	sts	0x0110, r24

	// Scheduler task setup
	tasksNum = 2;    		   // Declare number of tasks
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	80 93 14 01 	sts	0x0114, r24
	task myTasks[tasksNum];    // Initialize the task array
	tasks = myTasks; 		   // Set the task array
 5f0:	ce 01       	movw	r24, r28
 5f2:	01 96       	adiw	r24, 0x01	; 1
 5f4:	90 93 1a 01 	sts	0x011A, r25
 5f8:	80 93 19 01 	sts	0x0119, r24
	//LCD_Cursor(1);
	//LCD_WriteData(('0' + SRAM_Test));

	// Task initialization
	unsigned char _i = 0;
	tasks[_i].state = -1;
 5fc:	19 83       	std	Y+1, r17	; 0x01
	tasks[_i].period = 4;
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	a0 e0       	ldi	r26, 0x00	; 0
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	8a 83       	std	Y+2, r24	; 0x02
 608:	9b 83       	std	Y+3, r25	; 0x03
 60a:	ac 83       	std	Y+4, r26	; 0x04
 60c:	bd 83       	std	Y+5, r27	; 0x05
	tasks[_i].elapsedTime = tasks[_i].period;
 60e:	8e 83       	std	Y+6, r24	; 0x06
 610:	9f 83       	std	Y+7, r25	; 0x07
 612:	a8 87       	std	Y+8, r26	; 0x08
 614:	b9 87       	std	Y+9, r27	; 0x09
	tasks[_i].TickFct = &COIN_Tick;
 616:	2b e1       	ldi	r18, 0x1B	; 27
 618:	32 e0       	ldi	r19, 0x02	; 2
 61a:	3b 87       	std	Y+11, r19	; 0x0b
 61c:	2a 87       	std	Y+10, r18	; 0x0a

	++ _i;

	tasks[_i].state = -1;
 61e:	1c 87       	std	Y+12, r17	; 0x0c
	tasks[_i].period = 4;
 620:	8d 87       	std	Y+13, r24	; 0x0d
 622:	9e 87       	std	Y+14, r25	; 0x0e
 624:	af 87       	std	Y+15, r26	; 0x0f
 626:	b8 8b       	std	Y+16, r27	; 0x10
	tasks[_i].elapsedTime = tasks[_i].period;
 628:	89 8b       	std	Y+17, r24	; 0x11
 62a:	9a 8b       	std	Y+18, r25	; 0x12
 62c:	ab 8b       	std	Y+19, r26	; 0x13
 62e:	bc 8b       	std	Y+20, r27	; 0x14
	tasks[_i].TickFct = &JOY_Tick;
 630:	83 ea       	ldi	r24, 0xA3	; 163
 632:	92 e0       	ldi	r25, 0x02	; 2
 634:	9e 8b       	std	Y+22, r25	; 0x16
 636:	8d 8b       	std	Y+21, r24	; 0x15
}

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 638:	84 e6       	ldi	r24, 0x64	; 100
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	a0 e0       	ldi	r26, 0x00	; 0
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	80 93 02 01 	sts	0x0102, r24
 644:	90 93 03 01 	sts	0x0103, r25
 648:	a0 93 04 01 	sts	0x0104, r26
 64c:	b0 93 05 01 	sts	0x0105, r27
	tasksPeriodCntDown = tasksPeriodGCD;
 650:	80 93 15 01 	sts	0x0115, r24
 654:	90 93 16 01 	sts	0x0116, r25
 658:	a0 93 17 01 	sts	0x0117, r26
 65c:	b0 93 18 01 	sts	0x0118, r27

	++ _i;

	// Initialize timer
	TimerSet(GCD_Period);
	TimerOn();
 660:	ea dd       	rcall	.-1068   	; 0x236 <TimerOn>

    while (1) {

    }
 662:	ff cf       	rjmp	.-2      	; 0x662 <main+0xc2>

00000664 <itoa>:
 664:	45 32       	cpi	r20, 0x25	; 37
 666:	51 05       	cpc	r21, r1
 668:	18 f4       	brcc	.+6      	; 0x670 <itoa+0xc>
 66a:	42 30       	cpi	r20, 0x02	; 2
 66c:	08 f0       	brcs	.+2      	; 0x670 <itoa+0xc>
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__itoa_ncheck>
 670:	fb 01       	movw	r30, r22
 672:	10 82       	st	Z, r1
 674:	cb 01       	movw	r24, r22
 676:	08 95       	ret

00000678 <__itoa_ncheck>:
 678:	bb 27       	eor	r27, r27
 67a:	4a 30       	cpi	r20, 0x0A	; 10
 67c:	31 f4       	brne	.+12     	; 0x68a <__itoa_ncheck+0x12>
 67e:	99 23       	and	r25, r25
 680:	22 f4       	brpl	.+8      	; 0x68a <__itoa_ncheck+0x12>
 682:	bd e2       	ldi	r27, 0x2D	; 45
 684:	90 95       	com	r25
 686:	81 95       	neg	r24
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	01 c0       	rjmp	.+2      	; 0x68e <__utoa_common>

0000068c <__utoa_ncheck>:
 68c:	bb 27       	eor	r27, r27

0000068e <__utoa_common>:
 68e:	fb 01       	movw	r30, r22
 690:	55 27       	eor	r21, r21
 692:	aa 27       	eor	r26, r26
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	aa 1f       	adc	r26, r26
 69a:	a4 17       	cp	r26, r20
 69c:	10 f0       	brcs	.+4      	; 0x6a2 <__utoa_common+0x14>
 69e:	a4 1b       	sub	r26, r20
 6a0:	83 95       	inc	r24
 6a2:	50 51       	subi	r21, 0x10	; 16
 6a4:	b9 f7       	brne	.-18     	; 0x694 <__utoa_common+0x6>
 6a6:	a0 5d       	subi	r26, 0xD0	; 208
 6a8:	aa 33       	cpi	r26, 0x3A	; 58
 6aa:	08 f0       	brcs	.+2      	; 0x6ae <__utoa_common+0x20>
 6ac:	a9 5d       	subi	r26, 0xD9	; 217
 6ae:	a1 93       	st	Z+, r26
 6b0:	00 97       	sbiw	r24, 0x00	; 0
 6b2:	79 f7       	brne	.-34     	; 0x692 <__utoa_common+0x4>
 6b4:	b1 11       	cpse	r27, r1
 6b6:	b1 93       	st	Z+, r27
 6b8:	11 92       	st	Z+, r1
 6ba:	cb 01       	movw	r24, r22
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <strrev>

000006be <strrev>:
 6be:	dc 01       	movw	r26, r24
 6c0:	fc 01       	movw	r30, r24
 6c2:	67 2f       	mov	r22, r23
 6c4:	71 91       	ld	r23, Z+
 6c6:	77 23       	and	r23, r23
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <strrev+0x4>
 6ca:	32 97       	sbiw	r30, 0x02	; 2
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <strrev+0x18>
 6ce:	7c 91       	ld	r23, X
 6d0:	6d 93       	st	X+, r22
 6d2:	70 83       	st	Z, r23
 6d4:	62 91       	ld	r22, -Z
 6d6:	ae 17       	cp	r26, r30
 6d8:	bf 07       	cpc	r27, r31
 6da:	c8 f3       	brcs	.-14     	; 0x6ce <strrev+0x10>
 6dc:	08 95       	ret

000006de <_exit>:
 6de:	f8 94       	cli

000006e0 <__stop_program>:
 6e0:	ff cf       	rjmp	.-2      	; 0x6e0 <__stop_program>
