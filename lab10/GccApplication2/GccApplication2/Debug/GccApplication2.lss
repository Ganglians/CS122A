
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000eba  00000f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080012a  0080012a  00000f78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000883  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000325  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e4  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000241c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000419  00000000  00000000  00002999  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002db2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c0       	rjmp	.+356    	; 0x19a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 36       	cpi	r26, 0x68	; 104
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	27 d4       	rcall	.+2126   	; 0x912 <main>
  c4:	f8 c6       	rjmp	.+3568   	; 0xeb6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	10 92 2b 01 	sts	0x012B, r1
  da:	80 91 44 01 	lds	r24, 0x0144
  de:	88 23       	and	r24, r24
  e0:	09 f4       	brne	.+2      	; 0xe4 <TimerISR+0x1c>
  e2:	53 c0       	rjmp	.+166    	; 0x18a <TimerISR+0xc2>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	1b e0       	ldi	r17, 0x0B	; 11
  e8:	c0 91 4d 01 	lds	r28, 0x014D
  ec:	d0 91 4e 01 	lds	r29, 0x014E
  f0:	18 9f       	mul	r17, r24
  f2:	c0 0d       	add	r28, r0
  f4:	d1 1d       	adc	r29, r1
  f6:	11 24       	eor	r1, r1
  f8:	4d 81       	ldd	r20, Y+5	; 0x05
  fa:	5e 81       	ldd	r21, Y+6	; 0x06
  fc:	6f 81       	ldd	r22, Y+7	; 0x07
  fe:	78 85       	ldd	r23, Y+8	; 0x08
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	ab 81       	ldd	r26, Y+3	; 0x03
 106:	bc 81       	ldd	r27, Y+4	; 0x04
 108:	48 17       	cp	r20, r24
 10a:	59 07       	cpc	r21, r25
 10c:	6a 07       	cpc	r22, r26
 10e:	7b 07       	cpc	r23, r27
 110:	b0 f0       	brcs	.+44     	; 0x13e <TimerISR+0x76>
 112:	88 81       	ld	r24, Y
 114:	e9 85       	ldd	r30, Y+9	; 0x09
 116:	fa 85       	ldd	r31, Y+10	; 0x0a
 118:	08 2e       	mov	r0, r24
 11a:	00 0c       	add	r0, r0
 11c:	99 0b       	sbc	r25, r25
 11e:	09 95       	icall
 120:	88 83       	st	Y, r24
 122:	80 91 2b 01 	lds	r24, 0x012B
 126:	e0 91 4d 01 	lds	r30, 0x014D
 12a:	f0 91 4e 01 	lds	r31, 0x014E
 12e:	18 9f       	mul	r17, r24
 130:	e0 0d       	add	r30, r0
 132:	f1 1d       	adc	r31, r1
 134:	11 24       	eor	r1, r1
 136:	15 82       	std	Z+5, r1	; 0x05
 138:	16 82       	std	Z+6, r1	; 0x06
 13a:	17 82       	std	Z+7, r1	; 0x07
 13c:	10 86       	std	Z+8, r1	; 0x08
 13e:	80 91 2b 01 	lds	r24, 0x012B
 142:	e0 91 4d 01 	lds	r30, 0x014D
 146:	f0 91 4e 01 	lds	r31, 0x014E
 14a:	18 9f       	mul	r17, r24
 14c:	e0 0d       	add	r30, r0
 14e:	f1 1d       	adc	r31, r1
 150:	11 24       	eor	r1, r1
 152:	c5 80       	ldd	r12, Z+5	; 0x05
 154:	d6 80       	ldd	r13, Z+6	; 0x06
 156:	e7 80       	ldd	r14, Z+7	; 0x07
 158:	f0 84       	ldd	r15, Z+8	; 0x08
 15a:	40 91 26 01 	lds	r20, 0x0126
 15e:	50 91 27 01 	lds	r21, 0x0127
 162:	60 91 28 01 	lds	r22, 0x0128
 166:	70 91 29 01 	lds	r23, 0x0129
 16a:	4c 0d       	add	r20, r12
 16c:	5d 1d       	adc	r21, r13
 16e:	6e 1d       	adc	r22, r14
 170:	7f 1d       	adc	r23, r15
 172:	45 83       	std	Z+5, r20	; 0x05
 174:	56 83       	std	Z+6, r21	; 0x06
 176:	67 83       	std	Z+7, r22	; 0x07
 178:	70 87       	std	Z+8, r23	; 0x08
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 2b 01 	sts	0x012B, r24
 180:	90 91 44 01 	lds	r25, 0x0144
 184:	89 17       	cp	r24, r25
 186:	08 f4       	brcc	.+2      	; 0x18a <TimerISR+0xc2>
 188:	af cf       	rjmp	.-162    	; 0xe8 <TimerISR+0x20>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <__vector_13>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	80 91 45 01 	lds	r24, 0x0145
 1c4:	90 91 46 01 	lds	r25, 0x0146
 1c8:	a0 91 47 01 	lds	r26, 0x0147
 1cc:	b0 91 48 01 	lds	r27, 0x0148
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	a1 09       	sbc	r26, r1
 1d4:	b1 09       	sbc	r27, r1
 1d6:	80 93 45 01 	sts	0x0145, r24
 1da:	90 93 46 01 	sts	0x0146, r25
 1de:	a0 93 47 01 	sts	0x0147, r26
 1e2:	b0 93 48 01 	sts	0x0148, r27
 1e6:	89 2b       	or	r24, r25
 1e8:	8a 2b       	or	r24, r26
 1ea:	8b 2b       	or	r24, r27
 1ec:	89 f4       	brne	.+34     	; 0x210 <__vector_13+0x76>
 1ee:	6c df       	rcall	.-296    	; 0xc8 <TimerISR>
 1f0:	80 91 26 01 	lds	r24, 0x0126
 1f4:	90 91 27 01 	lds	r25, 0x0127
 1f8:	a0 91 28 01 	lds	r26, 0x0128
 1fc:	b0 91 29 01 	lds	r27, 0x0129
 200:	80 93 45 01 	sts	0x0145, r24
 204:	90 93 46 01 	sts	0x0146, r25
 208:	a0 93 47 01 	sts	0x0147, r26
 20c:	b0 93 48 01 	sts	0x0148, r27
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0b be       	out	0x3b, r0	; 59
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <TimerOn>:
 236:	8b e0       	ldi	r24, 0x0B	; 11
 238:	80 93 81 00 	sts	0x0081, r24
 23c:	8a e0       	ldi	r24, 0x0A	; 10
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 89 00 	sts	0x0089, r25
 244:	80 93 88 00 	sts	0x0088, r24
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 6f 00 	sts	0x006F, r24
 24e:	10 92 85 00 	sts	0x0085, r1
 252:	10 92 84 00 	sts	0x0084, r1
 256:	80 91 26 01 	lds	r24, 0x0126
 25a:	90 91 27 01 	lds	r25, 0x0127
 25e:	a0 91 28 01 	lds	r26, 0x0128
 262:	b0 91 29 01 	lds	r27, 0x0129
 266:	80 93 45 01 	sts	0x0145, r24
 26a:	90 93 46 01 	sts	0x0146, r25
 26e:	a0 93 47 01 	sts	0x0147, r26
 272:	b0 93 48 01 	sts	0x0148, r27
 276:	8f b7       	in	r24, 0x3f	; 63
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	8f bf       	out	0x3f, r24	; 63
 27c:	08 95       	ret

0000027e <initUSART>:
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	81 f0       	breq	.+32     	; 0x2a2 <initUSART+0x24>
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
 28c:	e2 ec       	ldi	r30, 0xC2	; 194
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	86 60       	ori	r24, 0x06	; 6
 294:	80 83       	st	Z, r24
 296:	83 e3       	ldi	r24, 0x33	; 51
 298:	80 93 c4 00 	sts	0x00C4, r24
 29c:	10 92 c5 00 	sts	0x00C5, r1
 2a0:	08 95       	ret
 2a2:	e9 ec       	ldi	r30, 0xC9	; 201
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 61       	ori	r24, 0x18	; 24
 2aa:	80 83       	st	Z, r24
 2ac:	ea ec       	ldi	r30, 0xCA	; 202
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	80 83       	st	Z, r24
 2b6:	83 e3       	ldi	r24, 0x33	; 51
 2b8:	80 93 cc 00 	sts	0x00CC, r24
 2bc:	10 92 cd 00 	sts	0x00CD, r1
 2c0:	08 95       	ret

000002c2 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2c6:	80 91 c8 00 	lds	r24, 0x00C8
 2ca:	88 23       	and	r24, r24
 2cc:	84 f0       	brlt	.+32     	; 0x2ee <USART_Flush+0x2c>
 2ce:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 2d0:	80 91 c0 00 	lds	r24, 0x00C0
 2d4:	88 23       	and	r24, r24
 2d6:	ac f4       	brge	.+42     	; 0x302 <USART_Flush+0x40>
 2d8:	a6 ec       	ldi	r26, 0xC6	; 198
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e0 ec       	ldi	r30, 0xC0	; 192
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	80 93 2a 01 	sts	0x012A, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	d4 f3       	brlt	.-12     	; 0x2e0 <USART_Flush+0x1e>
 2ec:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 2ee:	ae ec       	ldi	r26, 0xCE	; 206
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e8 ec       	ldi	r30, 0xC8	; 200
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	8c 91       	ld	r24, X
 2f8:	80 93 2a 01 	sts	0x012A, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	d4 f3       	brlt	.-12     	; 0x2f6 <USART_Flush+0x34>
 302:	08 95       	ret

00000304 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 304:	61 30       	cpi	r22, 0x01	; 1
 306:	41 f0       	breq	.+16     	; 0x318 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 308:	e0 ec       	ldi	r30, 0xC0	; 192
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	90 81       	ld	r25, Z
 30e:	95 ff       	sbrs	r25, 5
 310:	fd cf       	rjmp	.-6      	; 0x30c <USART_Send+0x8>
		UDR0 = sendMe;
 312:	80 93 c6 00 	sts	0x00C6, r24
 316:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 318:	e8 ec       	ldi	r30, 0xC8	; 200
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	90 81       	ld	r25, Z
 31e:	95 ff       	sbrs	r25, 5
 320:	fd cf       	rjmp	.-6      	; 0x31c <USART_Send+0x18>
		UDR1 = sendMe;
 322:	80 93 ce 00 	sts	0x00CE, r24
 326:	08 95       	ret

00000328 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	41 f0       	breq	.+16     	; 0x33c <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 32c:	e0 ec       	ldi	r30, 0xC0	; 192
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	88 23       	and	r24, r24
 334:	ec f7       	brge	.-6      	; 0x330 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 336:	80 91 c6 00 	lds	r24, 0x00C6
 33a:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 33c:	e8 ec       	ldi	r30, 0xC8	; 200
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	88 23       	and	r24, r24
 344:	ec f7       	brge	.-6      	; 0x340 <USART_Receive+0x18>
		return UDR1;
 346:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
 34a:	08 95       	ret

0000034c <LEADER_Tick>:
// Leader function-------------------------------------------------------------
// Polls for signal and lets other SM's know that they need to spin and to what degree
enum leaderState {INIT1, IDLE1, SIGNAL_ON, SIGNAL_OFF ,STANDBY, DONE} leader_state;

int LEADER_Tick() {
	switch(leader_state) { // Transitions
 34c:	80 91 5d 01 	lds	r24, 0x015D
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	31 f1       	breq	.+76     	; 0x3a0 <LEADER_Tick+0x54>
 354:	28 f4       	brcc	.+10     	; 0x360 <LEADER_Tick+0x14>
 356:	88 23       	and	r24, r24
 358:	51 f0       	breq	.+20     	; 0x36e <LEADER_Tick+0x22>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	61 f0       	breq	.+24     	; 0x376 <LEADER_Tick+0x2a>
 35e:	49 c0       	rjmp	.+146    	; 0x3f2 <LEADER_Tick+0xa6>
 360:	84 30       	cpi	r24, 0x04	; 4
 362:	41 f1       	breq	.+80     	; 0x3b4 <LEADER_Tick+0x68>
 364:	18 f1       	brcs	.+70     	; 0x3ac <LEADER_Tick+0x60>
 366:	85 30       	cpi	r24, 0x05	; 5
 368:	09 f4       	brne	.+2      	; 0x36c <LEADER_Tick+0x20>
 36a:	3f c0       	rjmp	.+126    	; 0x3ea <LEADER_Tick+0x9e>
 36c:	42 c0       	rjmp	.+132    	; 0x3f2 <LEADER_Tick+0xa6>
		case INIT1:
			leader_state = IDLE1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 5d 01 	sts	0x015D, r24
		break;
 374:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 376:	80 91 c0 00 	lds	r24, 0x00C0

		case IDLE1:
			if(USART_HasReceived(0)) { // Poll for signal
 37a:	88 23       	and	r24, r24
 37c:	0c f0       	brlt	.+2      	; 0x380 <LEADER_Tick+0x34>
 37e:	48 c0       	rjmp	.+144    	; 0x410 <LEADER_Tick+0xc4>
				leader_state = SIGNAL_ON;
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	80 93 5d 01 	sts	0x015D, r24
		case IDLE1:
			// Do nothing
		break;

		case SIGNAL_ON:
			LEVER = USART_Receive(0); // Changing lever status initiates motors
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	cf df       	rcall	.-98     	; 0x328 <USART_Receive>
 38a:	80 93 52 01 	sts	0x0152, r24
			USART_Flush(0);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	98 df       	rcall	.-208    	; 0x2c2 <USART_Flush>

			// Signify that none of the motors are done spinning
			Done1 = 0;
 392:	10 92 51 01 	sts	0x0151, r1
			Done2 = 0;
 396:	10 92 5e 01 	sts	0x015E, r1
			Done3 = 0;
 39a:	10 92 62 01 	sts	0x0162, r1
		break;
 39e:	08 95       	ret
				leader_state = SIGNAL_ON;
			}
		break;

		case SIGNAL_ON:
			leader_state = SIGNAL_OFF;
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	80 93 5d 01 	sts	0x015D, r24
			Done2 = 0;
			Done3 = 0;
		break;

		case SIGNAL_OFF:
			LEVER = 0;
 3a6:	10 92 52 01 	sts	0x0152, r1
		break;
 3aa:	08 95       	ret
		case SIGNAL_ON:
			leader_state = SIGNAL_OFF;
		break;

		case SIGNAL_OFF:
			leader_state = STANDBY;
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	80 93 5d 01 	sts	0x015D, r24
		break;
 3b2:	08 95       	ret

		case STANDBY:
			if(Done1 && Done2 && Done3) {
 3b4:	80 91 51 01 	lds	r24, 0x0151
 3b8:	88 23       	and	r24, r24
 3ba:	51 f1       	breq	.+84     	; 0x410 <LEADER_Tick+0xc4>
 3bc:	80 91 5e 01 	lds	r24, 0x015E
 3c0:	88 23       	and	r24, r24
 3c2:	31 f1       	breq	.+76     	; 0x410 <LEADER_Tick+0xc4>
 3c4:	80 91 62 01 	lds	r24, 0x0162
 3c8:	88 23       	and	r24, r24
 3ca:	11 f1       	breq	.+68     	; 0x410 <LEADER_Tick+0xc4>
				//D1 += (deg1) % 360;
				//D2 += (deg2) % 360;
				//D3 += (deg3) % 360;
				leader_state = DONE;
 3cc:	85 e0       	ldi	r24, 0x05	; 5
 3ce:	80 93 5d 01 	sts	0x015D, r24
		case STANDBY:
			// Do nothing
		break;

		case DONE:
			if((T1 == T2) && (T2 == T3)) { // If a match is found
 3d2:	80 91 60 01 	lds	r24, 0x0160
 3d6:	90 91 61 01 	lds	r25, 0x0161
 3da:	20 91 49 01 	lds	r18, 0x0149
 3de:	30 91 4a 01 	lds	r19, 0x014A
 3e2:	82 17       	cp	r24, r18
 3e4:	93 07       	cpc	r25, r19
 3e6:	89 f4       	brne	.+34     	; 0x40a <LEADER_Tick+0xbe>
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <LEADER_Tick+0xac>
				leader_state = DONE;
			}
		break;

		case DONE:
			leader_state = IDLE1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 93 5d 01 	sts	0x015D, r24
		break;
 3f0:	08 95       	ret

		default:
			leader_state = INIT1;
 3f2:	10 92 5d 01 	sts	0x015D, r1
		break;
 3f6:	08 95       	ret
		case STANDBY:
			// Do nothing
		break;

		case DONE:
			if((T1 == T2) && (T2 == T3)) { // If a match is found
 3f8:	20 91 5b 01 	lds	r18, 0x015B
 3fc:	30 91 5c 01 	lds	r19, 0x015C
 400:	82 17       	cp	r24, r18
 402:	93 07       	cpc	r25, r19
 404:	11 f4       	brne	.+4      	; 0x40a <LEADER_Tick+0xbe>
				USART_Send(T1, 1);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	7d df       	rcall	.-262    	; 0x304 <USART_Send>
			}
			leader_state = IDLE1;				
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 5d 01 	sts	0x015D, r24

		default:
			// Do nothing
		break;		
	}
}
 410:	08 95       	ret

00000412 <degConv>:
int test3[] = {195, 0, 55};

///////////////////////////////////////////////////////////////////////////////
// Helper functions / Structures
int degConv(int d) { // Converts the degree entered into the phase equivalent (D / 5.625) * 64
	return ((d / 5.625) * 64);
 412:	bc 01       	movw	r22, r24
 414:	99 0f       	add	r25, r25
 416:	88 0b       	sbc	r24, r24
 418:	99 0b       	sbc	r25, r25
 41a:	85 d3       	rcall	.+1802   	; 0xb26 <__floatsisf>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	44 eb       	ldi	r20, 0xB4	; 180
 422:	50 e4       	ldi	r21, 0x40	; 64
 424:	e5 d2       	rcall	.+1482   	; 0x9f0 <__divsf3>
 426:	20 e0       	ldi	r18, 0x00	; 0
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	40 e8       	ldi	r20, 0x80	; 128
 42c:	52 e4       	ldi	r21, 0x42	; 66
 42e:	07 d4       	rcall	.+2062   	; 0xc3e <__mulsf3>
 430:	47 d3       	rcall	.+1678   	; 0xac0 <__fixsfsi>
}
 432:	cb 01       	movw	r24, r22
 434:	08 95       	ret

00000436 <typeSelect>:

// Takes in the degree value and returns numerical value for that symbol
int typeSelect(int d) {
	if(d >= 0 && d <= 60) { 	     // BELL
 436:	8d 33       	cpi	r24, 0x3D	; 61
 438:	91 05       	cpc	r25, r1
 43a:	e0 f0       	brcs	.+56     	; 0x474 <typeSelect+0x3e>
		return 50;
	}
	else if(d >= 61 && d <= 120) {   // SEVEN
 43c:	9c 01       	movw	r18, r24
 43e:	2d 53       	subi	r18, 0x3D	; 61
 440:	31 09       	sbc	r19, r1
 442:	2c 33       	cpi	r18, 0x3C	; 60
 444:	31 05       	cpc	r19, r1
 446:	c8 f0       	brcs	.+50     	; 0x47a <typeSelect+0x44>
		return 100;
	}	
	else if(d >= 121 && d <= 180) {  // ORANGE 
 448:	2c 53       	subi	r18, 0x3C	; 60
 44a:	31 09       	sbc	r19, r1
 44c:	2c 33       	cpi	r18, 0x3C	; 60
 44e:	31 05       	cpc	r19, r1
 450:	b8 f0       	brcs	.+46     	; 0x480 <typeSelect+0x4a>
		return 60;
	}
	else if(d >= 181 && d <= 240) {  // BAR
 452:	2c 53       	subi	r18, 0x3C	; 60
 454:	31 09       	sbc	r19, r1
 456:	2c 33       	cpi	r18, 0x3C	; 60
 458:	31 05       	cpc	r19, r1
 45a:	a8 f0       	brcs	.+42     	; 0x486 <typeSelect+0x50>
		return 30;
	}
	else if(d >= 241 && d <= 300) {  // CHERRY
 45c:	2c 53       	subi	r18, 0x3C	; 60
 45e:	31 09       	sbc	r19, r1
 460:	2c 33       	cpi	r18, 0x3C	; 60
 462:	31 05       	cpc	r19, r1
 464:	98 f0       	brcs	.+38     	; 0x48c <typeSelect+0x56>
		return 90;
	}
	else if(d >= 301 && d <= 359) {  // LEMON
 466:	8d 52       	subi	r24, 0x2D	; 45
 468:	91 40       	sbci	r25, 0x01	; 1
 46a:	cb 97       	sbiw	r24, 0x3b	; 59
 46c:	90 f0       	brcs	.+36     	; 0x492 <typeSelect+0x5c>
		return 20;
	}
	else {                           // (FAILSAFE)
		return 50;
 46e:	82 e3       	ldi	r24, 0x32	; 50
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	08 95       	ret
}

// Takes in the degree value and returns numerical value for that symbol
int typeSelect(int d) {
	if(d >= 0 && d <= 60) { 	     // BELL
		return 50;
 474:	82 e3       	ldi	r24, 0x32	; 50
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	08 95       	ret
	}
	else if(d >= 61 && d <= 120) {   // SEVEN
		return 100;
 47a:	84 e6       	ldi	r24, 0x64	; 100
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	08 95       	ret
	}	
	else if(d >= 121 && d <= 180) {  // ORANGE 
		return 60;
 480:	8c e3       	ldi	r24, 0x3C	; 60
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	08 95       	ret
	}
	else if(d >= 181 && d <= 240) {  // BAR
		return 30;
 486:	8e e1       	ldi	r24, 0x1E	; 30
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	08 95       	ret
	}
	else if(d >= 241 && d <= 300) {  // CHERRY
		return 90;
 48c:	8a e5       	ldi	r24, 0x5A	; 90
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	08 95       	ret
	}
	else if(d >= 301 && d <= 359) {  // LEMON
		return 20;
 492:	84 e1       	ldi	r24, 0x14	; 20
 494:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {                           // (FAILSAFE)
		return 50;
	}
}
 496:	08 95       	ret

00000498 <MOTOR1_Tick>:
enum motorState {INIT2, IDLE2, CLOCKWISE} motor1_state, motor2_state, motor3_state;
// static int numDegrees;
static int num_phases1, num_phases2, num_phases3; // Number of phases to rotate (D/5.625) * 64
// First motor's tick function-------------------------------------------------
int MOTOR1_Tick() {
	switch(motor1_state) { // Transitions
 498:	80 91 58 01 	lds	r24, 0x0158
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	09 f4       	brne	.+2      	; 0x4a2 <MOTOR1_Tick+0xa>
 4a0:	5f c0       	rjmp	.+190    	; 0x560 <MOTOR1_Tick+0xc8>
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <MOTOR1_Tick+0x14>
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	09 f4       	brne	.+2      	; 0x4aa <MOTOR1_Tick+0x12>
 4a8:	66 c0       	rjmp	.+204    	; 0x576 <MOTOR1_Tick+0xde>
 4aa:	7f c0       	rjmp	.+254    	; 0x5aa <MOTOR1_Tick+0x112>
		case INIT2:
			B1 = 0;
 4ac:	10 92 65 01 	sts	0x0165, r1
			p1 = 0;
 4b0:	10 92 57 01 	sts	0x0157, r1
 4b4:	10 92 56 01 	sts	0x0156, r1
			i  = 0;
 4b8:	10 92 5a 01 	sts	0x015A, r1
 4bc:	10 92 59 01 	sts	0x0159, r1
			if(I > 2) {
 4c0:	80 91 36 01 	lds	r24, 0x0136
 4c4:	90 91 37 01 	lds	r25, 0x0137
 4c8:	83 30       	cpi	r24, 0x03	; 3
 4ca:	91 05       	cpc	r25, r1
 4cc:	4c f0       	brlt	.+18     	; 0x4e0 <MOTOR1_Tick+0x48>
				deg1 = rand() % 360;
 4ce:	97 d4       	rcall	.+2350   	; 0xdfe <rand>
 4d0:	68 e6       	ldi	r22, 0x68	; 104
 4d2:	71 e0       	ldi	r23, 0x01	; 1
 4d4:	17 d4       	rcall	.+2094   	; 0xd04 <__divmodhi4>
 4d6:	90 93 3d 01 	sts	0x013D, r25
 4da:	80 93 3c 01 	sts	0x013C, r24
 4de:	10 c0       	rjmp	.+32     	; 0x500 <MOTOR1_Tick+0x68>
			}
			else {
				deg1 = test1[I];
 4e0:	fc 01       	movw	r30, r24
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	e0 5e       	subi	r30, 0xE0	; 224
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	20 81       	ld	r18, Z
 4ec:	31 81       	ldd	r19, Z+1	; 0x01
 4ee:	30 93 3d 01 	sts	0x013D, r19
 4f2:	20 93 3c 01 	sts	0x013C, r18
				++ I;
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	90 93 37 01 	sts	0x0137, r25
 4fc:	80 93 36 01 	sts	0x0136, r24
			}
			D1 = (D1 + deg1) % 360;
 500:	e0 91 3c 01 	lds	r30, 0x013C
 504:	f0 91 3d 01 	lds	r31, 0x013D
 508:	40 91 42 01 	lds	r20, 0x0142
 50c:	50 91 43 01 	lds	r21, 0x0143
 510:	4e 0f       	add	r20, r30
 512:	5f 1f       	adc	r21, r31
 514:	9a 01       	movw	r18, r20
 516:	a3 e8       	ldi	r26, 0x83	; 131
 518:	bd e2       	ldi	r27, 0x2D	; 45
 51a:	07 d4       	rcall	.+2062   	; 0xd2a <__umulhisi3>
 51c:	00 24       	eor	r0, r0
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	00 1c       	adc	r0, r0
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	00 1c       	adc	r0, r0
 52a:	89 2f       	mov	r24, r25
 52c:	90 2d       	mov	r25, r0
 52e:	68 e6       	ldi	r22, 0x68	; 104
 530:	71 e0       	ldi	r23, 0x01	; 1
 532:	86 9f       	mul	r24, r22
 534:	90 01       	movw	r18, r0
 536:	87 9f       	mul	r24, r23
 538:	30 0d       	add	r19, r0
 53a:	96 9f       	mul	r25, r22
 53c:	30 0d       	add	r19, r0
 53e:	11 24       	eor	r1, r1
 540:	42 1b       	sub	r20, r18
 542:	53 0b       	sbc	r21, r19
 544:	50 93 43 01 	sts	0x0143, r21
 548:	40 93 42 01 	sts	0x0142, r20
			num_phases1 = degConv(deg1);
 54c:	cf 01       	movw	r24, r30
 54e:	61 df       	rcall	.-318    	; 0x412 <degConv>
 550:	90 93 31 01 	sts	0x0131, r25
 554:	80 93 30 01 	sts	0x0130, r24
 			motor1_state = IDLE2;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	80 93 58 01 	sts	0x0158, r24
		break;
 55e:	58 c0       	rjmp	.+176    	; 0x610 <MOTOR1_Tick+0x178>

		case IDLE2:
			if(LEVER) {
 560:	80 91 52 01 	lds	r24, 0x0152
 564:	88 23       	and	r24, r24
 566:	09 f4       	brne	.+2      	; 0x56a <MOTOR1_Tick+0xd2>
 568:	47 c0       	rjmp	.+142    	; 0x5f8 <MOTOR1_Tick+0x160>
				B1 = LEVER;
 56a:	80 93 65 01 	sts	0x0165, r24
			}
			if(B1) {
				motor1_state = CLOCKWISE;
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	80 93 58 01 	sts	0x0158, r24
 574:	46 c0       	rjmp	.+140    	; 0x602 <MOTOR1_Tick+0x16a>
				// Do nothing
			}
		break;

		case CLOCKWISE:
			if( p1 >= num_phases1) { // Done spinning
 576:	20 91 56 01 	lds	r18, 0x0156
 57a:	30 91 57 01 	lds	r19, 0x0157
 57e:	80 91 30 01 	lds	r24, 0x0130
 582:	90 91 31 01 	lds	r25, 0x0131
 586:	28 17       	cp	r18, r24
 588:	39 07       	cpc	r19, r25
 58a:	dc f1       	brlt	.+118    	; 0x602 <MOTOR1_Tick+0x16a>
				Done1 = 1;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	80 93 51 01 	sts	0x0151, r24
				T1 = typeSelect(D1);
 592:	80 91 42 01 	lds	r24, 0x0142
 596:	90 91 43 01 	lds	r25, 0x0143
 59a:	4d df       	rcall	.-358    	; 0x436 <typeSelect>
 59c:	90 93 61 01 	sts	0x0161, r25
 5a0:	80 93 60 01 	sts	0x0160, r24
				motor1_state = INIT2;
 5a4:	10 92 58 01 	sts	0x0158, r1
 5a8:	33 c0       	rjmp	.+102    	; 0x610 <MOTOR1_Tick+0x178>
			}
		break;

		default:
			motor1_state = INIT2;
 5aa:	10 92 58 01 	sts	0x0158, r1
		break;
 5ae:	30 c0       	rjmp	.+96     	; 0x610 <MOTOR1_Tick+0x178>
			// Do nothing
		break;
 
		case CLOCKWISE:
			if(i > 6) { // Looping back the motor phase
				i = 0;
 5b0:	10 92 5a 01 	sts	0x015A, r1
 5b4:	10 92 59 01 	sts	0x0159, r1
			}
			PORTA = (PORTA & 0xF0); // Clear lower nibble
 5b8:	82 b1       	in	r24, 0x02	; 2
 5ba:	80 7f       	andi	r24, 0xF0	; 240
 5bc:	82 b9       	out	0x02, r24	; 2
			PORTA = (PORTA | motorPhase[i]); // Set lower nibble to phase value
 5be:	92 b1       	in	r25, 0x02	; 2
 5c0:	e0 91 59 01 	lds	r30, 0x0159
 5c4:	f0 91 5a 01 	lds	r31, 0x015A
 5c8:	e4 5f       	subi	r30, 0xF4	; 244
 5ca:	fe 4f       	sbci	r31, 0xFE	; 254
 5cc:	80 81       	ld	r24, Z
 5ce:	89 2b       	or	r24, r25
 5d0:	82 b9       	out	0x02, r24	; 2

			++ i;
 5d2:	80 91 59 01 	lds	r24, 0x0159
 5d6:	90 91 5a 01 	lds	r25, 0x015A
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	90 93 5a 01 	sts	0x015A, r25
 5e0:	80 93 59 01 	sts	0x0159, r24
			++ p1;
 5e4:	80 91 56 01 	lds	r24, 0x0156
 5e8:	90 91 57 01 	lds	r25, 0x0157
 5ec:	01 96       	adiw	r24, 0x01	; 1
 5ee:	90 93 57 01 	sts	0x0157, r25
 5f2:	80 93 56 01 	sts	0x0156, r24
		break;
 5f6:	0c c0       	rjmp	.+24     	; 0x610 <MOTOR1_Tick+0x178>

		case IDLE2:
			if(LEVER) {
				B1 = LEVER;
			}
			if(B1) {
 5f8:	80 91 65 01 	lds	r24, 0x0165
 5fc:	88 23       	and	r24, r24
 5fe:	41 f0       	breq	.+16     	; 0x610 <MOTOR1_Tick+0x178>
 600:	b6 cf       	rjmp	.-148    	; 0x56e <MOTOR1_Tick+0xd6>
		case IDLE2:
			// Do nothing
		break;
 
		case CLOCKWISE:
			if(i > 6) { // Looping back the motor phase
 602:	80 91 59 01 	lds	r24, 0x0159
 606:	90 91 5a 01 	lds	r25, 0x015A
 60a:	07 97       	sbiw	r24, 0x07	; 7
 60c:	8c f6       	brge	.-94     	; 0x5b0 <MOTOR1_Tick+0x118>
 60e:	d4 cf       	rjmp	.-88     	; 0x5b8 <MOTOR1_Tick+0x120>
		
		default:
			// Do nothing
		break;
	}
}
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	08 95       	ret

00000616 <MOTOR2_Tick>:
// Second motor's tick function------------------------------------------------
// Shifted motorPhase for use in upper nibble of PORTA and PORTD
unsigned char motorPhase2[] = {0x10, 0x30, 0x20, 0x60, 0x40, 0xC0, 0x80, 0x90}; // A, AB, B, BC, C, CD, D

int MOTOR2_Tick() {
	switch(motor2_state) { // Transitions
 616:	80 91 66 01 	lds	r24, 0x0166
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	09 f4       	brne	.+2      	; 0x620 <MOTOR2_Tick+0xa>
 61e:	5f c0       	rjmp	.+190    	; 0x6de <MOTOR2_Tick+0xc8>
 620:	20 f0       	brcs	.+8      	; 0x62a <MOTOR2_Tick+0x14>
 622:	82 30       	cpi	r24, 0x02	; 2
 624:	09 f4       	brne	.+2      	; 0x628 <MOTOR2_Tick+0x12>
 626:	66 c0       	rjmp	.+204    	; 0x6f4 <MOTOR2_Tick+0xde>
 628:	7f c0       	rjmp	.+254    	; 0x728 <MOTOR2_Tick+0x112>
		case INIT2:
			B2 = 0;
 62a:	10 92 5f 01 	sts	0x015F, r1
			p2 = 0;
 62e:	10 92 50 01 	sts	0x0150, r1
 632:	10 92 4f 01 	sts	0x014F, r1
			j = 0;
 636:	10 92 4c 01 	sts	0x014C, r1
 63a:	10 92 4b 01 	sts	0x014B, r1
			//deg2 = 30;
			if(J > 2) {
 63e:	80 91 34 01 	lds	r24, 0x0134
 642:	90 91 35 01 	lds	r25, 0x0135
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	91 05       	cpc	r25, r1
 64a:	4c f0       	brlt	.+18     	; 0x65e <MOTOR2_Tick+0x48>
				deg2 = rand() % 360;
 64c:	d8 d3       	rcall	.+1968   	; 0xdfe <rand>
 64e:	68 e6       	ldi	r22, 0x68	; 104
 650:	71 e0       	ldi	r23, 0x01	; 1
 652:	58 d3       	rcall	.+1712   	; 0xd04 <__divmodhi4>
 654:	90 93 3b 01 	sts	0x013B, r25
 658:	80 93 3a 01 	sts	0x013A, r24
 65c:	10 c0       	rjmp	.+32     	; 0x67e <MOTOR2_Tick+0x68>
			}
			else {
				deg2 = test2[J];
 65e:	fc 01       	movw	r30, r24
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	e6 5e       	subi	r30, 0xE6	; 230
 666:	fe 4f       	sbci	r31, 0xFE	; 254
 668:	20 81       	ld	r18, Z
 66a:	31 81       	ldd	r19, Z+1	; 0x01
 66c:	30 93 3b 01 	sts	0x013B, r19
 670:	20 93 3a 01 	sts	0x013A, r18
				++ J;
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	90 93 35 01 	sts	0x0135, r25
 67a:	80 93 34 01 	sts	0x0134, r24
			}
			D2 = (D2 + deg2) % 360;
 67e:	e0 91 3a 01 	lds	r30, 0x013A
 682:	f0 91 3b 01 	lds	r31, 0x013B
 686:	40 91 40 01 	lds	r20, 0x0140
 68a:	50 91 41 01 	lds	r21, 0x0141
 68e:	4e 0f       	add	r20, r30
 690:	5f 1f       	adc	r21, r31
 692:	9a 01       	movw	r18, r20
 694:	a3 e8       	ldi	r26, 0x83	; 131
 696:	bd e2       	ldi	r27, 0x2D	; 45
 698:	48 d3       	rcall	.+1680   	; 0xd2a <__umulhisi3>
 69a:	00 24       	eor	r0, r0
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	00 1c       	adc	r0, r0
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	00 1c       	adc	r0, r0
 6a8:	89 2f       	mov	r24, r25
 6aa:	90 2d       	mov	r25, r0
 6ac:	68 e6       	ldi	r22, 0x68	; 104
 6ae:	71 e0       	ldi	r23, 0x01	; 1
 6b0:	86 9f       	mul	r24, r22
 6b2:	90 01       	movw	r18, r0
 6b4:	87 9f       	mul	r24, r23
 6b6:	30 0d       	add	r19, r0
 6b8:	96 9f       	mul	r25, r22
 6ba:	30 0d       	add	r19, r0
 6bc:	11 24       	eor	r1, r1
 6be:	42 1b       	sub	r20, r18
 6c0:	53 0b       	sbc	r21, r19
 6c2:	50 93 41 01 	sts	0x0141, r21
 6c6:	40 93 40 01 	sts	0x0140, r20
			num_phases2 = degConv(deg2);
 6ca:	cf 01       	movw	r24, r30
 6cc:	a2 de       	rcall	.-700    	; 0x412 <degConv>
 6ce:	90 93 2f 01 	sts	0x012F, r25
 6d2:	80 93 2e 01 	sts	0x012E, r24
			motor2_state = IDLE2;
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	80 93 66 01 	sts	0x0166, r24
		break;
 6dc:	58 c0       	rjmp	.+176    	; 0x78e <MOTOR2_Tick+0x178>

		case IDLE2:
			if(LEVER) {
 6de:	80 91 52 01 	lds	r24, 0x0152
 6e2:	88 23       	and	r24, r24
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <MOTOR2_Tick+0xd2>
 6e6:	47 c0       	rjmp	.+142    	; 0x776 <MOTOR2_Tick+0x160>
				B2 = LEVER;
 6e8:	80 93 5f 01 	sts	0x015F, r24
			}
			if(B2) {
				motor2_state = CLOCKWISE;
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	80 93 66 01 	sts	0x0166, r24
 6f2:	46 c0       	rjmp	.+140    	; 0x780 <MOTOR2_Tick+0x16a>
				// Do nothing
			}
		break;

		case CLOCKWISE:
			if( p2 >= num_phases2) { // Done spinning
 6f4:	20 91 4f 01 	lds	r18, 0x014F
 6f8:	30 91 50 01 	lds	r19, 0x0150
 6fc:	80 91 2e 01 	lds	r24, 0x012E
 700:	90 91 2f 01 	lds	r25, 0x012F
 704:	28 17       	cp	r18, r24
 706:	39 07       	cpc	r19, r25
 708:	dc f1       	brlt	.+118    	; 0x780 <MOTOR2_Tick+0x16a>
				Done2 = 1;
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	80 93 5e 01 	sts	0x015E, r24
				T2 = typeSelect(D2);
 710:	80 91 40 01 	lds	r24, 0x0140
 714:	90 91 41 01 	lds	r25, 0x0141
 718:	8e de       	rcall	.-740    	; 0x436 <typeSelect>
 71a:	90 93 4a 01 	sts	0x014A, r25
 71e:	80 93 49 01 	sts	0x0149, r24
				motor2_state = INIT2;
 722:	10 92 66 01 	sts	0x0166, r1
 726:	33 c0       	rjmp	.+102    	; 0x78e <MOTOR2_Tick+0x178>
			}
		break;

		default:
			motor2_state = INIT2;
 728:	10 92 66 01 	sts	0x0166, r1
		break;
 72c:	30 c0       	rjmp	.+96     	; 0x78e <MOTOR2_Tick+0x178>
			// Do nothing
		break;

		case CLOCKWISE:
			if(j > 6) { // Looping back the motor phase
				j = 0;
 72e:	10 92 4c 01 	sts	0x014C, r1
 732:	10 92 4b 01 	sts	0x014B, r1
			}

			PORTA = (PORTA & 0x0F); // Clear upper nibble			
 736:	82 b1       	in	r24, 0x02	; 2
 738:	8f 70       	andi	r24, 0x0F	; 15
 73a:	82 b9       	out	0x02, r24	; 2
			PORTA =  (PORTA | motorPhase2[j]);
 73c:	92 b1       	in	r25, 0x02	; 2
 73e:	e0 91 4b 01 	lds	r30, 0x014B
 742:	f0 91 4c 01 	lds	r31, 0x014C
 746:	ec 5f       	subi	r30, 0xFC	; 252
 748:	fe 4f       	sbci	r31, 0xFE	; 254
 74a:	80 81       	ld	r24, Z
 74c:	89 2b       	or	r24, r25
 74e:	82 b9       	out	0x02, r24	; 2

			++ j;
 750:	80 91 4b 01 	lds	r24, 0x014B
 754:	90 91 4c 01 	lds	r25, 0x014C
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	90 93 4c 01 	sts	0x014C, r25
 75e:	80 93 4b 01 	sts	0x014B, r24
			++ p2;
 762:	80 91 4f 01 	lds	r24, 0x014F
 766:	90 91 50 01 	lds	r25, 0x0150
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	90 93 50 01 	sts	0x0150, r25
 770:	80 93 4f 01 	sts	0x014F, r24
		break;
 774:	0c c0       	rjmp	.+24     	; 0x78e <MOTOR2_Tick+0x178>

		case IDLE2:
			if(LEVER) {
				B2 = LEVER;
			}
			if(B2) {
 776:	80 91 5f 01 	lds	r24, 0x015F
 77a:	88 23       	and	r24, r24
 77c:	41 f0       	breq	.+16     	; 0x78e <MOTOR2_Tick+0x178>
 77e:	b6 cf       	rjmp	.-148    	; 0x6ec <MOTOR2_Tick+0xd6>
		case IDLE2:
			// Do nothing
		break;

		case CLOCKWISE:
			if(j > 6) { // Looping back the motor phase
 780:	80 91 4b 01 	lds	r24, 0x014B
 784:	90 91 4c 01 	lds	r25, 0x014C
 788:	07 97       	sbiw	r24, 0x07	; 7
 78a:	8c f6       	brge	.-94     	; 0x72e <MOTOR2_Tick+0x118>
 78c:	d4 cf       	rjmp	.-88     	; 0x736 <MOTOR2_Tick+0x120>
		
		default:
			// Do nothing
		break;
	}
}
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	08 95       	ret

00000794 <MOTOR3_Tick>:

// Third motor's tick function-------------------------------------------------
int MOTOR3_Tick() {
	switch(motor3_state) { // Transitions
 794:	80 91 55 01 	lds	r24, 0x0155
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	09 f4       	brne	.+2      	; 0x79e <MOTOR3_Tick+0xa>
 79c:	5f c0       	rjmp	.+190    	; 0x85c <MOTOR3_Tick+0xc8>
 79e:	20 f0       	brcs	.+8      	; 0x7a8 <MOTOR3_Tick+0x14>
 7a0:	82 30       	cpi	r24, 0x02	; 2
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <MOTOR3_Tick+0x12>
 7a4:	66 c0       	rjmp	.+204    	; 0x872 <MOTOR3_Tick+0xde>
 7a6:	7f c0       	rjmp	.+254    	; 0x8a6 <MOTOR3_Tick+0x112>
		case INIT2:
			B3 = 0;
 7a8:	10 92 67 01 	sts	0x0167, r1
			p3 = 0;
 7ac:	10 92 64 01 	sts	0x0164, r1
 7b0:	10 92 63 01 	sts	0x0163, r1
			k = 0;
 7b4:	10 92 54 01 	sts	0x0154, r1
 7b8:	10 92 53 01 	sts	0x0153, r1
			//deg3 = 30;
			if(K > 2) {
 7bc:	80 91 32 01 	lds	r24, 0x0132
 7c0:	90 91 33 01 	lds	r25, 0x0133
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	91 05       	cpc	r25, r1
 7c8:	4c f0       	brlt	.+18     	; 0x7dc <MOTOR3_Tick+0x48>
				deg3 = rand() % 360;
 7ca:	19 d3       	rcall	.+1586   	; 0xdfe <rand>
 7cc:	68 e6       	ldi	r22, 0x68	; 104
 7ce:	71 e0       	ldi	r23, 0x01	; 1
 7d0:	99 d2       	rcall	.+1330   	; 0xd04 <__divmodhi4>
 7d2:	90 93 39 01 	sts	0x0139, r25
 7d6:	80 93 38 01 	sts	0x0138, r24
 7da:	10 c0       	rjmp	.+32     	; 0x7fc <MOTOR3_Tick+0x68>
			}
			else {
				deg3 = test3[K];
 7dc:	fc 01       	movw	r30, r24
 7de:	ee 0f       	add	r30, r30
 7e0:	ff 1f       	adc	r31, r31
 7e2:	ec 5e       	subi	r30, 0xEC	; 236
 7e4:	fe 4f       	sbci	r31, 0xFE	; 254
 7e6:	20 81       	ld	r18, Z
 7e8:	31 81       	ldd	r19, Z+1	; 0x01
 7ea:	30 93 39 01 	sts	0x0139, r19
 7ee:	20 93 38 01 	sts	0x0138, r18
				++ K;
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	90 93 33 01 	sts	0x0133, r25
 7f8:	80 93 32 01 	sts	0x0132, r24
			}
			D3 = (D3 + deg3) % 360;
 7fc:	e0 91 38 01 	lds	r30, 0x0138
 800:	f0 91 39 01 	lds	r31, 0x0139
 804:	40 91 3e 01 	lds	r20, 0x013E
 808:	50 91 3f 01 	lds	r21, 0x013F
 80c:	4e 0f       	add	r20, r30
 80e:	5f 1f       	adc	r21, r31
 810:	9a 01       	movw	r18, r20
 812:	a3 e8       	ldi	r26, 0x83	; 131
 814:	bd e2       	ldi	r27, 0x2D	; 45
 816:	89 d2       	rcall	.+1298   	; 0xd2a <__umulhisi3>
 818:	00 24       	eor	r0, r0
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	00 1c       	adc	r0, r0
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	00 1c       	adc	r0, r0
 826:	89 2f       	mov	r24, r25
 828:	90 2d       	mov	r25, r0
 82a:	68 e6       	ldi	r22, 0x68	; 104
 82c:	71 e0       	ldi	r23, 0x01	; 1
 82e:	86 9f       	mul	r24, r22
 830:	90 01       	movw	r18, r0
 832:	87 9f       	mul	r24, r23
 834:	30 0d       	add	r19, r0
 836:	96 9f       	mul	r25, r22
 838:	30 0d       	add	r19, r0
 83a:	11 24       	eor	r1, r1
 83c:	42 1b       	sub	r20, r18
 83e:	53 0b       	sbc	r21, r19
 840:	50 93 3f 01 	sts	0x013F, r21
 844:	40 93 3e 01 	sts	0x013E, r20
			num_phases3 = degConv(deg3);
 848:	cf 01       	movw	r24, r30
 84a:	e3 dd       	rcall	.-1082   	; 0x412 <degConv>
 84c:	90 93 2d 01 	sts	0x012D, r25
 850:	80 93 2c 01 	sts	0x012C, r24
			motor3_state = IDLE2;
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	80 93 55 01 	sts	0x0155, r24
		break;
 85a:	58 c0       	rjmp	.+176    	; 0x90c <MOTOR3_Tick+0x178>

		case IDLE2:
			if(LEVER) {
 85c:	80 91 52 01 	lds	r24, 0x0152
 860:	88 23       	and	r24, r24
 862:	09 f4       	brne	.+2      	; 0x866 <MOTOR3_Tick+0xd2>
 864:	47 c0       	rjmp	.+142    	; 0x8f4 <MOTOR3_Tick+0x160>
				B3 = LEVER;
 866:	80 93 67 01 	sts	0x0167, r24
			}

			if(B3) {
				//k = M_STATES;
				motor3_state = CLOCKWISE;
 86a:	82 e0       	ldi	r24, 0x02	; 2
 86c:	80 93 55 01 	sts	0x0155, r24
 870:	46 c0       	rjmp	.+140    	; 0x8fe <MOTOR3_Tick+0x16a>
				// Do nothing
			}
		break;

		case CLOCKWISE:
			if( p3 >= num_phases3) { // Done spinning
 872:	20 91 63 01 	lds	r18, 0x0163
 876:	30 91 64 01 	lds	r19, 0x0164
 87a:	80 91 2c 01 	lds	r24, 0x012C
 87e:	90 91 2d 01 	lds	r25, 0x012D
 882:	28 17       	cp	r18, r24
 884:	39 07       	cpc	r19, r25
 886:	dc f1       	brlt	.+118    	; 0x8fe <MOTOR3_Tick+0x16a>
				Done3 = 1;
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	80 93 62 01 	sts	0x0162, r24
				T3 = typeSelect(D3);
 88e:	80 91 3e 01 	lds	r24, 0x013E
 892:	90 91 3f 01 	lds	r25, 0x013F
 896:	cf dd       	rcall	.-1122   	; 0x436 <typeSelect>
 898:	90 93 5c 01 	sts	0x015C, r25
 89c:	80 93 5b 01 	sts	0x015B, r24
				motor3_state = INIT2;
 8a0:	10 92 55 01 	sts	0x0155, r1
 8a4:	33 c0       	rjmp	.+102    	; 0x90c <MOTOR3_Tick+0x178>
			}
		break;

		default:
			motor3_state = INIT2;
 8a6:	10 92 55 01 	sts	0x0155, r1
		break;
 8aa:	30 c0       	rjmp	.+96     	; 0x90c <MOTOR3_Tick+0x178>
			// Do nothing
		break;

		case CLOCKWISE:
			if(k > 6) { // Looping back the motor phase
				k = 0;
 8ac:	10 92 54 01 	sts	0x0154, r1
 8b0:	10 92 53 01 	sts	0x0153, r1
			}
			
			PORTD = (PORTD & 0x0F); // Clear upper nibble			
 8b4:	8b b1       	in	r24, 0x0b	; 11
 8b6:	8f 70       	andi	r24, 0x0F	; 15
 8b8:	8b b9       	out	0x0b, r24	; 11
			PORTD =  (PORTD | motorPhase2[k]);
 8ba:	9b b1       	in	r25, 0x0b	; 11
 8bc:	e0 91 53 01 	lds	r30, 0x0153
 8c0:	f0 91 54 01 	lds	r31, 0x0154
 8c4:	ec 5f       	subi	r30, 0xFC	; 252
 8c6:	fe 4f       	sbci	r31, 0xFE	; 254
 8c8:	80 81       	ld	r24, Z
 8ca:	89 2b       	or	r24, r25
 8cc:	8b b9       	out	0x0b, r24	; 11

			++ k;
 8ce:	80 91 53 01 	lds	r24, 0x0153
 8d2:	90 91 54 01 	lds	r25, 0x0154
 8d6:	01 96       	adiw	r24, 0x01	; 1
 8d8:	90 93 54 01 	sts	0x0154, r25
 8dc:	80 93 53 01 	sts	0x0153, r24
			++ p3;
 8e0:	80 91 63 01 	lds	r24, 0x0163
 8e4:	90 91 64 01 	lds	r25, 0x0164
 8e8:	01 96       	adiw	r24, 0x01	; 1
 8ea:	90 93 64 01 	sts	0x0164, r25
 8ee:	80 93 63 01 	sts	0x0163, r24
		break;
 8f2:	0c c0       	rjmp	.+24     	; 0x90c <MOTOR3_Tick+0x178>
		case IDLE2:
			if(LEVER) {
				B3 = LEVER;
			}

			if(B3) {
 8f4:	80 91 67 01 	lds	r24, 0x0167
 8f8:	88 23       	and	r24, r24
 8fa:	41 f0       	breq	.+16     	; 0x90c <MOTOR3_Tick+0x178>
 8fc:	b6 cf       	rjmp	.-148    	; 0x86a <MOTOR3_Tick+0xd6>
		case IDLE2:
			// Do nothing
		break;

		case CLOCKWISE:
			if(k > 6) { // Looping back the motor phase
 8fe:	80 91 53 01 	lds	r24, 0x0153
 902:	90 91 54 01 	lds	r25, 0x0154
 906:	07 97       	sbiw	r24, 0x07	; 7
 908:	8c f6       	brge	.-94     	; 0x8ac <MOTOR3_Tick+0x118>
 90a:	d4 cf       	rjmp	.-88     	; 0x8b4 <MOTOR3_Tick+0x120>
		
		default:
			// Do nothing
		break;
	}
}
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	08 95       	ret

00000912 <main>:

///////////////////////////////////////////////////////////////////////////////
// Main function
int main(void) {
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
 91a:	ac 97       	sbiw	r28, 0x2c	; 44
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	f8 94       	cli
 920:	de bf       	out	0x3e, r29	; 62
 922:	0f be       	out	0x3f, r0	; 63
 924:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PORTA = 0x00; // A outputs motor phases
 926:	1f ef       	ldi	r17, 0xFF	; 255
 928:	11 b9       	out	0x01, r17	; 1
 92a:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF; // B gets button input
 92c:	14 b8       	out	0x04, r1	; 4
 92e:	15 b9       	out	0x05, r17	; 5
	//DDRC = 0xFF; PORTC = 0x00; // C outputs motor phases
	DDRD = 0xFF; PORTD = 0x00; // D outputs motor phases
 930:	1a b9       	out	0x0a, r17	; 10
 932:	1b b8       	out	0x0b, r1	; 11

	// Initialize UART 
	initUSART(0); // Used to receive data
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	a3 dc       	rcall	.-1722   	; 0x27e <initUSART>
	initUSART(1); // Used to send data
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	a1 dc       	rcall	.-1726   	; 0x27e <initUSART>

	// Initialize rand
	srand(7);
 93c:	87 e0       	ldi	r24, 0x07	; 7
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	61 d2       	rcall	.+1218   	; 0xe04 <srand>

	// Scheduler task setup
	tasksNum = 4;    		   // Declare number of tasks
 942:	84 e0       	ldi	r24, 0x04	; 4
 944:	80 93 44 01 	sts	0x0144, r24
	task myTasks[tasksNum];    // Initialize the task array
	tasks = myTasks; 		   // Set the task array
 948:	ce 01       	movw	r24, r28
 94a:	01 96       	adiw	r24, 0x01	; 1
 94c:	90 93 4e 01 	sts	0x014E, r25
 950:	80 93 4d 01 	sts	0x014D, r24

	// Task initialization
	unsigned char _i = 0;

	tasks[_i].state = -1;
 954:	19 83       	std	Y+1, r17	; 0x01
	tasks[_i].period = 2;
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	a0 e0       	ldi	r26, 0x00	; 0
 95c:	b0 e0       	ldi	r27, 0x00	; 0
 95e:	8a 83       	std	Y+2, r24	; 0x02
 960:	9b 83       	std	Y+3, r25	; 0x03
 962:	ac 83       	std	Y+4, r26	; 0x04
 964:	bd 83       	std	Y+5, r27	; 0x05
	tasks[_i].elapsedTime = tasks[_i].period;
 966:	8e 83       	std	Y+6, r24	; 0x06
 968:	9f 83       	std	Y+7, r25	; 0x07
 96a:	a8 87       	std	Y+8, r26	; 0x08
 96c:	b9 87       	std	Y+9, r27	; 0x09
	tasks[_i].TickFct = &LEADER_Tick;
 96e:	26 ea       	ldi	r18, 0xA6	; 166
 970:	31 e0       	ldi	r19, 0x01	; 1
 972:	3b 87       	std	Y+11, r19	; 0x0b
 974:	2a 87       	std	Y+10, r18	; 0x0a
	
	++ _i;

	tasks[_i].state = -1;
 976:	1c 87       	std	Y+12, r17	; 0x0c
	tasks[_i].period = 2;
 978:	8d 87       	std	Y+13, r24	; 0x0d
 97a:	9e 87       	std	Y+14, r25	; 0x0e
 97c:	af 87       	std	Y+15, r26	; 0x0f
 97e:	b8 8b       	std	Y+16, r27	; 0x10
	tasks[_i].elapsedTime = tasks[_i].period;
 980:	89 8b       	std	Y+17, r24	; 0x11
 982:	9a 8b       	std	Y+18, r25	; 0x12
 984:	ab 8b       	std	Y+19, r26	; 0x13
 986:	bc 8b       	std	Y+20, r27	; 0x14
	tasks[_i].TickFct = &MOTOR1_Tick;
 988:	2c e4       	ldi	r18, 0x4C	; 76
 98a:	32 e0       	ldi	r19, 0x02	; 2
 98c:	3e 8b       	std	Y+22, r19	; 0x16
 98e:	2d 8b       	std	Y+21, r18	; 0x15

	++ _i;

	tasks[_i].state = -1;
 990:	1f 8b       	std	Y+23, r17	; 0x17
	tasks[_i].period = 2;
 992:	88 8f       	std	Y+24, r24	; 0x18
 994:	99 8f       	std	Y+25, r25	; 0x19
 996:	aa 8f       	std	Y+26, r26	; 0x1a
 998:	bb 8f       	std	Y+27, r27	; 0x1b
	tasks[_i].elapsedTime = tasks[_i].period;
 99a:	8c 8f       	std	Y+28, r24	; 0x1c
 99c:	9d 8f       	std	Y+29, r25	; 0x1d
 99e:	ae 8f       	std	Y+30, r26	; 0x1e
 9a0:	bf 8f       	std	Y+31, r27	; 0x1f
	tasks[_i].TickFct = &MOTOR2_Tick;
 9a2:	2b e0       	ldi	r18, 0x0B	; 11
 9a4:	33 e0       	ldi	r19, 0x03	; 3
 9a6:	39 a3       	std	Y+33, r19	; 0x21
 9a8:	28 a3       	std	Y+32, r18	; 0x20

	++ _i;

	tasks[_i].state = -1;
 9aa:	1a a3       	std	Y+34, r17	; 0x22
	tasks[_i].period = 2;
 9ac:	8b a3       	std	Y+35, r24	; 0x23
 9ae:	9c a3       	std	Y+36, r25	; 0x24
 9b0:	ad a3       	std	Y+37, r26	; 0x25
 9b2:	be a3       	std	Y+38, r27	; 0x26
	tasks[_i].elapsedTime = tasks[_i].period;
 9b4:	8f a3       	std	Y+39, r24	; 0x27
 9b6:	98 a7       	std	Y+40, r25	; 0x28
 9b8:	a9 a7       	std	Y+41, r26	; 0x29
 9ba:	ba a7       	std	Y+42, r27	; 0x2a
	tasks[_i].TickFct = &MOTOR3_Tick;
 9bc:	8a ec       	ldi	r24, 0xCA	; 202
 9be:	93 e0       	ldi	r25, 0x03	; 3
 9c0:	9c a7       	std	Y+44, r25	; 0x2c
 9c2:	8b a7       	std	Y+43, r24	; 0x2b
}

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	a0 e0       	ldi	r26, 0x00	; 0
 9ca:	b0 e0       	ldi	r27, 0x00	; 0
 9cc:	80 93 26 01 	sts	0x0126, r24
 9d0:	90 93 27 01 	sts	0x0127, r25
 9d4:	a0 93 28 01 	sts	0x0128, r26
 9d8:	b0 93 29 01 	sts	0x0129, r27
	tasksPeriodCntDown = tasksPeriodGCD;
 9dc:	80 93 45 01 	sts	0x0145, r24
 9e0:	90 93 46 01 	sts	0x0146, r25
 9e4:	a0 93 47 01 	sts	0x0147, r26
 9e8:	b0 93 48 01 	sts	0x0148, r27

	// Initialize timer
	TimerSet(GCD_Period); 
	TimerOn();
 9ec:	24 dc       	rcall	.-1976   	; 0x236 <TimerOn>

    while (1) {

    }
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <main+0xdc>

000009f0 <__divsf3>:
 9f0:	0c d0       	rcall	.+24     	; 0xa0a <__divsf3x>
 9f2:	eb c0       	rjmp	.+470    	; 0xbca <__fp_round>
 9f4:	e3 d0       	rcall	.+454    	; 0xbbc <__fp_pscB>
 9f6:	40 f0       	brcs	.+16     	; 0xa08 <__divsf3+0x18>
 9f8:	da d0       	rcall	.+436    	; 0xbae <__fp_pscA>
 9fa:	30 f0       	brcs	.+12     	; 0xa08 <__divsf3+0x18>
 9fc:	21 f4       	brne	.+8      	; 0xa06 <__divsf3+0x16>
 9fe:	5f 3f       	cpi	r21, 0xFF	; 255
 a00:	19 f0       	breq	.+6      	; 0xa08 <__divsf3+0x18>
 a02:	cc c0       	rjmp	.+408    	; 0xb9c <__fp_inf>
 a04:	51 11       	cpse	r21, r1
 a06:	15 c1       	rjmp	.+554    	; 0xc32 <__fp_szero>
 a08:	cf c0       	rjmp	.+414    	; 0xba8 <__fp_nan>

00000a0a <__divsf3x>:
 a0a:	f0 d0       	rcall	.+480    	; 0xbec <__fp_split3>
 a0c:	98 f3       	brcs	.-26     	; 0x9f4 <__divsf3+0x4>

00000a0e <__divsf3_pse>:
 a0e:	99 23       	and	r25, r25
 a10:	c9 f3       	breq	.-14     	; 0xa04 <__divsf3+0x14>
 a12:	55 23       	and	r21, r21
 a14:	b1 f3       	breq	.-20     	; 0xa02 <__divsf3+0x12>
 a16:	95 1b       	sub	r25, r21
 a18:	55 0b       	sbc	r21, r21
 a1a:	bb 27       	eor	r27, r27
 a1c:	aa 27       	eor	r26, r26
 a1e:	62 17       	cp	r22, r18
 a20:	73 07       	cpc	r23, r19
 a22:	84 07       	cpc	r24, r20
 a24:	38 f0       	brcs	.+14     	; 0xa34 <__divsf3_pse+0x26>
 a26:	9f 5f       	subi	r25, 0xFF	; 255
 a28:	5f 4f       	sbci	r21, 0xFF	; 255
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	44 1f       	adc	r20, r20
 a30:	aa 1f       	adc	r26, r26
 a32:	a9 f3       	breq	.-22     	; 0xa1e <__divsf3_pse+0x10>
 a34:	33 d0       	rcall	.+102    	; 0xa9c <__divsf3_pse+0x8e>
 a36:	0e 2e       	mov	r0, r30
 a38:	3a f0       	brmi	.+14     	; 0xa48 <__divsf3_pse+0x3a>
 a3a:	e0 e8       	ldi	r30, 0x80	; 128
 a3c:	30 d0       	rcall	.+96     	; 0xa9e <__divsf3_pse+0x90>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	50 40       	sbci	r21, 0x00	; 0
 a42:	e6 95       	lsr	r30
 a44:	00 1c       	adc	r0, r0
 a46:	ca f7       	brpl	.-14     	; 0xa3a <__divsf3_pse+0x2c>
 a48:	29 d0       	rcall	.+82     	; 0xa9c <__divsf3_pse+0x8e>
 a4a:	fe 2f       	mov	r31, r30
 a4c:	27 d0       	rcall	.+78     	; 0xa9c <__divsf3_pse+0x8e>
 a4e:	66 0f       	add	r22, r22
 a50:	77 1f       	adc	r23, r23
 a52:	88 1f       	adc	r24, r24
 a54:	bb 1f       	adc	r27, r27
 a56:	26 17       	cp	r18, r22
 a58:	37 07       	cpc	r19, r23
 a5a:	48 07       	cpc	r20, r24
 a5c:	ab 07       	cpc	r26, r27
 a5e:	b0 e8       	ldi	r27, 0x80	; 128
 a60:	09 f0       	breq	.+2      	; 0xa64 <__divsf3_pse+0x56>
 a62:	bb 0b       	sbc	r27, r27
 a64:	80 2d       	mov	r24, r0
 a66:	bf 01       	movw	r22, r30
 a68:	ff 27       	eor	r31, r31
 a6a:	93 58       	subi	r25, 0x83	; 131
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	2a f0       	brmi	.+10     	; 0xa7a <__divsf3_pse+0x6c>
 a70:	9e 3f       	cpi	r25, 0xFE	; 254
 a72:	51 05       	cpc	r21, r1
 a74:	68 f0       	brcs	.+26     	; 0xa90 <__divsf3_pse+0x82>
 a76:	92 c0       	rjmp	.+292    	; 0xb9c <__fp_inf>
 a78:	dc c0       	rjmp	.+440    	; 0xc32 <__fp_szero>
 a7a:	5f 3f       	cpi	r21, 0xFF	; 255
 a7c:	ec f3       	brlt	.-6      	; 0xa78 <__divsf3_pse+0x6a>
 a7e:	98 3e       	cpi	r25, 0xE8	; 232
 a80:	dc f3       	brlt	.-10     	; 0xa78 <__divsf3_pse+0x6a>
 a82:	86 95       	lsr	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f7 95       	ror	r31
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__divsf3_pse+0x74>
 a90:	88 0f       	add	r24, r24
 a92:	91 1d       	adc	r25, r1
 a94:	96 95       	lsr	r25
 a96:	87 95       	ror	r24
 a98:	97 f9       	bld	r25, 7
 a9a:	08 95       	ret
 a9c:	e1 e0       	ldi	r30, 0x01	; 1
 a9e:	66 0f       	add	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	88 1f       	adc	r24, r24
 aa4:	bb 1f       	adc	r27, r27
 aa6:	62 17       	cp	r22, r18
 aa8:	73 07       	cpc	r23, r19
 aaa:	84 07       	cpc	r24, r20
 aac:	ba 07       	cpc	r27, r26
 aae:	20 f0       	brcs	.+8      	; 0xab8 <__divsf3_pse+0xaa>
 ab0:	62 1b       	sub	r22, r18
 ab2:	73 0b       	sbc	r23, r19
 ab4:	84 0b       	sbc	r24, r20
 ab6:	ba 0b       	sbc	r27, r26
 ab8:	ee 1f       	adc	r30, r30
 aba:	88 f7       	brcc	.-30     	; 0xa9e <__divsf3_pse+0x90>
 abc:	e0 95       	com	r30
 abe:	08 95       	ret

00000ac0 <__fixsfsi>:
 ac0:	04 d0       	rcall	.+8      	; 0xaca <__fixunssfsi>
 ac2:	68 94       	set
 ac4:	b1 11       	cpse	r27, r1
 ac6:	b5 c0       	rjmp	.+362    	; 0xc32 <__fp_szero>
 ac8:	08 95       	ret

00000aca <__fixunssfsi>:
 aca:	98 d0       	rcall	.+304    	; 0xbfc <__fp_splitA>
 acc:	88 f0       	brcs	.+34     	; 0xaf0 <__fixunssfsi+0x26>
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	90 f0       	brcs	.+36     	; 0xaf6 <__fixunssfsi+0x2c>
 ad2:	b9 2f       	mov	r27, r25
 ad4:	99 27       	eor	r25, r25
 ad6:	b7 51       	subi	r27, 0x17	; 23
 ad8:	a0 f0       	brcs	.+40     	; 0xb02 <__fixunssfsi+0x38>
 ada:	d1 f0       	breq	.+52     	; 0xb10 <__fixunssfsi+0x46>
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	1a f0       	brmi	.+6      	; 0xaec <__fixunssfsi+0x22>
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__fixunssfsi+0x12>
 aea:	12 c0       	rjmp	.+36     	; 0xb10 <__fixunssfsi+0x46>
 aec:	b1 30       	cpi	r27, 0x01	; 1
 aee:	81 f0       	breq	.+32     	; 0xb10 <__fixunssfsi+0x46>
 af0:	9f d0       	rcall	.+318    	; 0xc30 <__fp_zero>
 af2:	b1 e0       	ldi	r27, 0x01	; 1
 af4:	08 95       	ret
 af6:	9c c0       	rjmp	.+312    	; 0xc30 <__fp_zero>
 af8:	67 2f       	mov	r22, r23
 afa:	78 2f       	mov	r23, r24
 afc:	88 27       	eor	r24, r24
 afe:	b8 5f       	subi	r27, 0xF8	; 248
 b00:	39 f0       	breq	.+14     	; 0xb10 <__fixunssfsi+0x46>
 b02:	b9 3f       	cpi	r27, 0xF9	; 249
 b04:	cc f3       	brlt	.-14     	; 0xaf8 <__fixunssfsi+0x2e>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b3 95       	inc	r27
 b0e:	d9 f7       	brne	.-10     	; 0xb06 <__fixunssfsi+0x3c>
 b10:	3e f4       	brtc	.+14     	; 0xb20 <__fixunssfsi+0x56>
 b12:	90 95       	com	r25
 b14:	80 95       	com	r24
 b16:	70 95       	com	r23
 b18:	61 95       	neg	r22
 b1a:	7f 4f       	sbci	r23, 0xFF	; 255
 b1c:	8f 4f       	sbci	r24, 0xFF	; 255
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__floatunsisf>:
 b22:	e8 94       	clt
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__floatsisf+0x12>

00000b26 <__floatsisf>:
 b26:	97 fb       	bst	r25, 7
 b28:	3e f4       	brtc	.+14     	; 0xb38 <__floatsisf+0x12>
 b2a:	90 95       	com	r25
 b2c:	80 95       	com	r24
 b2e:	70 95       	com	r23
 b30:	61 95       	neg	r22
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	99 23       	and	r25, r25
 b3a:	a9 f0       	breq	.+42     	; 0xb66 <__floatsisf+0x40>
 b3c:	f9 2f       	mov	r31, r25
 b3e:	96 e9       	ldi	r25, 0x96	; 150
 b40:	bb 27       	eor	r27, r27
 b42:	93 95       	inc	r25
 b44:	f6 95       	lsr	r31
 b46:	87 95       	ror	r24
 b48:	77 95       	ror	r23
 b4a:	67 95       	ror	r22
 b4c:	b7 95       	ror	r27
 b4e:	f1 11       	cpse	r31, r1
 b50:	f8 cf       	rjmp	.-16     	; 0xb42 <__floatsisf+0x1c>
 b52:	fa f4       	brpl	.+62     	; 0xb92 <__floatsisf+0x6c>
 b54:	bb 0f       	add	r27, r27
 b56:	11 f4       	brne	.+4      	; 0xb5c <__floatsisf+0x36>
 b58:	60 ff       	sbrs	r22, 0
 b5a:	1b c0       	rjmp	.+54     	; 0xb92 <__floatsisf+0x6c>
 b5c:	6f 5f       	subi	r22, 0xFF	; 255
 b5e:	7f 4f       	sbci	r23, 0xFF	; 255
 b60:	8f 4f       	sbci	r24, 0xFF	; 255
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <__floatsisf+0x6c>
 b66:	88 23       	and	r24, r24
 b68:	11 f0       	breq	.+4      	; 0xb6e <__floatsisf+0x48>
 b6a:	96 e9       	ldi	r25, 0x96	; 150
 b6c:	11 c0       	rjmp	.+34     	; 0xb90 <__floatsisf+0x6a>
 b6e:	77 23       	and	r23, r23
 b70:	21 f0       	breq	.+8      	; 0xb7a <__floatsisf+0x54>
 b72:	9e e8       	ldi	r25, 0x8E	; 142
 b74:	87 2f       	mov	r24, r23
 b76:	76 2f       	mov	r23, r22
 b78:	05 c0       	rjmp	.+10     	; 0xb84 <__floatsisf+0x5e>
 b7a:	66 23       	and	r22, r22
 b7c:	71 f0       	breq	.+28     	; 0xb9a <__floatsisf+0x74>
 b7e:	96 e8       	ldi	r25, 0x86	; 134
 b80:	86 2f       	mov	r24, r22
 b82:	70 e0       	ldi	r23, 0x00	; 0
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	2a f0       	brmi	.+10     	; 0xb92 <__floatsisf+0x6c>
 b88:	9a 95       	dec	r25
 b8a:	66 0f       	add	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	da f7       	brpl	.-10     	; 0xb88 <__floatsisf+0x62>
 b92:	88 0f       	add	r24, r24
 b94:	96 95       	lsr	r25
 b96:	87 95       	ror	r24
 b98:	97 f9       	bld	r25, 7
 b9a:	08 95       	ret

00000b9c <__fp_inf>:
 b9c:	97 f9       	bld	r25, 7
 b9e:	9f 67       	ori	r25, 0x7F	; 127
 ba0:	80 e8       	ldi	r24, 0x80	; 128
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	08 95       	ret

00000ba8 <__fp_nan>:
 ba8:	9f ef       	ldi	r25, 0xFF	; 255
 baa:	80 ec       	ldi	r24, 0xC0	; 192
 bac:	08 95       	ret

00000bae <__fp_pscA>:
 bae:	00 24       	eor	r0, r0
 bb0:	0a 94       	dec	r0
 bb2:	16 16       	cp	r1, r22
 bb4:	17 06       	cpc	r1, r23
 bb6:	18 06       	cpc	r1, r24
 bb8:	09 06       	cpc	r0, r25
 bba:	08 95       	ret

00000bbc <__fp_pscB>:
 bbc:	00 24       	eor	r0, r0
 bbe:	0a 94       	dec	r0
 bc0:	12 16       	cp	r1, r18
 bc2:	13 06       	cpc	r1, r19
 bc4:	14 06       	cpc	r1, r20
 bc6:	05 06       	cpc	r0, r21
 bc8:	08 95       	ret

00000bca <__fp_round>:
 bca:	09 2e       	mov	r0, r25
 bcc:	03 94       	inc	r0
 bce:	00 0c       	add	r0, r0
 bd0:	11 f4       	brne	.+4      	; 0xbd6 <__fp_round+0xc>
 bd2:	88 23       	and	r24, r24
 bd4:	52 f0       	brmi	.+20     	; 0xbea <__fp_round+0x20>
 bd6:	bb 0f       	add	r27, r27
 bd8:	40 f4       	brcc	.+16     	; 0xbea <__fp_round+0x20>
 bda:	bf 2b       	or	r27, r31
 bdc:	11 f4       	brne	.+4      	; 0xbe2 <__fp_round+0x18>
 bde:	60 ff       	sbrs	r22, 0
 be0:	04 c0       	rjmp	.+8      	; 0xbea <__fp_round+0x20>
 be2:	6f 5f       	subi	r22, 0xFF	; 255
 be4:	7f 4f       	sbci	r23, 0xFF	; 255
 be6:	8f 4f       	sbci	r24, 0xFF	; 255
 be8:	9f 4f       	sbci	r25, 0xFF	; 255
 bea:	08 95       	ret

00000bec <__fp_split3>:
 bec:	57 fd       	sbrc	r21, 7
 bee:	90 58       	subi	r25, 0x80	; 128
 bf0:	44 0f       	add	r20, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	59 f0       	breq	.+22     	; 0xc0c <__fp_splitA+0x10>
 bf6:	5f 3f       	cpi	r21, 0xFF	; 255
 bf8:	71 f0       	breq	.+28     	; 0xc16 <__fp_splitA+0x1a>
 bfa:	47 95       	ror	r20

00000bfc <__fp_splitA>:
 bfc:	88 0f       	add	r24, r24
 bfe:	97 fb       	bst	r25, 7
 c00:	99 1f       	adc	r25, r25
 c02:	61 f0       	breq	.+24     	; 0xc1c <__fp_splitA+0x20>
 c04:	9f 3f       	cpi	r25, 0xFF	; 255
 c06:	79 f0       	breq	.+30     	; 0xc26 <__fp_splitA+0x2a>
 c08:	87 95       	ror	r24
 c0a:	08 95       	ret
 c0c:	12 16       	cp	r1, r18
 c0e:	13 06       	cpc	r1, r19
 c10:	14 06       	cpc	r1, r20
 c12:	55 1f       	adc	r21, r21
 c14:	f2 cf       	rjmp	.-28     	; 0xbfa <__fp_split3+0xe>
 c16:	46 95       	lsr	r20
 c18:	f1 df       	rcall	.-30     	; 0xbfc <__fp_splitA>
 c1a:	08 c0       	rjmp	.+16     	; 0xc2c <__fp_splitA+0x30>
 c1c:	16 16       	cp	r1, r22
 c1e:	17 06       	cpc	r1, r23
 c20:	18 06       	cpc	r1, r24
 c22:	99 1f       	adc	r25, r25
 c24:	f1 cf       	rjmp	.-30     	; 0xc08 <__fp_splitA+0xc>
 c26:	86 95       	lsr	r24
 c28:	71 05       	cpc	r23, r1
 c2a:	61 05       	cpc	r22, r1
 c2c:	08 94       	sec
 c2e:	08 95       	ret

00000c30 <__fp_zero>:
 c30:	e8 94       	clt

00000c32 <__fp_szero>:
 c32:	bb 27       	eor	r27, r27
 c34:	66 27       	eor	r22, r22
 c36:	77 27       	eor	r23, r23
 c38:	cb 01       	movw	r24, r22
 c3a:	97 f9       	bld	r25, 7
 c3c:	08 95       	ret

00000c3e <__mulsf3>:
 c3e:	0b d0       	rcall	.+22     	; 0xc56 <__mulsf3x>
 c40:	c4 cf       	rjmp	.-120    	; 0xbca <__fp_round>
 c42:	b5 df       	rcall	.-150    	; 0xbae <__fp_pscA>
 c44:	28 f0       	brcs	.+10     	; 0xc50 <__mulsf3+0x12>
 c46:	ba df       	rcall	.-140    	; 0xbbc <__fp_pscB>
 c48:	18 f0       	brcs	.+6      	; 0xc50 <__mulsf3+0x12>
 c4a:	95 23       	and	r25, r21
 c4c:	09 f0       	breq	.+2      	; 0xc50 <__mulsf3+0x12>
 c4e:	a6 cf       	rjmp	.-180    	; 0xb9c <__fp_inf>
 c50:	ab cf       	rjmp	.-170    	; 0xba8 <__fp_nan>
 c52:	11 24       	eor	r1, r1
 c54:	ee cf       	rjmp	.-36     	; 0xc32 <__fp_szero>

00000c56 <__mulsf3x>:
 c56:	ca df       	rcall	.-108    	; 0xbec <__fp_split3>
 c58:	a0 f3       	brcs	.-24     	; 0xc42 <__mulsf3+0x4>

00000c5a <__mulsf3_pse>:
 c5a:	95 9f       	mul	r25, r21
 c5c:	d1 f3       	breq	.-12     	; 0xc52 <__mulsf3+0x14>
 c5e:	95 0f       	add	r25, r21
 c60:	50 e0       	ldi	r21, 0x00	; 0
 c62:	55 1f       	adc	r21, r21
 c64:	62 9f       	mul	r22, r18
 c66:	f0 01       	movw	r30, r0
 c68:	72 9f       	mul	r23, r18
 c6a:	bb 27       	eor	r27, r27
 c6c:	f0 0d       	add	r31, r0
 c6e:	b1 1d       	adc	r27, r1
 c70:	63 9f       	mul	r22, r19
 c72:	aa 27       	eor	r26, r26
 c74:	f0 0d       	add	r31, r0
 c76:	b1 1d       	adc	r27, r1
 c78:	aa 1f       	adc	r26, r26
 c7a:	64 9f       	mul	r22, r20
 c7c:	66 27       	eor	r22, r22
 c7e:	b0 0d       	add	r27, r0
 c80:	a1 1d       	adc	r26, r1
 c82:	66 1f       	adc	r22, r22
 c84:	82 9f       	mul	r24, r18
 c86:	22 27       	eor	r18, r18
 c88:	b0 0d       	add	r27, r0
 c8a:	a1 1d       	adc	r26, r1
 c8c:	62 1f       	adc	r22, r18
 c8e:	73 9f       	mul	r23, r19
 c90:	b0 0d       	add	r27, r0
 c92:	a1 1d       	adc	r26, r1
 c94:	62 1f       	adc	r22, r18
 c96:	83 9f       	mul	r24, r19
 c98:	a0 0d       	add	r26, r0
 c9a:	61 1d       	adc	r22, r1
 c9c:	22 1f       	adc	r18, r18
 c9e:	74 9f       	mul	r23, r20
 ca0:	33 27       	eor	r19, r19
 ca2:	a0 0d       	add	r26, r0
 ca4:	61 1d       	adc	r22, r1
 ca6:	23 1f       	adc	r18, r19
 ca8:	84 9f       	mul	r24, r20
 caa:	60 0d       	add	r22, r0
 cac:	21 1d       	adc	r18, r1
 cae:	82 2f       	mov	r24, r18
 cb0:	76 2f       	mov	r23, r22
 cb2:	6a 2f       	mov	r22, r26
 cb4:	11 24       	eor	r1, r1
 cb6:	9f 57       	subi	r25, 0x7F	; 127
 cb8:	50 40       	sbci	r21, 0x00	; 0
 cba:	8a f0       	brmi	.+34     	; 0xcde <__mulsf3_pse+0x84>
 cbc:	e1 f0       	breq	.+56     	; 0xcf6 <__mulsf3_pse+0x9c>
 cbe:	88 23       	and	r24, r24
 cc0:	4a f0       	brmi	.+18     	; 0xcd4 <__mulsf3_pse+0x7a>
 cc2:	ee 0f       	add	r30, r30
 cc4:	ff 1f       	adc	r31, r31
 cc6:	bb 1f       	adc	r27, r27
 cc8:	66 1f       	adc	r22, r22
 cca:	77 1f       	adc	r23, r23
 ccc:	88 1f       	adc	r24, r24
 cce:	91 50       	subi	r25, 0x01	; 1
 cd0:	50 40       	sbci	r21, 0x00	; 0
 cd2:	a9 f7       	brne	.-22     	; 0xcbe <__mulsf3_pse+0x64>
 cd4:	9e 3f       	cpi	r25, 0xFE	; 254
 cd6:	51 05       	cpc	r21, r1
 cd8:	70 f0       	brcs	.+28     	; 0xcf6 <__mulsf3_pse+0x9c>
 cda:	60 cf       	rjmp	.-320    	; 0xb9c <__fp_inf>
 cdc:	aa cf       	rjmp	.-172    	; 0xc32 <__fp_szero>
 cde:	5f 3f       	cpi	r21, 0xFF	; 255
 ce0:	ec f3       	brlt	.-6      	; 0xcdc <__mulsf3_pse+0x82>
 ce2:	98 3e       	cpi	r25, 0xE8	; 232
 ce4:	dc f3       	brlt	.-10     	; 0xcdc <__mulsf3_pse+0x82>
 ce6:	86 95       	lsr	r24
 ce8:	77 95       	ror	r23
 cea:	67 95       	ror	r22
 cec:	b7 95       	ror	r27
 cee:	f7 95       	ror	r31
 cf0:	e7 95       	ror	r30
 cf2:	9f 5f       	subi	r25, 0xFF	; 255
 cf4:	c1 f7       	brne	.-16     	; 0xce6 <__mulsf3_pse+0x8c>
 cf6:	fe 2b       	or	r31, r30
 cf8:	88 0f       	add	r24, r24
 cfa:	91 1d       	adc	r25, r1
 cfc:	96 95       	lsr	r25
 cfe:	87 95       	ror	r24
 d00:	97 f9       	bld	r25, 7
 d02:	08 95       	ret

00000d04 <__divmodhi4>:
 d04:	97 fb       	bst	r25, 7
 d06:	07 2e       	mov	r0, r23
 d08:	16 f4       	brtc	.+4      	; 0xd0e <__divmodhi4+0xa>
 d0a:	00 94       	com	r0
 d0c:	06 d0       	rcall	.+12     	; 0xd1a <__divmodhi4_neg1>
 d0e:	77 fd       	sbrc	r23, 7
 d10:	08 d0       	rcall	.+16     	; 0xd22 <__divmodhi4_neg2>
 d12:	1a d0       	rcall	.+52     	; 0xd48 <__udivmodhi4>
 d14:	07 fc       	sbrc	r0, 7
 d16:	05 d0       	rcall	.+10     	; 0xd22 <__divmodhi4_neg2>
 d18:	3e f4       	brtc	.+14     	; 0xd28 <__divmodhi4_exit>

00000d1a <__divmodhi4_neg1>:
 d1a:	90 95       	com	r25
 d1c:	81 95       	neg	r24
 d1e:	9f 4f       	sbci	r25, 0xFF	; 255
 d20:	08 95       	ret

00000d22 <__divmodhi4_neg2>:
 d22:	70 95       	com	r23
 d24:	61 95       	neg	r22
 d26:	7f 4f       	sbci	r23, 0xFF	; 255

00000d28 <__divmodhi4_exit>:
 d28:	08 95       	ret

00000d2a <__umulhisi3>:
 d2a:	a2 9f       	mul	r26, r18
 d2c:	b0 01       	movw	r22, r0
 d2e:	b3 9f       	mul	r27, r19
 d30:	c0 01       	movw	r24, r0
 d32:	a3 9f       	mul	r26, r19
 d34:	70 0d       	add	r23, r0
 d36:	81 1d       	adc	r24, r1
 d38:	11 24       	eor	r1, r1
 d3a:	91 1d       	adc	r25, r1
 d3c:	b2 9f       	mul	r27, r18
 d3e:	70 0d       	add	r23, r0
 d40:	81 1d       	adc	r24, r1
 d42:	11 24       	eor	r1, r1
 d44:	91 1d       	adc	r25, r1
 d46:	08 95       	ret

00000d48 <__udivmodhi4>:
 d48:	aa 1b       	sub	r26, r26
 d4a:	bb 1b       	sub	r27, r27
 d4c:	51 e1       	ldi	r21, 0x11	; 17
 d4e:	07 c0       	rjmp	.+14     	; 0xd5e <__udivmodhi4_ep>

00000d50 <__udivmodhi4_loop>:
 d50:	aa 1f       	adc	r26, r26
 d52:	bb 1f       	adc	r27, r27
 d54:	a6 17       	cp	r26, r22
 d56:	b7 07       	cpc	r27, r23
 d58:	10 f0       	brcs	.+4      	; 0xd5e <__udivmodhi4_ep>
 d5a:	a6 1b       	sub	r26, r22
 d5c:	b7 0b       	sbc	r27, r23

00000d5e <__udivmodhi4_ep>:
 d5e:	88 1f       	adc	r24, r24
 d60:	99 1f       	adc	r25, r25
 d62:	5a 95       	dec	r21
 d64:	a9 f7       	brne	.-22     	; 0xd50 <__udivmodhi4_loop>
 d66:	80 95       	com	r24
 d68:	90 95       	com	r25
 d6a:	bc 01       	movw	r22, r24
 d6c:	cd 01       	movw	r24, r26
 d6e:	08 95       	ret

00000d70 <do_rand>:
 d70:	8f 92       	push	r8
 d72:	9f 92       	push	r9
 d74:	af 92       	push	r10
 d76:	bf 92       	push	r11
 d78:	cf 92       	push	r12
 d7a:	df 92       	push	r13
 d7c:	ef 92       	push	r14
 d7e:	ff 92       	push	r15
 d80:	cf 93       	push	r28
 d82:	df 93       	push	r29
 d84:	ec 01       	movw	r28, r24
 d86:	68 81       	ld	r22, Y
 d88:	79 81       	ldd	r23, Y+1	; 0x01
 d8a:	8a 81       	ldd	r24, Y+2	; 0x02
 d8c:	9b 81       	ldd	r25, Y+3	; 0x03
 d8e:	61 15       	cp	r22, r1
 d90:	71 05       	cpc	r23, r1
 d92:	81 05       	cpc	r24, r1
 d94:	91 05       	cpc	r25, r1
 d96:	21 f4       	brne	.+8      	; 0xda0 <do_rand+0x30>
 d98:	64 e2       	ldi	r22, 0x24	; 36
 d9a:	79 ed       	ldi	r23, 0xD9	; 217
 d9c:	8b e5       	ldi	r24, 0x5B	; 91
 d9e:	97 e0       	ldi	r25, 0x07	; 7
 da0:	2d e1       	ldi	r18, 0x1D	; 29
 da2:	33 ef       	ldi	r19, 0xF3	; 243
 da4:	41 e0       	ldi	r20, 0x01	; 1
 da6:	50 e0       	ldi	r21, 0x00	; 0
 da8:	38 d0       	rcall	.+112    	; 0xe1a <__divmodsi4>
 daa:	49 01       	movw	r8, r18
 dac:	5a 01       	movw	r10, r20
 dae:	9b 01       	movw	r18, r22
 db0:	ac 01       	movw	r20, r24
 db2:	a7 ea       	ldi	r26, 0xA7	; 167
 db4:	b1 e4       	ldi	r27, 0x41	; 65
 db6:	4d d0       	rcall	.+154    	; 0xe52 <__muluhisi3>
 db8:	6b 01       	movw	r12, r22
 dba:	7c 01       	movw	r14, r24
 dbc:	ac ee       	ldi	r26, 0xEC	; 236
 dbe:	b4 ef       	ldi	r27, 0xF4	; 244
 dc0:	a5 01       	movw	r20, r10
 dc2:	94 01       	movw	r18, r8
 dc4:	52 d0       	rcall	.+164    	; 0xe6a <__mulohisi3>
 dc6:	dc 01       	movw	r26, r24
 dc8:	cb 01       	movw	r24, r22
 dca:	8c 0d       	add	r24, r12
 dcc:	9d 1d       	adc	r25, r13
 dce:	ae 1d       	adc	r26, r14
 dd0:	bf 1d       	adc	r27, r15
 dd2:	b7 ff       	sbrs	r27, 7
 dd4:	03 c0       	rjmp	.+6      	; 0xddc <do_rand+0x6c>
 dd6:	01 97       	sbiw	r24, 0x01	; 1
 dd8:	a1 09       	sbc	r26, r1
 dda:	b0 48       	sbci	r27, 0x80	; 128
 ddc:	88 83       	st	Y, r24
 dde:	99 83       	std	Y+1, r25	; 0x01
 de0:	aa 83       	std	Y+2, r26	; 0x02
 de2:	bb 83       	std	Y+3, r27	; 0x03
 de4:	9f 77       	andi	r25, 0x7F	; 127
 de6:	df 91       	pop	r29
 de8:	cf 91       	pop	r28
 dea:	ff 90       	pop	r15
 dec:	ef 90       	pop	r14
 dee:	df 90       	pop	r13
 df0:	cf 90       	pop	r12
 df2:	bf 90       	pop	r11
 df4:	af 90       	pop	r10
 df6:	9f 90       	pop	r9
 df8:	8f 90       	pop	r8
 dfa:	08 95       	ret

00000dfc <rand_r>:
 dfc:	b9 cf       	rjmp	.-142    	; 0xd70 <do_rand>

00000dfe <rand>:
 dfe:	80 e0       	ldi	r24, 0x00	; 0
 e00:	91 e0       	ldi	r25, 0x01	; 1
 e02:	b6 cf       	rjmp	.-148    	; 0xd70 <do_rand>

00000e04 <srand>:
 e04:	a0 e0       	ldi	r26, 0x00	; 0
 e06:	b0 e0       	ldi	r27, 0x00	; 0
 e08:	80 93 00 01 	sts	0x0100, r24
 e0c:	90 93 01 01 	sts	0x0101, r25
 e10:	a0 93 02 01 	sts	0x0102, r26
 e14:	b0 93 03 01 	sts	0x0103, r27
 e18:	08 95       	ret

00000e1a <__divmodsi4>:
 e1a:	05 2e       	mov	r0, r21
 e1c:	97 fb       	bst	r25, 7
 e1e:	16 f4       	brtc	.+4      	; 0xe24 <__divmodsi4+0xa>
 e20:	00 94       	com	r0
 e22:	0f d0       	rcall	.+30     	; 0xe42 <__negsi2>
 e24:	57 fd       	sbrc	r21, 7
 e26:	05 d0       	rcall	.+10     	; 0xe32 <__divmodsi4_neg2>
 e28:	24 d0       	rcall	.+72     	; 0xe72 <__udivmodsi4>
 e2a:	07 fc       	sbrc	r0, 7
 e2c:	02 d0       	rcall	.+4      	; 0xe32 <__divmodsi4_neg2>
 e2e:	46 f4       	brtc	.+16     	; 0xe40 <__divmodsi4_exit>
 e30:	08 c0       	rjmp	.+16     	; 0xe42 <__negsi2>

00000e32 <__divmodsi4_neg2>:
 e32:	50 95       	com	r21
 e34:	40 95       	com	r20
 e36:	30 95       	com	r19
 e38:	21 95       	neg	r18
 e3a:	3f 4f       	sbci	r19, 0xFF	; 255
 e3c:	4f 4f       	sbci	r20, 0xFF	; 255
 e3e:	5f 4f       	sbci	r21, 0xFF	; 255

00000e40 <__divmodsi4_exit>:
 e40:	08 95       	ret

00000e42 <__negsi2>:
 e42:	90 95       	com	r25
 e44:	80 95       	com	r24
 e46:	70 95       	com	r23
 e48:	61 95       	neg	r22
 e4a:	7f 4f       	sbci	r23, 0xFF	; 255
 e4c:	8f 4f       	sbci	r24, 0xFF	; 255
 e4e:	9f 4f       	sbci	r25, 0xFF	; 255
 e50:	08 95       	ret

00000e52 <__muluhisi3>:
 e52:	6b df       	rcall	.-298    	; 0xd2a <__umulhisi3>
 e54:	a5 9f       	mul	r26, r21
 e56:	90 0d       	add	r25, r0
 e58:	b4 9f       	mul	r27, r20
 e5a:	90 0d       	add	r25, r0
 e5c:	a4 9f       	mul	r26, r20
 e5e:	80 0d       	add	r24, r0
 e60:	91 1d       	adc	r25, r1
 e62:	11 24       	eor	r1, r1
 e64:	08 95       	ret

00000e66 <__mulshisi3>:
 e66:	b7 ff       	sbrs	r27, 7
 e68:	f4 cf       	rjmp	.-24     	; 0xe52 <__muluhisi3>

00000e6a <__mulohisi3>:
 e6a:	f3 df       	rcall	.-26     	; 0xe52 <__muluhisi3>
 e6c:	82 1b       	sub	r24, r18
 e6e:	93 0b       	sbc	r25, r19
 e70:	08 95       	ret

00000e72 <__udivmodsi4>:
 e72:	a1 e2       	ldi	r26, 0x21	; 33
 e74:	1a 2e       	mov	r1, r26
 e76:	aa 1b       	sub	r26, r26
 e78:	bb 1b       	sub	r27, r27
 e7a:	fd 01       	movw	r30, r26
 e7c:	0d c0       	rjmp	.+26     	; 0xe98 <__udivmodsi4_ep>

00000e7e <__udivmodsi4_loop>:
 e7e:	aa 1f       	adc	r26, r26
 e80:	bb 1f       	adc	r27, r27
 e82:	ee 1f       	adc	r30, r30
 e84:	ff 1f       	adc	r31, r31
 e86:	a2 17       	cp	r26, r18
 e88:	b3 07       	cpc	r27, r19
 e8a:	e4 07       	cpc	r30, r20
 e8c:	f5 07       	cpc	r31, r21
 e8e:	20 f0       	brcs	.+8      	; 0xe98 <__udivmodsi4_ep>
 e90:	a2 1b       	sub	r26, r18
 e92:	b3 0b       	sbc	r27, r19
 e94:	e4 0b       	sbc	r30, r20
 e96:	f5 0b       	sbc	r31, r21

00000e98 <__udivmodsi4_ep>:
 e98:	66 1f       	adc	r22, r22
 e9a:	77 1f       	adc	r23, r23
 e9c:	88 1f       	adc	r24, r24
 e9e:	99 1f       	adc	r25, r25
 ea0:	1a 94       	dec	r1
 ea2:	69 f7       	brne	.-38     	; 0xe7e <__udivmodsi4_loop>
 ea4:	60 95       	com	r22
 ea6:	70 95       	com	r23
 ea8:	80 95       	com	r24
 eaa:	90 95       	com	r25
 eac:	9b 01       	movw	r18, r22
 eae:	ac 01       	movw	r20, r24
 eb0:	bd 01       	movw	r22, r26
 eb2:	cf 01       	movw	r24, r30
 eb4:	08 95       	ret

00000eb6 <_exit>:
 eb6:	f8 94       	cli

00000eb8 <__stop_program>:
 eb8:	ff cf       	rjmp	.-2      	; 0xeb8 <__stop_program>
